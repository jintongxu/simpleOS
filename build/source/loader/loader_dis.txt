
/home/rafael/Documents/diy-x86os/start/start/build/source/loader/loader.elf:     file format elf32-i386
/home/rafael/Documents/diy-x86os/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x000006dd memsz 0x000006dd flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00000039 memsz 0x00000039 flags r--
    LOAD off    0x00003000 vaddr 0x0000b000 paddr 0x0000b000 align 2**12
         filesz 0x00002000 memsz 0x00002054 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006dd  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000039  00009000  00009000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00002000  0000b000  0000b000  00003000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  0000d000  0000d000  00005000  2**5
                  ALLOC
  4 .comment      0000002b  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00005030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000009eb  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000003bc  00000000  00000000  00005a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000583  00000000  00000000  00005e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000328  00000000  00000000  000063bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000004e4  00000000  00000000  000066e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000018  00000000  00000000  00006bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00009000 l    d  .rodata	00000000 .rodata
0000b000 l    d  .data	00000000 .data
0000d000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	00000030 outb
00008072 l     F .text	0000000b cli
0000807d l     F .text	00000036 lgdt
000080b3 l     F .text	0000001a read_cr0
000080cd l     F .text	00000012 write_cr0
000080df l     F .text	0000002b far_jump
0000810a l     F .text	00000040 show_msg
0000814a l     F .text	0000013d detect_memory
00008287 l     F .text	00000096 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008344 l     F .text	0000001d inb
00008361 l     F .text	0000001f inw
00008380 l     F .text	00000021 outb
000083a1 l     F .text	00000011 read_cr0
000083b2 l     F .text	0000000c write_cr0
000083be l     F .text	0000000c write_cr3
000083ca l     F .text	00000011 read_cr4
000083db l     F .text	0000000c write_cr4
000083e7 l     F .text	00000134 read_disk
0000851b l     F .text	0000011e reload_elf_file
00008639 l     F .text	00000009 die
0000c000 l     O .data	00001000 page_dir.1667
0000831d g     F .text	00000027 loader_entry
0000b000 g     O .data	00000018 gdt_table
00008687 g     F .text	00000056 load_kernel
00008642 g     F .text	00000045 enable_page_mode
0000d000 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
0000d000 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
0000d000 g       .data	00000000 _edata
0000d054 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.extern loader_entry
	.global _start
_start:
    jmp loader_entry
    8000:	e9 1a 03             	jmp    831d <loader_entry>

00008003 <protect_mode_entry>:
	.code32
	.text
	.global protect_mode_entry
	.extern load_kernel
protect_mode_entry:
	mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs
	// 跳到32位的函数中去
	jmp $8, $load_kernel
    8011:	ea 87 86 00 00       	ljmp   $0x0,$0x8687
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
#ifndef CPU_INSTR_H
#define CPU_INSTR_H

#include "types.h"

static inline uint8_t inb (uint16_t port) {
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv;

    // inb al, dx
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return rv;
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    803e:	66 c9                	leavel 
    8040:	66 c3                	retl   

00008042 <outb>:
    // inb al, dx
    __asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
    return rv;
}

static inline void outb (uint16_t port, uint8_t data) {
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8050:	67 66 8b 55 0c       	mov    0xc(%ebp),%edx
    8055:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    8059:	66 89 d0             	mov    %edx,%eax
    805c:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    // outb al, dx
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    8060:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8066:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    806c:	ee                   	out    %al,(%dx)
}
    806d:	90                   	nop
    806e:	66 c9                	leavel 
    8070:	66 c3                	retl   

00008072 <cli>:
static inline void cli () {
    8072:	66 55                	push   %ebp
    8074:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    8077:	fa                   	cli    
}
    8078:	90                   	nop
    8079:	66 5d                	pop    %ebp
    807b:	66 c3                	retl   

0000807d <lgdt>:
static inline void sti () {
    __asm__ __volatile__("sti");
}


static inline void lgdt (uint32_t start, uint32_t size) {
    807d:	66 55                	push   %ebp
    807f:	66 89 e5             	mov    %esp,%ebp
    8082:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    }gdt;

    gdt.start31_16 = start >> 16;
    8086:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    808b:	66 c1 e8 10          	shr    $0x10,%eax
    808f:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
    8093:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8098:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
    809c:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80a1:	66 83 e8 01          	sub    $0x1,%eax
    80a5:	67 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
    80a9:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
}
    80ae:	90                   	nop
    80af:	66 c9                	leavel 
    80b1:	66 c3                	retl   

000080b3 <read_cr0>:

static inline uint32_t read_cr0 () {
    80b3:	66 55                	push   %ebp
    80b5:	66 89 e5             	mov    %esp,%ebp
    80b8:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;

    __asm__ __volatile__("mov %%cr0, %[v]":[v]"=r"(cr0));
    80bc:	0f 20 c0             	mov    %cr0,%eax
    80bf:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return cr0;
    80c4:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c9:	66 c9                	leavel 
    80cb:	66 c3                	retl   

000080cd <write_cr0>:

static inline void write_cr0 (uint32_t v) {
    80cd:	66 55                	push   %ebp
    80cf:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
    80d2:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d7:	0f 22 c0             	mov    %eax,%cr0
}
    80da:	90                   	nop
    80db:	66 5d                	pop    %ebp
    80dd:	66 c3                	retl   

000080df <far_jump>:
    idt.limit = size - 1;

    __asm__ __volatile__("lidt %0"::"m"(idt));
}

static inline void far_jump (uint32_t selector, uint32_t offset) {
    80df:	66 55                	push   %ebp
    80e1:	66 89 e5             	mov    %esp,%ebp
    80e4:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
    80e8:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ed:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80f2:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f7:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)

    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
    80fc:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    8101:	67 66 ff 28          	ljmpl  *(%eax)
}
    8105:	90                   	nop
    8106:	66 c9                	leavel 
    8108:	66 c3                	retl   

0000810a <show_msg>:
boot_info_t boot_info;			// 启动参数信息

/**
 * BIOS下显示字符串
 */
static void show_msg (const char * msg) {
    810a:	f3 0f 1e fb          	endbr32 
    810e:	66 55                	push   %ebp
    8110:	66 89 e5             	mov    %esp,%ebp
    8113:	66 83 ec 10          	sub    $0x10,%esp
    char c;

	// 使用bios写显存，持续往下写
	while ((c = *msg++) != '\0') {
    8117:	eb 0c                	jmp    8125 <show_msg+0x1b>
		__asm__ __volatile__(
    8119:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    811f:	b4 0e                	mov    $0xe,%ah
    8121:	88 c0                	mov    %al,%al
    8123:	cd 10                	int    $0x10
	while ((c = *msg++) != '\0') {
    8125:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    812a:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    812f:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8134:	67 66 0f b6 00       	movzbl (%eax),%eax
    8139:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    813d:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    8142:	75 d5                	jne    8119 <show_msg+0xf>
				"mov $0xe, %%ah\n\t"
				"mov %[ch], %%al\n\t"
				"int $0x10"::[ch]"r"(c));
	}
}
    8144:	90                   	nop
    8145:	90                   	nop
    8146:	66 c9                	leavel 
    8148:	66 c3                	retl   

0000814a <detect_memory>:

// 参考：https://wiki.osdev.org/Memory_Map_(x86)
// 1MB以下比较标准, 在1M以上会有差别
// 检测：https://wiki.osdev.org/Detecting_Memory_(x86)#BIOS_Function:_INT_0x15.2C_AH_.3D_0xC7
static void  detect_memory(void) {
    814a:	f3 0f 1e fb          	endbr32 
    814e:	66 55                	push   %ebp
    8150:	66 89 e5             	mov    %esp,%ebp
    8153:	66 57                	push   %edi
    8155:	66 56                	push   %esi
    8157:	66 53                	push   %ebx
    8159:	66 83 ec 30          	sub    $0x30,%esp
	uint32_t contID = 0;
    815d:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8164:	00 00 
	SMAP_entry_t smap_entry;
	int signature, bytes;

    show_msg("try to detect memory:");
    8166:	66 68 00 90 00 00    	pushl  $0x9000
    816c:	66 e8 98 ff ff ff    	calll  810a <show_msg>
    8172:	66 83 c4 04          	add    $0x4,%esp

	// 初次：EDX=0x534D4150,EAX=0xE820,ECX=24,INT 0x15, EBX=0（初次）
	// 后续：EAX=0xE820,ECX=24,
	// 结束判断：EBX=0
	boot_info.ram_region_count = 0;
    8176:	66 c7 06 50 d0 00 00 	movl   $0x0,-0x2fb0
    817d:	00 00 
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    817f:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8186:	00 00 
    8188:	e9 d0 00             	jmp    825b <detect_memory+0x111>
		SMAP_entry_t * entry = &smap_entry;
    818b:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8190:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

		__asm__ __volatile__("int  $0x15"
    8195:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    819b:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    81a0:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    81a6:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81ac:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81b1:	66 89 f7             	mov    %esi,%edi
    81b4:	cd 15                	int    $0x15
    81b6:	66 89 da             	mov    %ebx,%edx
    81b9:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81be:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81c3:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
			: "=a"(signature), "=c"(bytes), "=b"(contID)
			: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
		if (signature != 0x534D4150) {
    81c8:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81cf:	4d 53 
    81d1:	74 13                	je     81e6 <detect_memory+0x9c>
            show_msg("failed.\r\n");
    81d3:	66 68 16 90 00 00    	pushl  $0x9016
    81d9:	66 e8 2b ff ff ff    	calll  810a <show_msg>
    81df:	66 83 c4 04          	add    $0x4,%esp
    81e3:	e9 92 00             	jmp    8278 <detect_memory+0x12e>
			return;
		}

		// todo: 20字节
		if (bytes > 20 && (entry->ACPI & 0x0001) == 0){
    81e6:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81ec:	7e 13                	jle    8201 <detect_memory+0xb7>
    81ee:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81f3:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81f8:	66 83 e0 01          	and    $0x1,%eax
    81fc:	66 85 c0             	test   %eax,%eax
    81ff:	74 53                	je     8254 <detect_memory+0x10a>
			continue;
		}

        // 保存RAM信息，只取32位，空间有限无需考虑更大容量的情况
        if (entry->Type == 1) {
    8201:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8206:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    820b:	66 83 f8 01          	cmp    $0x1,%eax
    820f:	75 39                	jne    824a <detect_memory+0x100>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8211:	66 a1 50 d0          	mov    0xd050,%eax
    8215:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    821a:	67 66 8b 12          	mov    (%edx),%edx
    821e:	67 66 89 14 c5 00 d0 	mov    %edx,0xd000(,%eax,8)
    8225:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    8227:	66 a1 50 d0          	mov    0xd050,%eax
    822b:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8230:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8235:	67 66 89 14 c5 04 d0 	mov    %edx,0xd004(,%eax,8)
    823c:	00 00 
            boot_info.ram_region_count++;
    823e:	66 a1 50 d0          	mov    0xd050,%eax
    8242:	66 83 c0 01          	add    $0x1,%eax
    8246:	66 a3 50 d0          	mov    %eax,0xd050
        }

		if (contID == 0) {
    824a:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8250:	74 15                	je     8267 <detect_memory+0x11d>
    8252:	eb 01                	jmp    8255 <detect_memory+0x10b>
			continue;
    8254:	90                   	nop
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    8255:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    825b:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8261:	0f 8e 26 ff          	jle    818b <detect_memory+0x41>
    8265:	eb 01                	jmp    8268 <detect_memory+0x11e>
			break;
    8267:	90                   	nop
		}
	}
    show_msg("ok.\r\n");
    8268:	66 68 20 90 00 00    	pushl  $0x9020
    826e:	66 e8 96 fe ff ff    	calll  810a <show_msg>
    8274:	66 83 c4 04          	add    $0x4,%esp
}
    8278:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    827d:	66 5b                	pop    %ebx
    827f:	66 5e                	pop    %esi
    8281:	66 5f                	pop    %edi
    8283:	66 5d                	pop    %ebp
    8285:	66 c3                	retl   

00008287 <enter_protect_mode>:
};

/**
 * 进入保护模式
 */
static void  enter_protect_mode() {
    8287:	f3 0f 1e fb          	endbr32 
    828b:	66 55                	push   %ebp
    828d:	66 89 e5             	mov    %esp,%ebp
    8290:	66 83 ec 10          	sub    $0x10,%esp
    // 关中断
    cli();
    8294:	66 e8 d8 fd ff ff    	calll  8072 <cli>

    // 开启A20地址线，使得可访问1M以上空间
    // 使用的是Fast A20 Gate方式，见https://wiki.osdev.org/A20#Fast_A20_Gate
    uint8_t v = inb(0x92);
    829a:	66 68 92 00 00 00    	pushl  $0x92
    82a0:	66 e8 72 fd ff ff    	calll  8018 <inb>
    82a6:	66 83 c4 04          	add    $0x4,%esp
    82aa:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, v | 0x2);
    82ae:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82b4:	66 83 c8 02          	or     $0x2,%eax
    82b8:	66 0f b6 c0          	movzbl %al,%eax
    82bc:	66 50                	push   %eax
    82be:	66 68 92 00 00 00    	pushl  $0x92
    82c4:	66 e8 78 fd ff ff    	calll  8042 <outb>
    82ca:	66 83 c4 08          	add    $0x8,%esp

    // 加载GDT。由于中断已经关掉，IDT不需要加载
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    82ce:	66 b8 00 b0 00 00    	mov    $0xb000,%eax
    82d4:	66 6a 18             	pushl  $0x18
    82d7:	66 50                	push   %eax
    82d9:	66 e8 9e fd ff ff    	calll  807d <lgdt>
    82df:	66 83 c4 08          	add    $0x8,%esp

    // 打开CR0的保护模式位，进入保持模式
    uint32_t cr0 = read_cr0();
    82e3:	66 e8 ca fd ff ff    	calll  80b3 <read_cr0>
    82e9:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1 << 0));
    82ee:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82f3:	66 83 c8 01          	or     $0x1,%eax
    82f7:	66 50                	push   %eax
    82f9:	66 e8 ce fd ff ff    	calll  80cd <write_cr0>
    82ff:	66 83 c4 04          	add    $0x4,%esp


    // 长跳转进入到保护模式
    // 使用长跳转，以便清空流水线，将里面的16位代码给清空
    far_jump(8, (uint32_t)protect_mode_entry);
    8303:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    8309:	66 50                	push   %eax
    830b:	66 6a 08             	pushl  $0x8
    830e:	66 e8 cb fd ff ff    	calll  80df <far_jump>
    8314:	66 83 c4 08          	add    $0x8,%esp
}
    8318:	90                   	nop
    8319:	66 c9                	leavel 
    831b:	66 c3                	retl   

0000831d <loader_entry>:

void loader_entry(void) {
    831d:	f3 0f 1e fb          	endbr32 
    8321:	66 55                	push   %ebp
    8323:	66 89 e5             	mov    %esp,%ebp
    show_msg("....loading.....\r\n");
    8326:	66 68 26 90 00 00    	pushl  $0x9026
    832c:	66 e8 d8 fd ff ff    	calll  810a <show_msg>
    8332:	66 83 c4 04          	add    $0x4,%esp
	detect_memory();
    8336:	66 e8 0e fe ff ff    	calll  814a <detect_memory>
    enter_protect_mode();
    833c:	66 e8 45 ff ff ff    	calll  8287 <enter_protect_mode>
    for(;;) {}
    8342:	eb fe                	jmp    8342 <loader_entry+0x25>

00008344 <inb>:
static inline uint8_t inb (uint16_t port) {
    8344:	55                   	push   %bp
    8345:	89 e5                	mov    %sp,%bp
    8347:	83 ec 14             	sub    $0x14,%sp
    834a:	8b 45 08             	mov    0x8(%di),%ax
    834d:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
    8351:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8355:	89 c2                	mov    %ax,%dx
    8357:	ec                   	in     (%dx),%al
    8358:	88 45 ff             	mov    %al,-0x1(%di)
    return rv;
    835b:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    835f:	c9                   	leave  
    8360:	c3                   	ret    

00008361 <inw>:
static inline uint16_t inw (uint16_t port) {
    8361:	55                   	push   %bp
    8362:	89 e5                	mov    %sp,%bp
    8364:	83 ec 14             	sub    $0x14,%sp
    8367:	8b 45 08             	mov    0x8(%di),%ax
    836a:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
    836e:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8372:	89 c2                	mov    %ax,%dx
    8374:	66 ed                	in     (%dx),%eax
    8376:	66 89 45 fe          	mov    %eax,-0x2(%di)
    return rv;
    837a:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    837e:	c9                   	leave  
    837f:	c3                   	ret    

00008380 <outb>:
static inline void outb (uint16_t port, uint8_t data) {
    8380:	55                   	push   %bp
    8381:	89 e5                	mov    %sp,%bp
    8383:	83 ec 08             	sub    $0x8,%sp
    8386:	8b 45 08             	mov    0x8(%di),%ax
    8389:	8b 55 0c             	mov    0xc(%di),%dx
    838c:	66 89 45 fc          	mov    %eax,-0x4(%di)
    8390:	89 d0                	mov    %dx,%ax
    8392:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    8395:	0f b7 55 fc          	movzww -0x4(%di),%dx
    8399:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    839d:	ee                   	out    %al,(%dx)
}
    839e:	90                   	nop
    839f:	c9                   	leave  
    83a0:	c3                   	ret    

000083a1 <read_cr0>:
static inline uint32_t read_cr0 () {
    83a1:	55                   	push   %bp
    83a2:	89 e5                	mov    %sp,%bp
    83a4:	83 ec 10             	sub    $0x10,%sp
    __asm__ __volatile__("mov %%cr0, %[v]":[v]"=r"(cr0));
    83a7:	0f 20 c0             	mov    %cr0,%eax
    83aa:	89 45 fc             	mov    %ax,-0x4(%di)
    return cr0;
    83ad:	8b 45 fc             	mov    -0x4(%di),%ax
}
    83b0:	c9                   	leave  
    83b1:	c3                   	ret    

000083b2 <write_cr0>:
static inline void write_cr0 (uint32_t v) {
    83b2:	55                   	push   %bp
    83b3:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
    83b5:	8b 45 08             	mov    0x8(%di),%ax
    83b8:	0f 22 c0             	mov    %eax,%cr0
}
    83bb:	90                   	nop
    83bc:	5d                   	pop    %bp
    83bd:	c3                   	ret    

000083be <write_cr3>:
static inline void write_cr3 (uint32_t v) {
    83be:	55                   	push   %bp
    83bf:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
    83c1:	8b 45 08             	mov    0x8(%di),%ax
    83c4:	0f 22 d8             	mov    %eax,%cr3
}
    83c7:	90                   	nop
    83c8:	5d                   	pop    %bp
    83c9:	c3                   	ret    

000083ca <read_cr4>:
static inline uint32_t read_cr4 () {
    83ca:	55                   	push   %bp
    83cb:	89 e5                	mov    %sp,%bp
    83cd:	83 ec 10             	sub    $0x10,%sp
    __asm__ __volatile__("mov %%cr4, %[v]":[v]"=r"(cr4));
    83d0:	0f 20 e0             	mov    %cr4,%eax
    83d3:	89 45 fc             	mov    %ax,-0x4(%di)
    return cr4;
    83d6:	8b 45 fc             	mov    -0x4(%di),%ax
}
    83d9:	c9                   	leave  
    83da:	c3                   	ret    

000083db <write_cr4>:
static inline void write_cr4 (uint32_t v) {
    83db:	55                   	push   %bp
    83dc:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr4"::[v]"r"(v));
    83de:	8b 45 08             	mov    0x8(%di),%ax
    83e1:	0f 22 e0             	mov    %eax,%cr4
}
    83e4:	90                   	nop
    83e5:	5d                   	pop    %bp
    83e6:	c3                   	ret    

000083e7 <read_disk>:
LEA48方式读取磁盘
sector: 从哪个扇区读取
sector_count： 读取多少个
buf: 放到哪里
*/
static void read_disk(int sector, int sector_count, uint8_t * buf) {
    83e7:	f3 0f 1e fb          	endbr32 
    83eb:	55                   	push   %bp
    83ec:	89 e5                	mov    %sp,%bp
    83ee:	53                   	push   %bx
    83ef:	83 ec 10             	sub    $0x10,%sp
    outb(0x1F6, (uint8_t) (0xE0));
    83f2:	68 e0 00             	push   $0xe0
    83f5:	00 00                	add    %al,(%bx,%si)
    83f7:	68 f6 01             	push   $0x1f6
    83fa:	00 00                	add    %al,(%bx,%si)
    83fc:	e8 7f ff             	call   837e <inw+0x1d>
    83ff:	ff                   	(bad)  
    8400:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F2, (uint8_t) (sector_count >> 8));
    8404:	8b 45 0c             	mov    0xc(%di),%ax
    8407:	c1 f8 08             	sar    $0x8,%ax
    840a:	0f b6 c0             	movzbw %al,%ax
    840d:	50                   	push   %ax
    840e:	68 f2 01             	push   $0x1f2
    8411:	00 00                	add    %al,(%bx,%si)
    8413:	e8 68 ff             	call   837e <inw+0x1d>
    8416:	ff                   	(bad)  
    8417:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t) (sector >> 24));		// LBA参数的24~31位
    841b:	8b 45 08             	mov    0x8(%di),%ax
    841e:	c1 f8 18             	sar    $0x18,%ax
    8421:	0f b6 c0             	movzbw %al,%ax
    8424:	50                   	push   %ax
    8425:	68 f3 01             	push   $0x1f3
    8428:	00 00                	add    %al,(%bx,%si)
    842a:	e8 51 ff             	call   837e <inw+0x1d>
    842d:	ff                   	(bad)  
    842e:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t) (0));					// LBA参数的32~39位
    8432:	6a 00                	push   $0x0
    8434:	68 f4 01             	push   $0x1f4
    8437:	00 00                	add    %al,(%bx,%si)
    8439:	e8 42 ff             	call   837e <inw+0x1d>
    843c:	ff                   	(bad)  
    843d:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t) (0));					// LBA参数的40~47位
    8441:	6a 00                	push   $0x0
    8443:	68 f5 01             	push   $0x1f5
    8446:	00 00                	add    %al,(%bx,%si)
    8448:	e8 33 ff             	call   837e <inw+0x1d>
    844b:	ff                   	(bad)  
    844c:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2, (uint8_t) (sector_count));
    8450:	8b 45 0c             	mov    0xc(%di),%ax
    8453:	0f b6 c0             	movzbw %al,%ax
    8456:	50                   	push   %ax
    8457:	68 f2 01             	push   $0x1f2
    845a:	00 00                	add    %al,(%bx,%si)
    845c:	e8 1f ff             	call   837e <inw+0x1d>
    845f:	ff                   	(bad)  
    8460:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F3, (uint8_t) (sector));			// LBA参数的0~7位
    8464:	8b 45 08             	mov    0x8(%di),%ax
    8467:	0f b6 c0             	movzbw %al,%ax
    846a:	50                   	push   %ax
    846b:	68 f3 01             	push   $0x1f3
    846e:	00 00                	add    %al,(%bx,%si)
    8470:	e8 0b ff             	call   837e <inw+0x1d>
    8473:	ff                   	(bad)  
    8474:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F4, (uint8_t) (sector >> 8));		// LBA参数的8~15位
    8478:	8b 45 08             	mov    0x8(%di),%ax
    847b:	c1 f8 08             	sar    $0x8,%ax
    847e:	0f b6 c0             	movzbw %al,%ax
    8481:	50                   	push   %ax
    8482:	68 f4 01             	push   $0x1f4
    8485:	00 00                	add    %al,(%bx,%si)
    8487:	e8 f4 fe             	call   837e <inw+0x1d>
    848a:	ff                   	(bad)  
    848b:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F5, (uint8_t) (sector >> 16));		// LBA参数的16~23位
    848f:	8b 45 08             	mov    0x8(%di),%ax
    8492:	c1 f8 10             	sar    $0x10,%ax
    8495:	0f b6 c0             	movzbw %al,%ax
    8498:	50                   	push   %ax
    8499:	68 f5 01             	push   $0x1f5
    849c:	00 00                	add    %al,(%bx,%si)
    849e:	e8 dd fe             	call   837e <inw+0x1d>
    84a1:	ff                   	(bad)  
    84a2:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F7, (uint8_t) 0x24);
    84a6:	6a 24                	push   $0x24
    84a8:	68 f7 01             	push   $0x1f7
    84ab:	00 00                	add    %al,(%bx,%si)
    84ad:	e8 ce fe             	call   837e <inw+0x1d>
    84b0:	ff                   	(bad)  
    84b1:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	// 读取数据
	uint16_t *data_buf = (uint16_t*) buf;
    84b5:	8b 45 10             	mov    0x10(%di),%ax
    84b8:	89 45 f8             	mov    %ax,-0x8(%di)
	while (sector_count-- > 0) {
    84bb:	eb 4a                	jmp    8507 <read_disk+0x120>
		// 每次扇区读之前都要检查，等待数据就绪
		while ((inb(0x1F7) & 0x88) != 0x8) {}
    84bd:	90                   	nop
    84be:	68 f7 01             	push   $0x1f7
    84c1:	00 00                	add    %al,(%bx,%si)
    84c3:	e8 7c fe             	call   8342 <loader_entry+0x25>
    84c6:	ff                   	(bad)  
    84c7:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84cb:	0f b6 c0             	movzbw %al,%ax
    84ce:	25 88 00             	and    $0x88,%ax
    84d1:	00 00                	add    %al,(%bx,%si)
    84d3:	83 f8 08             	cmp    $0x8,%ax
    84d6:	75 e6                	jne    84be <read_disk+0xd7>

		// 读取并将数据写入到缓存中
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    84d8:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    84dd:	00 00                	add    %al,(%bx,%si)
    84df:	eb 1d                	jmp    84fe <read_disk+0x117>
			*data_buf++ = inw(0x1F0);
    84e1:	8b 5d f8             	mov    -0x8(%di),%bx
    84e4:	8d 43 02             	lea    0x2(%bp,%di),%ax
    84e7:	89 45 f8             	mov    %ax,-0x8(%di)
    84ea:	68 f0 01             	push   $0x1f0
    84ed:	00 00                	add    %al,(%bx,%si)
    84ef:	e8 6d fe             	call   835f <inb+0x1b>
    84f2:	ff                   	(bad)  
    84f3:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84f7:	66 89 03             	mov    %eax,(%bp,%di)
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    84fa:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    84fe:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    8503:	00 00                	add    %al,(%bx,%si)
    8505:	7e da                	jle    84e1 <read_disk+0xfa>
	while (sector_count-- > 0) {
    8507:	8b 45 0c             	mov    0xc(%di),%ax
    850a:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    850d:	89 55 0c             	mov    %dx,0xc(%di)
    8510:	85 c0                	test   %ax,%ax
    8512:	7f a9                	jg     84bd <read_disk+0xd6>
		}
	}
}
    8514:	90                   	nop
    8515:	90                   	nop
    8516:	8b 5d fc             	mov    -0x4(%di),%bx
    8519:	c9                   	leave  
    851a:	c3                   	ret    

0000851b <reload_elf_file>:


static uint32_t reload_elf_file (uint8_t * file_buffer) {
    851b:	f3 0f 1e fb          	endbr32 
    851f:	55                   	push   %bp
    8520:	89 e5                	mov    %sp,%bp
    8522:	83 ec 20             	sub    $0x20,%sp
    Elf32_Ehdr * elf_hdr = (Elf32_Ehdr *)file_buffer;
    8525:	8b 45 08             	mov    0x8(%di),%ax
    8528:	89 45 e8             	mov    %ax,-0x18(%di)
    if ((elf_hdr->e_ident[0] != 0x7F) || (elf_hdr->e_ident[1] != 'E')
    852b:	8b 45 e8             	mov    -0x18(%di),%ax
    852e:	0f b6 00             	movzbw (%bx,%si),%ax
    8531:	3c 7f                	cmp    $0x7f,%al
    8533:	75 21                	jne    8556 <reload_elf_file+0x3b>
    8535:	8b 45 e8             	mov    -0x18(%di),%ax
    8538:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    853c:	3c 45                	cmp    $0x45,%al
    853e:	75 16                	jne    8556 <reload_elf_file+0x3b>
        || (elf_hdr->e_ident[2] != 'L') || (elf_hdr->e_ident[3] != 'F')) {
    8540:	8b 45 e8             	mov    -0x18(%di),%ax
    8543:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    8547:	3c 4c                	cmp    $0x4c,%al
    8549:	75 0b                	jne    8556 <reload_elf_file+0x3b>
    854b:	8b 45 e8             	mov    -0x18(%di),%ax
    854e:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    8552:	3c 46                	cmp    $0x46,%al
    8554:	74 0a                	je     8560 <reload_elf_file+0x45>
            return 0;
    8556:	b8 00 00             	mov    $0x0,%ax
    8559:	00 00                	add    %al,(%bx,%si)
    855b:	e9 d7 00             	jmp    8635 <reload_elf_file+0x11a>
    855e:	00 00                	add    %al,(%bx,%si)
    }

    for (int i = 0; i < elf_hdr->e_phnum; i ++) {
    8560:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    8565:	00 00                	add    %al,(%bx,%si)
    8567:	e9 b2 00             	jmp    861c <reload_elf_file+0x101>
    856a:	00 00                	add    %al,(%bx,%si)
        Elf32_Phdr * phdr = (Elf32_Phdr * )(file_buffer + elf_hdr->e_phoff) + i;
    856c:	8b 45 e8             	mov    -0x18(%di),%ax
    856f:	8b 50 1c             	mov    0x1c(%bx,%si),%dx
    8572:	8b 45 08             	mov    0x8(%di),%ax
    8575:	01 c2                	add    %ax,%dx
    8577:	8b 45 fc             	mov    -0x4(%di),%ax
    857a:	c1 e0 05             	shl    $0x5,%ax
    857d:	01 d0                	add    %dx,%ax
    857f:	89 45 e4             	mov    %ax,-0x1c(%di)
        if (phdr->p_type != PT_LOAD) {
    8582:	8b 45 e4             	mov    -0x1c(%di),%ax
    8585:	8b 00                	mov    (%bx,%si),%ax
    8587:	83 f8 01             	cmp    $0x1,%ax
    858a:	0f 85 89 00          	jne    8617 <reload_elf_file+0xfc>
    858e:	00 00                	add    %al,(%bx,%si)
            continue;
        }

        uint8_t * src = file_buffer + phdr->p_offset;
    8590:	8b 45 e4             	mov    -0x1c(%di),%ax
    8593:	8b 50 04             	mov    0x4(%bx,%si),%dx
    8596:	8b 45 08             	mov    0x8(%di),%ax
    8599:	01 d0                	add    %dx,%ax
    859b:	89 45 f8             	mov    %ax,-0x8(%di)
        uint8_t * dest = (uint8_t *)phdr->p_paddr;
    859e:	8b 45 e4             	mov    -0x1c(%di),%ax
    85a1:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    85a4:	89 45 f4             	mov    %ax,-0xc(%di)
        for (int j = 0; j < phdr->p_filesz; j ++ ) {
    85a7:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    85ac:	00 00                	add    %al,(%bx,%si)
    85ae:	eb 1b                	jmp    85cb <reload_elf_file+0xb0>
            *dest++ = *src++;
    85b0:	8b 55 f8             	mov    -0x8(%di),%dx
    85b3:	8d 42 01             	lea    0x1(%bp,%si),%ax
    85b6:	89 45 f8             	mov    %ax,-0x8(%di)
    85b9:	8b 45 f4             	mov    -0xc(%di),%ax
    85bc:	8d 48 01             	lea    0x1(%bx,%si),%cx
    85bf:	89 4d f4             	mov    %cx,-0xc(%di)
    85c2:	0f b6 12             	movzbw (%bp,%si),%dx
    85c5:	88 10                	mov    %dl,(%bx,%si)
        for (int j = 0; j < phdr->p_filesz; j ++ ) {
    85c7:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    85cb:	8b 45 e4             	mov    -0x1c(%di),%ax
    85ce:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85d1:	8b 45 f0             	mov    -0x10(%di),%ax
    85d4:	39 c2                	cmp    %ax,%dx
    85d6:	77 d8                	ja     85b0 <reload_elf_file+0x95>
        }
        dest = (uint8_t *)phdr->p_paddr + phdr->p_filesz;
    85d8:	8b 45 e4             	mov    -0x1c(%di),%ax
    85db:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85de:	8b 45 e4             	mov    -0x1c(%di),%ax
    85e1:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    85e4:	01 d0                	add    %dx,%ax
    85e6:	89 45 f4             	mov    %ax,-0xc(%di)
        for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j ++ ) {
    85e9:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    85ee:	00 00                	add    %al,(%bx,%si)
    85f0:	eb 10                	jmp    8602 <reload_elf_file+0xe7>
            *dest++ = 0;
    85f2:	8b 45 f4             	mov    -0xc(%di),%ax
    85f5:	8d 50 01             	lea    0x1(%bx,%si),%dx
    85f8:	89 55 f4             	mov    %dx,-0xc(%di)
    85fb:	c6 00 00             	movb   $0x0,(%bx,%si)
        for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j ++ ) {
    85fe:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    8602:	8b 45 e4             	mov    -0x1c(%di),%ax
    8605:	8b 50 14             	mov    0x14(%bx,%si),%dx
    8608:	8b 45 e4             	mov    -0x1c(%di),%ax
    860b:	8b 40 10             	mov    0x10(%bx,%si),%ax
    860e:	29 c2                	sub    %ax,%dx
    8610:	8b 45 ec             	mov    -0x14(%di),%ax
    8613:	39 c2                	cmp    %ax,%dx
    8615:	77 db                	ja     85f2 <reload_elf_file+0xd7>
    8617:	eb 01                	jmp    861a <reload_elf_file+0xff>
            continue;
    8619:	90                   	nop
    for (int i = 0; i < elf_hdr->e_phnum; i ++) {
    861a:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    861e:	8b 45 e8             	mov    -0x18(%di),%ax
    8621:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    8625:	0f b7 c0             	movzww %ax,%ax
    8628:	39 45 fc             	cmp    %ax,-0x4(%di)
    862b:	0f 8c 3b ff          	jl     856a <reload_elf_file+0x4f>
    862f:	ff                   	(bad)  
    8630:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
        }
    }

    return elf_hdr->e_entry;
    8634:	8b 40 18             	mov    0x18(%bx,%si),%ax

}
    8637:	c9                   	leave  
    8638:	c3                   	ret    

00008639 <die>:

static void die(int code) {
    8639:	f3 0f 1e fb          	endbr32 
    863d:	55                   	push   %bp
    863e:	89 e5                	mov    %sp,%bp
    for (;;) {}
    8640:	eb fe                	jmp    8640 <die+0x7>

00008642 <enable_page_mode>:
#define PDE_W       (1 << 1)
#define PDE_PS      (1 << 7)
#define CR4_PSE     (1 << 4)
#define CR0_PG      (1 << 31)
// 开启分页机制
void enable_page_mode(void) {
    8642:	f3 0f 1e fb          	endbr32 
    8646:	55                   	push   %bp
    8647:	89 e5                	mov    %sp,%bp
    8649:	83 ec 10             	sub    $0x10,%sp
    static uint32_t page_dir[1024] __attribute__((aligned(4096))) = {    // 以4KB方式对齐
        [0] = PDE_P | PDE_W | PDE_PS | 0
    };

    uint32_t cr4 = read_cr4();
    864c:	e8 79 fd             	call   83c8 <write_cr3+0xa>
    864f:	ff                   	(bad)  
    8650:	ff 89 45 fc          	decw   -0x3bb(%bx,%di)
    write_cr4(cr4 | CR4_PSE);
    8654:	8b 45 fc             	mov    -0x4(%di),%ax
    8657:	83 c8 10             	or     $0x10,%ax
    865a:	50                   	push   %ax
    865b:	e8 7b fd             	call   83d9 <read_cr4+0xf>
    865e:	ff                   	(bad)  
    865f:	ff 83 c4 04          	incw   0x4c4(%bp,%di)

    write_cr3((uint32_t)page_dir);
    8663:	b8 00 c0             	mov    $0xc000,%ax
    8666:	00 00                	add    %al,(%bx,%si)
    8668:	50                   	push   %ax
    8669:	e8 50 fd             	call   83bc <write_cr0+0xa>
    866c:	ff                   	(bad)  
    866d:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    write_cr0(read_cr0() | CR0_PG);
    8671:	e8 2b fd             	call   839f <outb+0x1f>
    8674:	ff                   	(bad)  
    8675:	ff 0d                	decw   (%di)
    8677:	00 00                	add    %al,(%bx,%si)
    8679:	00 80 50 e8          	add    %al,-0x17b0(%bx,%si)
    867d:	31 fd                	xor    %di,%bp
    867f:	ff                   	(bad)  
    8680:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
}
    8684:	90                   	nop
    8685:	c9                   	leave  
    8686:	c3                   	ret    

00008687 <load_kernel>:

void load_kernel (void) {
    8687:	f3 0f 1e fb          	endbr32 
    868b:	55                   	push   %bp
    868c:	89 e5                	mov    %sp,%bp
    868e:	83 ec 18             	sub    $0x18,%sp
    read_disk(100, 500, (uint8_t *)SYS_KERNEL_LOAD_ADDR);
    8691:	68 00 00             	push   $0x0
    8694:	10 00                	adc    %al,(%bx,%si)
    8696:	68 f4 01             	push   $0x1f4
    8699:	00 00                	add    %al,(%bx,%si)
    869b:	6a 64                	push   $0x64
    869d:	e8 45 fd             	call   83e5 <write_cr4+0xa>
    86a0:	ff                   	(bad)  
    86a1:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)

    uint32_t kernel_entry = reload_elf_file((uint8_t *)SYS_KERNEL_LOAD_ADDR);
    86a5:	68 00 00             	push   $0x0
    86a8:	10 00                	adc    %al,(%bx,%si)
    86aa:	e8 6c fe             	call   8519 <read_disk+0x132>
    86ad:	ff                   	(bad)  
    86ae:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    86b2:	89 45 f4             	mov    %ax,-0xc(%di)
    if (kernel_entry == 0) {
    86b5:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    86b9:	75 0a                	jne    86c5 <load_kernel+0x3e>
        die(-1);
    86bb:	6a ff                	push   $0xffff
    86bd:	e8 77 ff             	call   8637 <reload_elf_file+0x11c>
    86c0:	ff                   	(bad)  
    86c1:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    }

    // 打开分页机制
    enable_page_mode();
    86c5:	e8 78 ff             	call   8640 <die+0x7>
    86c8:	ff                   	(bad)  
    86c9:	ff 8b 45 f4          	decw   -0xbbb(%bp,%di)

    // 将参数传递到init/start.S的_start处
    ((void (*)(boot_info_t *))kernel_entry)(&boot_info);
    86cd:	83 ec 0c             	sub    $0xc,%sp
    86d0:	68 00 d0             	push   $0xd000
    86d3:	00 00                	add    %al,(%bx,%si)
    86d5:	ff d0                	call   *%ax
    86d7:	83 c4 10             	add    $0x10,%sp

    86da:	90                   	nop
    86db:	c9                   	leave  
    86dc:	c3                   	ret    
