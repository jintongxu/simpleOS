
/home/rafael/Documents/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
/home/rafael/Documents/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003818 memsz 0x00003818 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006de0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001ade0 align 2**12
         filesz 0x0000009b memsz 0x0000009b flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f9f  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000878  00012fa0  00012fa0  00003fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005de0  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   0000009b  80000000  0001ade0  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00002a10  00000000  00000000  0000609b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00004b96  00000000  00000000  00008aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000156b  00000000  00000000  0000d641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000200  00000000  00000000  0000ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    0000137d  00000000  00000000  0000edb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0001012d  2**0
                  CONTENTS, READONLY
 11 .debug_frame  0000136c  00000000  00000000  00010158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012fa0 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102db l     F .text	0000000d down2
000102e8 l     F .text	00000017 up2
000102ff l     F .text	0000000c write_cr3
0001030b l     F .text	00000014 pde_index
0001031f l     F .text	00000010 pte_index
0001032f l     F .text	00000010 pde_paddr
0001033f l     F .text	00000010 pte_paddr
0001034f l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010360 l     F .text	0000005c addr_alloc_init
000103bc l     F .text	0000006b addr_alloc_page
00010427 l     F .text	00000066 addr_free_page
0001048d l     F .text	0000006a show_mem_info
000130cc l     O .rodata	00000012 __func__.1967
00014000 l     O .data	00000040 kernel_map.1978
000106fb l     F .text	0000003b total_mem_size
000130e0 l     O .rodata	0000000c __func__.2015
000109ae l     F .text	00000014 curr_page_dir
000130ec l     O .rodata	00000011 __func__.2047
00000000 l    df *ABS*	00000000 syscall.c
00013100 l     O .rodata	00000004 sys_table
00000000 l    df *ABS*	00000000 task.c
00010adb l     F .text	0000001b list_node_init
00010af6 l     F .text	0000000b list_node_next
00010b01 l     F .text	0000000b list_count
00010b0c l     F .text	0000000a list_first
00010b16 l     F .text	0000000c write_cr3
00010b22 l     F .text	00000007 hlt
00010b29 l     F .text	00000017 write_tr
00010b40 l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00001000 idle_task_stack
00018000 l     O .bss	00000198 task_manager
00010b51 l     F .text	000001bb tss_init
000131d4 l     O .rodata	0000000a __func__.2028
000131e0 l     O .rodata	00000010 __func__.2047
00010f18 l     F .text	0000000e idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
0001130a l     F .text	00000028 lgdt
00011332 l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
0001159d l     F .text	0000001d inb
000115ba l     F .text	00000021 outb
000115db l     F .text	00000007 cli
000115e2 l     F .text	00000007 sti
000115e9 l     F .text	00000011 read_cr2
000115fa l     F .text	00000028 lidt
00011622 l     F .text	00000007 hlt
00011629 l     F .text	00000010 read_eflags
00011639 l     F .text	0000000b write_eflags
000189c0 l     O .bss	00000400 idt_table
00011644 l     F .text	000000fc dump_core_regs
00011740 l     F .text	0000003e do_default_handler
00011b67 l     F .text	00000097 init_pic
00000000 l    df *ABS*	00000000 time.c
00011f86 l     F .text	00000021 outb
00018dc0 l     O .bss	00000004 sys_tick
00011fd3 l     F .text	00000064 init_pit
00000000 l    df *ABS*	00000000 init.c
00018dc4 l     O .bss	00000004 init_boot_info
000137b8 l     O .rodata	00000013 __func__.1983
00000000 l    df *ABS*	00000000 mutex.c
0001214c l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
000122df l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00012696 l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1707
00000000 l    df *ABS*	00000000 list.c
00012bd2 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012dde l     F .text	0000001d inb
00012dfb l     F .text	00000021 outb
00018dc8 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	00000047 sys_call
80000057 l     F .first_task	0000002e msleep
000124a4 g     F .text	00000042 bitmap_get_bit
00012819 g     F .text	00000053 kernel_memcpy
00011088 g     F .text	0000000e task_current
00011f17 g     F .text	0000000f irq_enable_global
00012c71 g     F .text	00000067 list_insert_last
000118de g     F .text	00000020 do_handler_segment_not_present
00010fda g     F .text	00000038 task_set_ready
000125c0 g     F .text	0000001f bitmap_is_set
0001286c g     F .text	00000045 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010a5f g     F .text	0000007c do_handler_syscall
00011563 g     F .text	00000022 cpu_init
00012e1c g     F .text	000000a1 log_init
000120ef g     F .text	0000005d init_main
0001020f g       .text	00000000 exception_handler_alignment_check
0001149a g     F .text	0000003d gdt_free_sel
0001269d g     F .text	0000004b kernel_strcpy
00014000 g       .data	00000000 s_data
00011dee g     F .text	0000008f irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
0001181e g     F .text	00000020 do_handler_overflow
00011ae7 g     F .text	00000020 do_handler_alignment_check
000105ab g     F .text	00000088 memory_create_map
000101b6 g       .text	00000000 exception_handler_general_protection
0001191e g     F .text	000000b9 do_handler_general_protection
00012406 g     F .text	0000002d sem_count
80000085 g     F .first_task	00000016 first_task_main
0001179e g     F .text	00000020 do_handler_divider
000124e6 g     F .text	000000da bitmap_set_bit
0001189e g     F .text	00000020 do_handler_double_fault
000119d7 g     F .text	000000f0 do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00011f26 g     F .text	0000002f pic_send_eoi
00010f0a g     F .text	0000000e task_first_task
00010000 g       .text	00000000 s_text
00010736 g     F .text	00000089 memory_create_uvm
00012311 g     F .text	0000006f sem_wait
00010964 g     F .text	00000026 memory_alloc_page_for
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00011b47 g     F .text	00000020 do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
00010289 g       .text	00000000 exception_handler_time
00018de0 g     O .bss	00002000 stack
000112af g     F .text	0000005b sys_sleep
000109c2 g     F .text	0000009d memory_free_page
0001ade0 g       *ABS*	00000000 s_first_task
000108a7 g     F .text	000000bd memory_alloc_for_page_dir
000100e5 g       .text	00000000 exception_handler_bound_range
00012380 g     F .text	00000086 sem_notify
0001185e g     F .text	00000020 do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00011ac7 g     F .text	00000020 do_handler_fpu_error
00010e44 g     F .text	000000c6 task_first_init
00011b07 g     F .text	00000020 do_handler_machine_check
000117be g     F .text	00000020 do_handler_Debug
00012c0e g     F .text	00000063 list_insert_first
0001128b g     F .text	00000024 task_set_wakeup
000117de g     F .text	00000020 do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
000126e8 g     F .text	00000074 kernel_strncpy
00011f08 g     F .text	0000000f irq_disable_global
00011096 g     F .text	00000065 sys_sched_yield
0001ae7b g       *ABS*	00000000 mem_free_start
00012053 g     F .text	00000034 kernel_init
000122ea g     F .text	00000027 sem_init
00010000 g       .text	00000000 _start
00012a1e g     F .text	0000017a kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001ade0 g       .bss	00000000 e_data
00012189 g     F .text	00000095 mutex_lock
0001022c g       .text	00000000 exception_handler_machine_check
000118be g     F .text	00000020 do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001ae7b g       *ABS*	00000000 e_first_task
0001124d g     F .text	0000003e task_set_sleep
00011db0 g     F .text	0000003e irq_install
000114d7 g     F .text	0000008c init_gdt
00011f55 g     F .text	0000001c irq_enter_protection
00012157 g     F .text	00000032 mutex_init
00011e7d g     F .text	0000008b irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
00012433 g     F .text	0000001a bitmap_byte_count
0001187e g     F .text	00000020 do_handler_device_unavailable
000110fb g     F .text	0000005f task_dispatch
00012087 g     F .text	00000068 move_to_first_task
00011585 g     F .text	00000018 switch_to_tss
00011041 g     F .text	00000047 task_next_run
000128b1 g     F .text	00000068 kernel_memcmp
00010633 g     F .text	000000c8 create_kernel_table
00012be5 g     F .text	00000029 list_init
00011b27 g     F .text	00000020 do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
00011012 g     F .text	0000002f task_set_block
0001177e g     F .text	00000020 do_handler_unknown
0001098a g     F .text	00000024 memory_alloc_page
000101f0 g       .text	00000000 exception_handler_fpu_error
00010e22 g     F .text	00000022 task_switch_from_to
00011bfe g     F .text	000001b2 irq_init
0001221e g     F .text	000000c1 mutex_unlock
00011f71 g     F .text	00000015 irq_leave_protection
000127da g     F .text	0000003f kernel_strlen
0001134c g     F .text	0000008a segment_desc_set
0001183e g     F .text	00000020 do_handler_bound_range
000102bd g       .text	00000000 exception_handler_syscall
00012cd8 g     F .text	0000007d list_remove_first
00013818 g       .rodata	00000000 e_text
0001275c g     F .text	0000007e kernel_strncmp
0001244d g     F .text	00000057 bitmap_init
0001017c g       .text	00000000 exception_handler_segment_not_present
00010088 g       .text	00000000 exception_handler_NMI
000125df g     F .text	000000b7 bitmap_alloc_nbits
00010f26 g     F .text	000000b4 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
0001115a g     F .text	000000f3 task_time_tick
000107bf g     F .text	000000e8 memory_init
00012b98 g     F .text	0000003a pannic
000118fe g     F .text	00000020 do_handler_stack_segment_fault
000117fe g     F .text	00000020 do_handler_breakpoint
00012ebd g     F .text	000000e2 log_printf
00010d0c g     F .text	00000116 task_init
000129f6 g     F .text	00000028 kernel_sprintf
00011421 g     F .text	00000079 gdt_alloc_desc
00012919 g     F .text	000000dd kernel_itoa
00012d55 g     F .text	00000089 list_remove
000113d6 g     F .text	0000004b gate_desc_set
000104f7 g     F .text	000000b4 find_pte
00011fa7 g     F .text	0000002c do_handler_time
00012037 g     F .text	0000001c time_init



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .global _start
    .extern init_main
    # void start (boot_info_t * boot_info)
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
    
    # mov 4(%ebp), %eax

    # kernel_init(boot_info)
    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 47 20 00 00       	call   12053 <kernel_init>

    // 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
    # 指定的选择子，会被加载到CS寄存器中
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc e0 ad 01 00       	mov    $0x1ade0,%esp
    jmp init_main
   10026:	e9 c4 20 00 00       	jmp    120ef <init_main>

0001002b <exception_handler_unknown>:
    add $(2*4), %esp

    iret
.endm

exception_handler unknown, -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 42 17 00 00       	call   1177e <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divider>:
exception_handler divider, 0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 43 17 00 00       	call   1179e <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 44 17 00 00       	call   117be <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 45 17 00 00       	call   117de <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 46 17 00 00       	call   117fe <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 47 17 00 00       	call   1181e <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 48 17 00 00       	call   1183e <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 49 17 00 00       	call   1185e <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 4a 17 00 00       	call   1187e <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 4d 17 00 00       	call   1189e <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 50 17 00 00       	call   118be <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 53 17 00 00       	call   118de <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha  
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 56 17 00 00       	call   118fe <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 59 17 00 00       	call   1191e <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa   
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret   

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 f5 17 00 00       	call   119d7 <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa   
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret   

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha  
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 c6 18 00 00       	call   11ac7 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa   
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret   

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha  
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 c9 18 00 00       	call   11ae7 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa   
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret   

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha  
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 ca 18 00 00       	call   11b07 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa   
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret   

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha  
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 cb 18 00 00       	call   11b27 <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa   
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret   

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha  
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 cc 18 00 00       	call   11b47 <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa   
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret   

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 0d 1d 00 00       	call   11fa7 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <simple_switch>:

    // simple_switch(&from, to)
    .text
    .global simple_switch
simple_switch:
    movl 4(%esp), %eax
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    movl 8(%esp), %edx
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102b0:	55                   	push   %ebp
    push %ebx
   102b1:	53                   	push   %ebx
    push %esi
   102b2:	56                   	push   %esi
    push %edi
   102b3:	57                   	push   %edi
    mov %esp, (%eax)
   102b4:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b6:	89 d4                	mov    %edx,%esp
    pop %edi
   102b8:	5f                   	pop    %edi
    pop %esi
   102b9:	5e                   	pop    %esi
    pop %ebx
   102ba:	5b                   	pop    %ebx
    pop %ebp
   102bb:	5d                   	pop    %ebp


    ret
   102bc:	c3                   	ret    

000102bd <exception_handler_syscall>:

    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
    pusha
   102bd:	60                   	pusha  
    push %ds
   102be:	1e                   	push   %ds
    push %es
   102bf:	06                   	push   %es
    push %fs
   102c0:	0f a0                	push   %fs
    push %gs
   102c2:	0f a8                	push   %gs
    pushf
   102c4:	9c                   	pushf  

    mov %esp, %eax
   102c5:	89 e0                	mov    %esp,%eax
    push %eax
   102c7:	50                   	push   %eax
    call do_handler_syscall
   102c8:	e8 92 07 00 00       	call   10a5f <do_handler_syscall>
    add $4, %esp
   102cd:	83 c4 04             	add    $0x4,%esp


    popf
   102d0:	9d                   	popf   
    pop %gs
   102d1:	0f a9                	pop    %gs
    pop %fs
   102d3:	0f a1                	pop    %fs
    pop %es
   102d5:	07                   	pop    %es
    pop %ds
   102d6:	1f                   	pop    %ds
    popa
   102d7:	61                   	popa   



    retf $(5*4)
   102d8:	ca 14 00             	lret   $0x14

000102db <down2>:

// size = 0x1010  bound=0x1000 
// bound = 0x0FFF
// ~(bound - 1) = 0xFFFF1000
// 0x1010 & 0xFFFF1000 = 0x1000
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102db:	55                   	push   %ebp
   102dc:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102de:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e1:	f7 d8                	neg    %eax
   102e3:	23 45 08             	and    0x8(%ebp),%eax
}
   102e6:	5d                   	pop    %ebp
   102e7:	c3                   	ret    

000102e8 <up2>:

static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102e8:	55                   	push   %ebp
   102e9:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102eb:	8b 55 08             	mov    0x8(%ebp),%edx
   102ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f1:	01 d0                	add    %edx,%eax
   102f3:	8d 50 ff             	lea    -0x1(%eax),%edx
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	f7 d8                	neg    %eax
   102fb:	21 d0                	and    %edx,%eax
}
   102fd:	5d                   	pop    %ebp
   102fe:	c3                   	ret    

000102ff <write_cr3>:

    __asm__ __volatile__("mov %%cr3, %[v]":[v]"=r"(cr3));
    return cr3;
}

static inline void write_cr3 (uint32_t v) {
   102ff:	55                   	push   %ebp
   10300:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10302:	8b 45 08             	mov    0x8(%ebp),%eax
   10305:	0f 22 d8             	mov    %eax,%cr3
}
   10308:	90                   	nop
   10309:	5d                   	pop    %ebp
   1030a:	c3                   	ret    

0001030b <pde_index>:
        uint32_t phy_page_addr : 20;
    };
}pte_t;


static inline uint32_t pde_index (uint32_t vaddr) {
   1030b:	55                   	push   %ebp
   1030c:	89 e5                	mov    %esp,%ebp
   1030e:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22);
   10311:	8b 45 08             	mov    0x8(%ebp),%eax
   10314:	c1 e8 16             	shr    $0x16,%eax
   10317:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1031a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1031d:	c9                   	leave  
   1031e:	c3                   	ret    

0001031f <pte_index>:

static inline uint32_t pte_index (uint32_t vaddr) {
   1031f:	55                   	push   %ebp
   10320:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;
   10322:	8b 45 08             	mov    0x8(%ebp),%eax
   10325:	c1 e8 0c             	shr    $0xc,%eax
   10328:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1032d:	5d                   	pop    %ebp
   1032e:	c3                   	ret    

0001032f <pde_paddr>:

static inline uint32_t pde_paddr (pde_t * pde) {
   1032f:	55                   	push   %ebp
   10330:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	8b 00                	mov    (%eax),%eax
   10337:	c1 e8 0c             	shr    $0xc,%eax
   1033a:	c1 e0 0c             	shl    $0xc,%eax
}
   1033d:	5d                   	pop    %ebp
   1033e:	c3                   	ret    

0001033f <pte_paddr>:


static inline uint32_t pte_paddr (pte_t * pte) {
   1033f:	55                   	push   %ebp
   10340:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   10342:	8b 45 08             	mov    0x8(%ebp),%eax
   10345:	8b 00                	mov    (%eax),%eax
   10347:	c1 e8 0c             	shr    $0xc,%eax
   1034a:	c1 e0 0c             	shl    $0xc,%eax
}
   1034d:	5d                   	pop    %ebp
   1034e:	c3                   	ret    

0001034f <mmu_set_page_dir>:


static inline void mmu_set_page_dir(uint32_t paddr) {
   1034f:	55                   	push   %ebp
   10350:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10352:	ff 75 08             	pushl  0x8(%ebp)
   10355:	e8 a5 ff ff ff       	call   102ff <write_cr3>
   1035a:	83 c4 04             	add    $0x4,%esp
}
   1035d:	90                   	nop
   1035e:	c9                   	leave  
   1035f:	c3                   	ret    

00010360 <addr_alloc_init>:
static addr_alloc_t paddr_alloc;

static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE)));

static void addr_alloc_init (addr_alloc_t * alloc, uint8_t * bits,
    uint32_t start, uint32_t size, uint32_t page_size) {
   10360:	f3 0f 1e fb          	endbr32 
   10364:	55                   	push   %ebp
   10365:	89 e5                	mov    %esp,%ebp
   10367:	83 ec 08             	sub    $0x8,%esp
        mutex_init(&alloc->mutex);
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	83 ec 0c             	sub    $0xc,%esp
   10370:	50                   	push   %eax
   10371:	e8 e1 1d 00 00       	call   12157 <mutex_init>
   10376:	83 c4 10             	add    $0x10,%esp
        alloc->start = start;
   10379:	8b 45 08             	mov    0x8(%ebp),%eax
   1037c:	8b 55 10             	mov    0x10(%ebp),%edx
   1037f:	89 50 20             	mov    %edx,0x20(%eax)
        alloc->size = size;
   10382:	8b 45 08             	mov    0x8(%ebp),%eax
   10385:	8b 55 14             	mov    0x14(%ebp),%edx
   10388:	89 50 24             	mov    %edx,0x24(%eax)
        alloc->page_size = page_size;
   1038b:	8b 45 08             	mov    0x8(%ebp),%eax
   1038e:	8b 55 18             	mov    0x18(%ebp),%edx
   10391:	89 50 1c             	mov    %edx,0x1c(%eax)
        bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 40 24             	mov    0x24(%eax),%eax
   1039a:	ba 00 00 00 00       	mov    $0x0,%edx
   1039f:	f7 75 18             	divl   0x18(%ebp)
   103a2:	89 c2                	mov    %eax,%edx
   103a4:	8b 45 08             	mov    0x8(%ebp),%eax
   103a7:	83 c0 14             	add    $0x14,%eax
   103aa:	6a 00                	push   $0x0
   103ac:	52                   	push   %edx
   103ad:	ff 75 0c             	pushl  0xc(%ebp)
   103b0:	50                   	push   %eax
   103b1:	e8 97 20 00 00       	call   1244d <bitmap_init>
   103b6:	83 c4 10             	add    $0x10,%esp
}
   103b9:	90                   	nop
   103ba:	c9                   	leave  
   103bb:	c3                   	ret    

000103bc <addr_alloc_page>:

// 分配内存
static uint32_t addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   103bc:	f3 0f 1e fb          	endbr32 
   103c0:	55                   	push   %ebp
   103c1:	89 e5                	mov    %esp,%ebp
   103c3:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   103c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   103cd:	8b 45 08             	mov    0x8(%ebp),%eax
   103d0:	83 ec 0c             	sub    $0xc,%esp
   103d3:	50                   	push   %eax
   103d4:	e8 b0 1d 00 00       	call   12189 <mutex_lock>
   103d9:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103dc:	8b 45 08             	mov    0x8(%ebp),%eax
   103df:	83 c0 14             	add    $0x14,%eax
   103e2:	83 ec 04             	sub    $0x4,%esp
   103e5:	ff 75 0c             	pushl  0xc(%ebp)
   103e8:	6a 00                	push   $0x0
   103ea:	50                   	push   %eax
   103eb:	e8 ef 21 00 00       	call   125df <bitmap_alloc_nbits>
   103f0:	83 c4 10             	add    $0x10,%esp
   103f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   103f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103fa:	78 17                	js     10413 <addr_alloc_page+0x57>
        addr = alloc->start + page_index * alloc->page_size;
   103fc:	8b 45 08             	mov    0x8(%ebp),%eax
   103ff:	8b 50 20             	mov    0x20(%eax),%edx
   10402:	8b 45 08             	mov    0x8(%ebp),%eax
   10405:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10408:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1040b:	0f af c1             	imul   %ecx,%eax
   1040e:	01 d0                	add    %edx,%eax
   10410:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   10413:	8b 45 08             	mov    0x8(%ebp),%eax
   10416:	83 ec 0c             	sub    $0xc,%esp
   10419:	50                   	push   %eax
   1041a:	e8 ff 1d 00 00       	call   1221e <mutex_unlock>
   1041f:	83 c4 10             	add    $0x10,%esp
    return addr;
   10422:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10425:	c9                   	leave  
   10426:	c3                   	ret    

00010427 <addr_free_page>:


// 释放内存
static void addr_free_page (addr_alloc_t * alloc, uint32_t addr, int page_count) {
   10427:	f3 0f 1e fb          	endbr32 
   1042b:	55                   	push   %ebp
   1042c:	89 e5                	mov    %esp,%ebp
   1042e:	53                   	push   %ebx
   1042f:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   10432:	8b 45 08             	mov    0x8(%ebp),%eax
   10435:	83 ec 0c             	sub    $0xc,%esp
   10438:	50                   	push   %eax
   10439:	e8 4b 1d 00 00       	call   12189 <mutex_lock>
   1043e:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_indx = (addr - alloc->start) / alloc->page_size;
   10441:	8b 45 08             	mov    0x8(%ebp),%eax
   10444:	8b 40 20             	mov    0x20(%eax),%eax
   10447:	8b 55 0c             	mov    0xc(%ebp),%edx
   1044a:	89 d1                	mov    %edx,%ecx
   1044c:	29 c1                	sub    %eax,%ecx
   1044e:	8b 45 08             	mov    0x8(%ebp),%eax
   10451:	8b 58 1c             	mov    0x1c(%eax),%ebx
   10454:	89 c8                	mov    %ecx,%eax
   10456:	ba 00 00 00 00       	mov    $0x0,%edx
   1045b:	f7 f3                	div    %ebx
   1045d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_indx, page_count, 0);
   10460:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10463:	8b 55 08             	mov    0x8(%ebp),%edx
   10466:	83 c2 14             	add    $0x14,%edx
   10469:	6a 00                	push   $0x0
   1046b:	ff 75 10             	pushl  0x10(%ebp)
   1046e:	50                   	push   %eax
   1046f:	52                   	push   %edx
   10470:	e8 71 20 00 00       	call   124e6 <bitmap_set_bit>
   10475:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   10478:	8b 45 08             	mov    0x8(%ebp),%eax
   1047b:	83 ec 0c             	sub    $0xc,%esp
   1047e:	50                   	push   %eax
   1047f:	e8 9a 1d 00 00       	call   1221e <mutex_unlock>
   10484:	83 c4 10             	add    $0x10,%esp
}
   10487:	90                   	nop
   10488:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1048b:	c9                   	leave  
   1048c:	c3                   	ret    

0001048d <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   1048d:	f3 0f 1e fb          	endbr32 
   10491:	55                   	push   %ebp
   10492:	89 e5                	mov    %esp,%ebp
   10494:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10497:	83 ec 0c             	sub    $0xc,%esp
   1049a:	68 a0 2f 01 00       	push   $0x12fa0
   1049f:	e8 19 2a 00 00       	call   12ebd <log_printf>
   104a4:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i ++ ) {
   104a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104ae:	eb 29                	jmp    104d9 <show_mem_info+0x4c>
        log_printf("[%d]: 0x%x - 0x%x", i,
   104b0:	8b 45 08             	mov    0x8(%ebp),%eax
   104b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104b6:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104ba:	8b 45 08             	mov    0x8(%ebp),%eax
   104bd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104c0:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104c3:	52                   	push   %edx
   104c4:	50                   	push   %eax
   104c5:	ff 75 f4             	pushl  -0xc(%ebp)
   104c8:	68 ac 2f 01 00       	push   $0x12fac
   104cd:	e8 eb 29 00 00       	call   12ebd <log_printf>
   104d2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i ++ ) {
   104d5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104d9:	8b 45 08             	mov    0x8(%ebp),%eax
   104dc:	8b 40 50             	mov    0x50(%eax),%eax
   104df:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104e2:	7c cc                	jl     104b0 <show_mem_info+0x23>
        boot_info->ram_region_cfg[i].start,
        boot_info->ram_region_cfg[i].size);
    }

    log_printf("\n");
   104e4:	83 ec 0c             	sub    $0xc,%esp
   104e7:	68 be 2f 01 00       	push   $0x12fbe
   104ec:	e8 cc 29 00 00       	call   12ebd <log_printf>
   104f1:	83 c4 10             	add    $0x10,%esp

}
   104f4:	90                   	nop
   104f5:	c9                   	leave  
   104f6:	c3                   	ret    

000104f7 <find_pte>:

pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   104f7:	f3 0f 1e fb          	endbr32 
   104fb:	55                   	push   %ebp
   104fc:	89 e5                	mov    %esp,%ebp
   104fe:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;
    pde_t * pde = page_dir + pde_index(vaddr);
   10501:	ff 75 0c             	pushl  0xc(%ebp)
   10504:	e8 02 fe ff ff       	call   1030b <pde_index>
   10509:	83 c4 04             	add    $0x4,%esp
   1050c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10513:	8b 45 08             	mov    0x8(%ebp),%eax
   10516:	01 d0                	add    %edx,%eax
   10518:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (pde->present) {
   1051b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1051e:	0f b6 00             	movzbl (%eax),%eax
   10521:	83 e0 01             	and    $0x1,%eax
   10524:	84 c0                	test   %al,%al
   10526:	74 10                	je     10538 <find_pte+0x41>
        page_table = (pte_t *)pde_paddr(pde);
   10528:	ff 75 f0             	pushl  -0x10(%ebp)
   1052b:	e8 ff fd ff ff       	call   1032f <pde_paddr>
   10530:	83 c4 04             	add    $0x4,%esp
   10533:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10536:	eb 57                	jmp    1058f <find_pte+0x98>
    } else {
        if (alloc == 0) {
   10538:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1053c:	75 07                	jne    10545 <find_pte+0x4e>
            return (pte_t *)0;
   1053e:	b8 00 00 00 00       	mov    $0x0,%eax
   10543:	eb 64                	jmp    105a9 <find_pte+0xb2>
        }
        
        // 如果没找到分配一个新的空间页
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10545:	83 ec 08             	sub    $0x8,%esp
   10548:	6a 01                	push   $0x1
   1054a:	68 00 50 01 00       	push   $0x15000
   1054f:	e8 68 fe ff ff       	call   103bc <addr_alloc_page>
   10554:	83 c4 10             	add    $0x10,%esp
   10557:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1055a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1055e:	75 07                	jne    10567 <find_pte+0x70>
            // 如果分配失败
            return (pte_t *)0;
   10560:	b8 00 00 00 00       	mov    $0x0,%eax
   10565:	eb 42                	jmp    105a9 <find_pte+0xb2>
        }

        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U;
   10567:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1056a:	83 c8 07             	or     $0x7,%eax
   1056d:	89 c2                	mov    %eax,%edx
   1056f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10572:	89 10                	mov    %edx,(%eax)

        page_table = (pte_t *)(pg_paddr);
   10574:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10577:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);        // 将表项初始化为0
   1057a:	83 ec 04             	sub    $0x4,%esp
   1057d:	68 00 10 00 00       	push   $0x1000
   10582:	6a 00                	push   $0x0
   10584:	ff 75 f4             	pushl  -0xc(%ebp)
   10587:	e8 e0 22 00 00       	call   1286c <kernel_memset>
   1058c:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   1058f:	83 ec 0c             	sub    $0xc,%esp
   10592:	ff 75 0c             	pushl  0xc(%ebp)
   10595:	e8 85 fd ff ff       	call   1031f <pte_index>
   1059a:	83 c4 10             	add    $0x10,%esp
   1059d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105a7:	01 d0                	add    %edx,%eax
}
   105a9:	c9                   	leave  
   105aa:	c3                   	ret    

000105ab <memory_create_map>:

int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   105ab:	f3 0f 1e fb          	endbr32 
   105af:	55                   	push   %ebp
   105b0:	89 e5                	mov    %esp,%ebp
   105b2:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++ ) {
   105b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105bc:	eb 6b                	jmp    10629 <memory_create_map+0x7e>
        // log_printf("create map: v-0x%x, p-0x%x, perm:0x%x", vaddr, paddr, perm);
        pte_t * pte = find_pte(page_dir, vaddr, 1);
   105be:	83 ec 04             	sub    $0x4,%esp
   105c1:	6a 01                	push   $0x1
   105c3:	ff 75 0c             	pushl  0xc(%ebp)
   105c6:	ff 75 08             	pushl  0x8(%ebp)
   105c9:	e8 29 ff ff ff       	call   104f7 <find_pte>
   105ce:	83 c4 10             	add    $0x10,%esp
   105d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   105d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105d8:	75 07                	jne    105e1 <memory_create_map+0x36>
            // log_printf("create pte failed.pte==0");
            return -1;
   105da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   105df:	eb 50                	jmp    10631 <memory_create_map+0x86>
        }


        // log_printf("pte addr:0x%x", (uint32_t)pte);

        ASSERT(pte->present == 0);
   105e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105e4:	0f b6 00             	movzbl (%eax),%eax
   105e7:	83 e0 01             	and    $0x1,%eax
   105ea:	84 c0                	test   %al,%al
   105ec:	74 19                	je     10607 <memory_create_map+0x5c>
   105ee:	68 c0 2f 01 00       	push   $0x12fc0
   105f3:	68 cc 30 01 00       	push   $0x130cc
   105f8:	6a 61                	push   $0x61
   105fa:	68 d4 2f 01 00       	push   $0x12fd4
   105ff:	e8 94 25 00 00       	call   12b98 <pannic>
   10604:	83 c4 10             	add    $0x10,%esp
        pte->v = paddr | perm | PTE_P;
   10607:	8b 45 10             	mov    0x10(%ebp),%eax
   1060a:	0b 45 18             	or     0x18(%ebp),%eax
   1060d:	83 c8 01             	or     $0x1,%eax
   10610:	89 c2                	mov    %eax,%edx
   10612:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10615:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   10617:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   1061e:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++ ) {
   10625:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10629:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1062c:	3b 45 14             	cmp    0x14(%ebp),%eax
   1062f:	7c 8d                	jl     105be <memory_create_map+0x13>

    }
}
   10631:	c9                   	leave  
   10632:	c3                   	ret    

00010633 <create_kernel_table>:

void create_kernel_table(void) {
   10633:	f3 0f 1e fb          	endbr32 
   10637:	55                   	push   %ebp
   10638:	89 e5                	mov    %esp,%ebp
   1063a:	83 ec 28             	sub    $0x28,%esp
        {s_data, (void *)(MEM_EBDA_START - 1), s_data, PTE_W},
        {(void *)(MEM_EXT_START), (void *)MEM_EXT_END, (void *)MEM_EXT_START, PTE_W},
    };

    // 清空页目录表
    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   1063d:	83 ec 04             	sub    $0x4,%esp
   10640:	68 00 10 00 00       	push   $0x1000
   10645:	6a 00                	push   $0x0
   10647:	68 00 60 01 00       	push   $0x16000
   1064c:	e8 1b 22 00 00       	call   1286c <kernel_memset>
   10651:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++ ) {
   10654:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1065b:	e9 8b 00 00 00       	jmp    106eb <create_kernel_table+0xb8>
        memory_map_t * map = kernel_map + i;
   10660:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10663:	c1 e0 04             	shl    $0x4,%eax
   10666:	05 00 40 01 00       	add    $0x14000,%eax
   1066b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1066e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10671:	8b 00                	mov    (%eax),%eax
   10673:	83 ec 08             	sub    $0x8,%esp
   10676:	68 00 10 00 00       	push   $0x1000
   1067b:	50                   	push   %eax
   1067c:	e8 5a fc ff ff       	call   102db <down2>
   10681:	83 c4 10             	add    $0x10,%esp
   10684:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10687:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1068a:	8b 40 04             	mov    0x4(%eax),%eax
   1068d:	83 ec 08             	sub    $0x8,%esp
   10690:	68 00 10 00 00       	push   $0x1000
   10695:	50                   	push   %eax
   10696:	e8 4d fc ff ff       	call   102e8 <up2>
   1069b:	83 c4 10             	add    $0x10,%esp
   1069e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   106a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a4:	8b 40 08             	mov    0x8(%eax),%eax
   106a7:	83 ec 08             	sub    $0x8,%esp
   106aa:	68 00 10 00 00       	push   $0x1000
   106af:	50                   	push   %eax
   106b0:	e8 26 fc ff ff       	call   102db <down2>
   106b5:	83 c4 10             	add    $0x10,%esp
   106b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   106be:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106c1:	c1 e8 0c             	shr    $0xc,%eax
   106c4:	89 45 e0             	mov    %eax,-0x20(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)paddr, page_count, map->perm);
   106c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106ca:	8b 40 0c             	mov    0xc(%eax),%eax
   106cd:	83 ec 0c             	sub    $0xc,%esp
   106d0:	50                   	push   %eax
   106d1:	ff 75 e0             	pushl  -0x20(%ebp)
   106d4:	ff 75 e4             	pushl  -0x1c(%ebp)
   106d7:	ff 75 ec             	pushl  -0x14(%ebp)
   106da:	68 00 60 01 00       	push   $0x16000
   106df:	e8 c7 fe ff ff       	call   105ab <memory_create_map>
   106e4:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++ ) {
   106e7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106ee:	83 f8 03             	cmp    $0x3,%eax
   106f1:	0f 86 69 ff ff ff    	jbe    10660 <create_kernel_table+0x2d>

    }
}
   106f7:	90                   	nop
   106f8:	90                   	nop
   106f9:	c9                   	leave  
   106fa:	c3                   	ret    

000106fb <total_mem_size>:


static uint32_t total_mem_size (boot_info_t * boot_info) {
   106fb:	f3 0f 1e fb          	endbr32 
   106ff:	55                   	push   %ebp
   10700:	89 e5                	mov    %esp,%ebp
   10702:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10705:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1070c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10713:	eb 11                	jmp    10726 <total_mem_size+0x2b>
        mem_size += boot_info->ram_region_cfg[i].size;
   10715:	8b 45 08             	mov    0x8(%ebp),%eax
   10718:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1071b:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1071f:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10722:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10726:	8b 45 08             	mov    0x8(%ebp),%eax
   10729:	8b 40 50             	mov    0x50(%eax),%eax
   1072c:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1072f:	7c e4                	jl     10715 <total_mem_size+0x1a>
    }
    return mem_size;
   10731:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10734:	c9                   	leave  
   10735:	c3                   	ret    

00010736 <memory_create_uvm>:

uint32_t memory_create_uvm (void) {
   10736:	f3 0f 1e fb          	endbr32 
   1073a:	55                   	push   %ebp
   1073b:	89 e5                	mov    %esp,%ebp
   1073d:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10740:	83 ec 08             	sub    $0x8,%esp
   10743:	6a 01                	push   $0x1
   10745:	68 00 50 01 00       	push   $0x15000
   1074a:	e8 6d fc ff ff       	call   103bc <addr_alloc_page>
   1074f:	83 c4 10             	add    $0x10,%esp
   10752:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   10755:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10759:	75 07                	jne    10762 <memory_create_uvm+0x2c>
        return 0;
   1075b:	b8 00 00 00 00       	mov    $0x0,%eax
   10760:	eb 5b                	jmp    107bd <memory_create_uvm+0x87>
    }

    // 操作系统和进程共享内存
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);      // 对第一级表进行清空
   10762:	83 ec 04             	sub    $0x4,%esp
   10765:	68 00 10 00 00       	push   $0x1000
   1076a:	6a 00                	push   $0x0
   1076c:	ff 75 f0             	pushl  -0x10(%ebp)
   1076f:	e8 f8 20 00 00       	call   1286c <kernel_memset>
   10774:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10777:	83 ec 0c             	sub    $0xc,%esp
   1077a:	68 00 00 00 80       	push   $0x80000000
   1077f:	e8 87 fb ff ff       	call   1030b <pde_index>
   10784:	83 c4 10             	add    $0x10,%esp
   10787:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   1078a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10791:	eb 1f                	jmp    107b2 <memory_create_uvm+0x7c>
        page_dir[i].v = kernel_page_dir[i].v;
   10793:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10796:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1079d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107a0:	01 c2                	add    %eax,%edx
   107a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107a5:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   107ac:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   107ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107b5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   107b8:	77 d9                	ja     10793 <memory_create_uvm+0x5d>
    }

    return (uint32_t)page_dir;
   107ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   107bd:	c9                   	leave  
   107be:	c3                   	ret    

000107bf <memory_init>:


void memory_init (boot_info_t * boot_info) {
   107bf:	f3 0f 1e fb          	endbr32 
   107c3:	55                   	push   %ebp
   107c4:	89 e5                	mov    %esp,%ebp
   107c6:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t * mem_free_start;

    log_printf("mem init");
   107c9:	83 ec 0c             	sub    $0xc,%esp
   107cc:	68 1d 30 01 00       	push   $0x1301d
   107d1:	e8 e7 26 00 00       	call   12ebd <log_printf>
   107d6:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   107d9:	83 ec 0c             	sub    $0xc,%esp
   107dc:	ff 75 08             	pushl  0x8(%ebp)
   107df:	e8 a9 fc ff ff       	call   1048d <show_mem_info>
   107e4:	83 c4 10             	add    $0x10,%esp

    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   107e7:	c7 45 f4 7b ae 01 00 	movl   $0x1ae7b,-0xc(%ebp)

    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   107ee:	83 ec 0c             	sub    $0xc,%esp
   107f1:	ff 75 08             	pushl  0x8(%ebp)
   107f4:	e8 02 ff ff ff       	call   106fb <total_mem_size>
   107f9:	83 c4 10             	add    $0x10,%esp
   107fc:	2d 00 00 10 00       	sub    $0x100000,%eax
   10801:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 将 mem_up1MB_free 转换成 MEM_PAGE_SIZE 的整数倍 （即将整个内存分成相同MEM_PAGE_SIZE大小的页）
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10804:	83 ec 08             	sub    $0x8,%esp
   10807:	68 00 10 00 00       	push   $0x1000
   1080c:	ff 75 f0             	pushl  -0x10(%ebp)
   1080f:	e8 c7 fa ff ff       	call   102db <down2>
   10814:	83 c4 10             	add    $0x10,%esp
   10817:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   1081a:	83 ec 04             	sub    $0x4,%esp
   1081d:	ff 75 f0             	pushl  -0x10(%ebp)
   10820:	68 00 00 10 00       	push   $0x100000
   10825:	68 26 30 01 00       	push   $0x13026
   1082a:	e8 8e 26 00 00       	call   12ebd <log_printf>
   1082f:	83 c4 10             	add    $0x10,%esp

    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10832:	83 ec 0c             	sub    $0xc,%esp
   10835:	68 00 10 00 00       	push   $0x1000
   1083a:	ff 75 f0             	pushl  -0x10(%ebp)
   1083d:	68 00 00 10 00       	push   $0x100000
   10842:	ff 75 f4             	pushl  -0xc(%ebp)
   10845:	68 00 50 01 00       	push   $0x15000
   1084a:	e8 11 fb ff ff       	call   10360 <addr_alloc_init>
   1084f:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10852:	a1 24 50 01 00       	mov    0x15024,%eax
   10857:	c1 e8 0c             	shr    $0xc,%eax
   1085a:	83 ec 0c             	sub    $0xc,%esp
   1085d:	50                   	push   %eax
   1085e:	e8 d0 1b 00 00       	call   12433 <bitmap_byte_count>
   10863:	83 c4 10             	add    $0x10,%esp
   10866:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10869:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10870:	76 1c                	jbe    1088e <memory_init+0xcf>
   10872:	68 44 30 01 00       	push   $0x13044
   10877:	68 e0 30 01 00       	push   $0x130e0
   1087c:	68 b1 00 00 00       	push   $0xb1
   10881:	68 d4 2f 01 00       	push   $0x12fd4
   10886:	e8 0d 23 00 00       	call   12b98 <pannic>
   1088b:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   1088e:	e8 a0 fd ff ff       	call   10633 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10893:	b8 00 60 01 00       	mov    $0x16000,%eax
   10898:	83 ec 0c             	sub    $0xc,%esp
   1089b:	50                   	push   %eax
   1089c:	e8 ae fa ff ff       	call   1034f <mmu_set_page_dir>
   108a1:	83 c4 10             	add    $0x10,%esp
}
   108a4:	90                   	nop
   108a5:	c9                   	leave  
   108a6:	c3                   	ret    

000108a7 <memory_alloc_for_page_dir>:

int memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   108a7:	f3 0f 1e fb          	endbr32 
   108ab:	55                   	push   %ebp
   108ac:	89 e5                	mov    %esp,%ebp
   108ae:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;    // 记录当前分到哪个地址了
   108b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   108b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;  // 计算有多少页
   108b7:	68 00 10 00 00       	push   $0x1000
   108bc:	ff 75 10             	pushl  0x10(%ebp)
   108bf:	e8 24 fa ff ff       	call   102e8 <up2>
   108c4:	83 c4 08             	add    $0x8,%esp
   108c7:	c1 e8 0c             	shr    $0xc,%eax
   108ca:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i ++ ) {
   108cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   108d4:	eb 7b                	jmp    10951 <memory_alloc_for_page_dir+0xaa>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   108d6:	83 ec 08             	sub    $0x8,%esp
   108d9:	6a 01                	push   $0x1
   108db:	68 00 50 01 00       	push   $0x15000
   108e0:	e8 d7 fa ff ff       	call   103bc <addr_alloc_page>
   108e5:	83 c4 10             	add    $0x10,%esp
   108e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   108eb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   108ef:	75 17                	jne    10908 <memory_alloc_for_page_dir+0x61>
            log_printf("mem alloc failed. no memory");
   108f1:	83 ec 0c             	sub    $0xc,%esp
   108f4:	68 69 30 01 00       	push   $0x13069
   108f9:	e8 bf 25 00 00       	call   12ebd <log_printf>
   108fe:	83 c4 10             	add    $0x10,%esp
            return 0;
   10901:	b8 00 00 00 00       	mov    $0x0,%eax
   10906:	eb 5a                	jmp    10962 <memory_alloc_for_page_dir+0xbb>
        }

        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10908:	8b 55 14             	mov    0x14(%ebp),%edx
   1090b:	8b 45 08             	mov    0x8(%ebp),%eax
   1090e:	83 ec 0c             	sub    $0xc,%esp
   10911:	52                   	push   %edx
   10912:	6a 01                	push   $0x1
   10914:	ff 75 e8             	pushl  -0x18(%ebp)
   10917:	ff 75 f4             	pushl  -0xc(%ebp)
   1091a:	50                   	push   %eax
   1091b:	e8 8b fc ff ff       	call   105ab <memory_create_map>
   10920:	83 c4 20             	add    $0x20,%esp
   10923:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   10926:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1092a:	79 1a                	jns    10946 <memory_alloc_for_page_dir+0x9f>
            log_printf("create memory failed. err = %d", err);
   1092c:	83 ec 08             	sub    $0x8,%esp
   1092f:	ff 75 e4             	pushl  -0x1c(%ebp)
   10932:	68 88 30 01 00       	push   $0x13088
   10937:	e8 81 25 00 00       	call   12ebd <log_printf>
   1093c:	83 c4 10             	add    $0x10,%esp
            return 0;
   1093f:	b8 00 00 00 00       	mov    $0x0,%eax
   10944:	eb 1c                	jmp    10962 <memory_alloc_for_page_dir+0xbb>
        }


        curr_vaddr += MEM_PAGE_SIZE;
   10946:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i ++ ) {
   1094d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10951:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10954:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10957:	0f 8c 79 ff ff ff    	jl     108d6 <memory_alloc_for_page_dir+0x2f>

    }

    return 0;
   1095d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10962:	c9                   	leave  
   10963:	c3                   	ret    

00010964 <memory_alloc_page_for>:

// 给进程分配地址页     
int memory_alloc_page_for (uint32_t addr, uint32_t size, int perm) {
   10964:	f3 0f 1e fb          	endbr32 
   10968:	55                   	push   %ebp
   10969:	89 e5                	mov    %esp,%ebp
   1096b:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   1096e:	e8 15 07 00 00       	call   11088 <task_current>
   10973:	8b 40 64             	mov    0x64(%eax),%eax
   10976:	ff 75 10             	pushl  0x10(%ebp)
   10979:	ff 75 0c             	pushl  0xc(%ebp)
   1097c:	ff 75 08             	pushl  0x8(%ebp)
   1097f:	50                   	push   %eax
   10980:	e8 22 ff ff ff       	call   108a7 <memory_alloc_for_page_dir>
   10985:	83 c4 10             	add    $0x10,%esp
}
   10988:	c9                   	leave  
   10989:	c3                   	ret    

0001098a <memory_alloc_page>:

// 分配一页物理内存
uint32_t memory_alloc_page (void) {
   1098a:	f3 0f 1e fb          	endbr32 
   1098e:	55                   	push   %ebp
   1098f:	89 e5                	mov    %esp,%ebp
   10991:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10994:	83 ec 08             	sub    $0x8,%esp
   10997:	6a 01                	push   $0x1
   10999:	68 00 50 01 00       	push   $0x15000
   1099e:	e8 19 fa ff ff       	call   103bc <addr_alloc_page>
   109a3:	83 c4 10             	add    $0x10,%esp
   109a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;    // 这返回了个物理内存
   109a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   109ac:	c9                   	leave  
   109ad:	c3                   	ret    

000109ae <curr_page_dir>:

static pde_t * curr_page_dir (void) {
   109ae:	f3 0f 1e fb          	endbr32 
   109b2:	55                   	push   %ebp
   109b3:	89 e5                	mov    %esp,%ebp
   109b5:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)(task_current()->tss.cr3);
   109b8:	e8 cb 06 00 00       	call   11088 <task_current>
   109bd:	8b 40 64             	mov    0x64(%eax),%eax
}
   109c0:	c9                   	leave  
   109c1:	c3                   	ret    

000109c2 <memory_free_page>:

// 释放地址
void memory_free_page (uint32_t addr) {
   109c2:	f3 0f 1e fb          	endbr32 
   109c6:	55                   	push   %ebp
   109c7:	89 e5                	mov    %esp,%ebp
   109c9:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE) {
   109cc:	8b 45 08             	mov    0x8(%ebp),%eax
   109cf:	85 c0                	test   %eax,%eax
   109d1:	78 17                	js     109ea <memory_free_page+0x28>
        // 如果每超过80000000，因为没有虚拟，所以直接删除就行了。
        addr_free_page(&paddr_alloc, addr, 1);
   109d3:	83 ec 04             	sub    $0x4,%esp
   109d6:	6a 01                	push   $0x1
   109d8:	ff 75 08             	pushl  0x8(%ebp)
   109db:	68 00 50 01 00       	push   $0x15000
   109e0:	e8 42 fa ff ff       	call   10427 <addr_free_page>
   109e5:	83 c4 10             	add    $0x10,%esp
        ASSERT((pte == (pte_t *)0) && pte->present);

        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
        pte->v = 0;
    }
   109e8:	eb 72                	jmp    10a5c <memory_free_page+0x9a>
        pte_t * pte = find_pte(curr_page_dir(), addr, 0);
   109ea:	e8 bf ff ff ff       	call   109ae <curr_page_dir>
   109ef:	83 ec 04             	sub    $0x4,%esp
   109f2:	6a 00                	push   $0x0
   109f4:	ff 75 08             	pushl  0x8(%ebp)
   109f7:	50                   	push   %eax
   109f8:	e8 fa fa ff ff       	call   104f7 <find_pte>
   109fd:	83 c4 10             	add    $0x10,%esp
   10a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10a03:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10a07:	75 0d                	jne    10a16 <memory_free_page+0x54>
   10a09:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a0c:	0f b6 00             	movzbl (%eax),%eax
   10a0f:	83 e0 01             	and    $0x1,%eax
   10a12:	84 c0                	test   %al,%al
   10a14:	75 1c                	jne    10a32 <memory_free_page+0x70>
   10a16:	68 a8 30 01 00       	push   $0x130a8
   10a1b:	68 ec 30 01 00       	push   $0x130ec
   10a20:	68 e7 00 00 00       	push   $0xe7
   10a25:	68 d4 2f 01 00       	push   $0x12fd4
   10a2a:	e8 69 21 00 00       	call   12b98 <pannic>
   10a2f:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10a32:	83 ec 0c             	sub    $0xc,%esp
   10a35:	ff 75 f4             	pushl  -0xc(%ebp)
   10a38:	e8 02 f9 ff ff       	call   1033f <pte_paddr>
   10a3d:	83 c4 10             	add    $0x10,%esp
   10a40:	83 ec 04             	sub    $0x4,%esp
   10a43:	6a 01                	push   $0x1
   10a45:	50                   	push   %eax
   10a46:	68 00 50 01 00       	push   $0x15000
   10a4b:	e8 d7 f9 ff ff       	call   10427 <addr_free_page>
   10a50:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10a53:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a56:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   10a5c:	90                   	nop
   10a5d:	c9                   	leave  
   10a5e:	c3                   	ret    

00010a5f <do_handler_syscall>:

static const syscall_handler_t sys_table[] = {
	[SYS_sleep] = (syscall_handler_t)sys_sleep,
};

void do_handler_syscall (syscall_frame_t * frame) {
   10a5f:	f3 0f 1e fb          	endbr32 
   10a63:	55                   	push   %ebp
   10a64:	89 e5                	mov    %esp,%ebp
   10a66:	53                   	push   %ebx
   10a67:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   10a6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6d:	8b 40 3c             	mov    0x3c(%eax),%eax
   10a70:	85 c0                	test   %eax,%eax
   10a72:	75 3c                	jne    10ab0 <do_handler_syscall+0x51>
        syscall_handler_t handler = sys_table[frame->func_id];
   10a74:	c7 45 f4 af 12 01 00 	movl   $0x112af,-0xc(%ebp)
        if (handler) {
   10a7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10a7f:	74 2f                	je     10ab0 <do_handler_syscall+0x51>
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10a81:	8b 45 08             	mov    0x8(%ebp),%eax
   10a84:	8b 40 4c             	mov    0x4c(%eax),%eax
   10a87:	89 c3                	mov    %eax,%ebx
   10a89:	8b 45 08             	mov    0x8(%ebp),%eax
   10a8c:	8b 40 48             	mov    0x48(%eax),%eax
   10a8f:	89 c1                	mov    %eax,%ecx
   10a91:	8b 45 08             	mov    0x8(%ebp),%eax
   10a94:	8b 40 44             	mov    0x44(%eax),%eax
   10a97:	89 c2                	mov    %eax,%edx
   10a99:	8b 45 08             	mov    0x8(%ebp),%eax
   10a9c:	8b 40 40             	mov    0x40(%eax),%eax
   10a9f:	53                   	push   %ebx
   10aa0:	51                   	push   %ecx
   10aa1:	52                   	push   %edx
   10aa2:	50                   	push   %eax
   10aa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10aa6:	ff d0                	call   *%eax
   10aa8:	83 c4 10             	add    $0x10,%esp
   10aab:	89 45 f0             	mov    %eax,-0x10(%ebp)
            return;
   10aae:	eb 26                	jmp    10ad6 <do_handler_syscall+0x77>
        }
    }


    task_t * task = task_current();
   10ab0:	e8 d3 05 00 00       	call   11088 <task_current>
   10ab5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall: %d", task->name, frame->func_id);
   10ab8:	8b 45 08             	mov    0x8(%ebp),%eax
   10abb:	8b 40 3c             	mov    0x3c(%eax),%eax
   10abe:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10ac1:	83 c2 10             	add    $0x10,%edx
   10ac4:	83 ec 04             	sub    $0x4,%esp
   10ac7:	50                   	push   %eax
   10ac8:	52                   	push   %edx
   10ac9:	68 04 31 01 00       	push   $0x13104
   10ace:	e8 ea 23 00 00       	call   12ebd <log_printf>
   10ad3:	83 c4 10             	add    $0x10,%esp
   10ad6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10ad9:	c9                   	leave  
   10ada:	c3                   	ret    

00010adb <list_node_init>:
    struct _list_node_t * pre;
    struct _list_node_t * next;
}list_node_t;


static inline void list_node_init (list_node_t * node) {
   10adb:	55                   	push   %ebp
   10adc:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10ade:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10ae8:	8b 45 08             	mov    0x8(%ebp),%eax
   10aeb:	8b 50 04             	mov    0x4(%eax),%edx
   10aee:	8b 45 08             	mov    0x8(%ebp),%eax
   10af1:	89 10                	mov    %edx,(%eax)
}
   10af3:	90                   	nop
   10af4:	5d                   	pop    %ebp
   10af5:	c3                   	ret    

00010af6 <list_node_next>:
static inline list_node_t * list_node_pre (list_node_t * node) {
    return node->pre;
}


static inline list_node_t * list_node_next (list_node_t * node) {
   10af6:	55                   	push   %ebp
   10af7:	89 e5                	mov    %esp,%ebp
    return node->next;
   10af9:	8b 45 08             	mov    0x8(%ebp),%eax
   10afc:	8b 40 04             	mov    0x4(%eax),%eax
}
   10aff:	5d                   	pop    %ebp
   10b00:	c3                   	ret    

00010b01 <list_count>:

static inline int list_is_empty (list_t * list) {
    return list->count == 0;
}

static inline int list_count (list_t * list) {
   10b01:	55                   	push   %ebp
   10b02:	89 e5                	mov    %esp,%ebp
    return list->count;
   10b04:	8b 45 08             	mov    0x8(%ebp),%eax
   10b07:	8b 40 08             	mov    0x8(%eax),%eax
}
   10b0a:	5d                   	pop    %ebp
   10b0b:	c3                   	ret    

00010b0c <list_first>:

static inline list_node_t * list_first (list_t * list) {
   10b0c:	55                   	push   %ebp
   10b0d:	89 e5                	mov    %esp,%ebp
    return list->first;
   10b0f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b12:	8b 00                	mov    (%eax),%eax
}
   10b14:	5d                   	pop    %ebp
   10b15:	c3                   	ret    

00010b16 <write_cr3>:
static inline void write_cr3 (uint32_t v) {
   10b16:	55                   	push   %ebp
   10b17:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10b19:	8b 45 08             	mov    0x8(%ebp),%eax
   10b1c:	0f 22 d8             	mov    %eax,%cr3
}
   10b1f:	90                   	nop
   10b20:	5d                   	pop    %ebp
   10b21:	c3                   	ret    

00010b22 <hlt>:
    uint32_t addr[] = {offset, selector};

    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}

static inline void hlt (void) {
   10b22:	55                   	push   %ebp
   10b23:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10b25:	f4                   	hlt    
}
   10b26:	90                   	nop
   10b27:	5d                   	pop    %ebp
   10b28:	c3                   	ret    

00010b29 <write_tr>:


static inline void write_tr(uint16_t tss_sel) {
   10b29:	55                   	push   %ebp
   10b2a:	89 e5                	mov    %esp,%ebp
   10b2c:	83 ec 04             	sub    $0x4,%esp
   10b2f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b32:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10b36:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10b3a:	0f 00 d8             	ltr    %ax
}
   10b3d:	90                   	nop
   10b3e:	c9                   	leave  
   10b3f:	c3                   	ret    

00010b40 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10b40:	55                   	push   %ebp
   10b41:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10b43:	ff 75 08             	pushl  0x8(%ebp)
   10b46:	e8 cb ff ff ff       	call   10b16 <write_cr3>
   10b4b:	83 c4 04             	add    $0x4,%esp
}
   10b4e:	90                   	nop
   10b4f:	c9                   	leave  
   10b50:	c3                   	ret    

00010b51 <tss_init>:
#include "core/memory.h"

static uint32_t idle_task_stack[IDLE_TASK_SIZE];
static task_manager_t task_manager;

static int tss_init (task_t * task, int flag ,uint32_t entry, uint32_t esp) {
   10b51:	f3 0f 1e fb          	endbr32 
   10b55:	55                   	push   %ebp
   10b56:	89 e5                	mov    %esp,%ebp
   10b58:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   10b5b:	e8 c1 08 00 00       	call   11421 <gdt_alloc_desc>
   10b60:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   10b63:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10b67:	79 1a                	jns    10b83 <tss_init+0x32>
        log_printf("alloc tss failed.\n");
   10b69:	83 ec 0c             	sub    $0xc,%esp
   10b6c:	68 24 31 01 00       	push   $0x13124
   10b71:	e8 47 23 00 00       	call   12ebd <log_printf>
   10b76:	83 c4 10             	add    $0x10,%esp
        return -1;
   10b79:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b7e:	e9 87 01 00 00       	jmp    10d0a <tss_init+0x1b9>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   10b83:	8b 45 08             	mov    0x8(%ebp),%eax
   10b86:	83 c0 48             	add    $0x48,%eax
   10b89:	68 89 00 00 00       	push   $0x89
   10b8e:	6a 68                	push   $0x68
   10b90:	50                   	push   %eax
   10b91:	ff 75 ec             	pushl  -0x14(%ebp)
   10b94:	e8 b3 07 00 00       	call   1134c <segment_desc_set>
   10b99:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS
    );
    
    

    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b9f:	83 c0 48             	add    $0x48,%eax
   10ba2:	83 ec 04             	sub    $0x4,%esp
   10ba5:	6a 68                	push   $0x68
   10ba7:	6a 00                	push   $0x0
   10ba9:	50                   	push   %eax
   10baa:	e8 bd 1c 00 00       	call   1286c <kernel_memset>
   10baf:	83 c4 10             	add    $0x10,%esp

    uint32_t kernel_stack = memory_alloc_page();   // 分配一页内存    用于中断、系统异常、系统调用
   10bb2:	e8 d3 fd ff ff       	call   1098a <memory_alloc_page>
   10bb7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   10bba:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10bbe:	0f 84 1b 01 00 00    	je     10cdf <tss_init+0x18e>
        goto tss_init_failed;
    }

    int code_sel, data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   10bc4:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bc7:	83 e0 01             	and    $0x1,%eax
   10bca:	85 c0                	test   %eax,%eax
   10bcc:	74 10                	je     10bde <tss_init+0x8d>
        code_sel = KERNEL_SELECTOR_CS;
   10bce:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   10bd5:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10bdc:	eb 16                	jmp    10bf4 <tss_init+0xa3>
    } else {
        code_sel = task_manager.app_code_sel | SEG_CPL3;
   10bde:	a1 90 81 01 00       	mov    0x18190,%eax
   10be3:	83 c8 03             	or     $0x3,%eax
   10be6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_CPL3;
   10be9:	a1 94 81 01 00       	mov    0x18194,%eax
   10bee:	83 c8 03             	or     $0x3,%eax
   10bf1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    
    task->tss.eip = entry;
   10bf4:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf7:	8b 55 10             	mov    0x10(%ebp),%edx
   10bfa:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE;
   10bfd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10c01:	75 0a                	jne    10c0d <tss_init+0xbc>
   10c03:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10c06:	05 00 10 00 00       	add    $0x1000,%eax
   10c0b:	eb 03                	jmp    10c10 <tss_init+0xbf>
   10c0d:	8b 45 14             	mov    0x14(%ebp),%eax
   10c10:	8b 55 08             	mov    0x8(%ebp),%edx
   10c13:	89 82 80 00 00 00    	mov    %eax,0x80(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   10c19:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10c1c:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10c22:	8b 45 08             	mov    0x8(%ebp),%eax
   10c25:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.ss = data_sel;
   10c28:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10c2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c2e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10c34:	8b 45 08             	mov    0x8(%ebp),%eax
   10c37:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
    task->tss.es = task->tss.ds = task->tss.ss = task->tss.fs = task->tss.gs = data_sel;
   10c3e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10c41:	8b 45 08             	mov    0x8(%ebp),%eax
   10c44:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10c4a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c4d:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10c53:	8b 45 08             	mov    0x8(%ebp),%eax
   10c56:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10c5c:	8b 45 08             	mov    0x8(%ebp),%eax
   10c5f:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10c65:	8b 45 08             	mov    0x8(%ebp),%eax
   10c68:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   10c6e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c71:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   10c77:	8b 45 08             	mov    0x8(%ebp),%eax
   10c7a:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10c80:	8b 45 08             	mov    0x8(%ebp),%eax
   10c83:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10c89:	8b 45 08             	mov    0x8(%ebp),%eax
   10c8c:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs = code_sel;
   10c92:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10c95:	8b 45 08             	mov    0x8(%ebp),%eax
   10c98:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.eflags = EFLGAGS_IF | EFLGAGS_DEFAULT;
   10c9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10ca1:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)
    task->tss.iomap = 0;
   10ca8:	8b 45 08             	mov    0x8(%ebp),%eax
   10cab:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
   10cb2:	00 00 00 
    
    uint32_t page_dir = memory_create_uvm();
   10cb5:	e8 7c fa ff ff       	call   10736 <memory_create_uvm>
   10cba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) {
   10cbd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10cc1:	74 1f                	je     10ce2 <tss_init+0x191>
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   10cc3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10cc9:	89 50 64             	mov    %edx,0x64(%eax)
    
    task->tss_sel = tss_sel;
   10ccc:	8b 45 08             	mov    0x8(%ebp),%eax
   10ccf:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10cd2:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10cd8:	b8 00 00 00 00       	mov    $0x0,%eax
   10cdd:	eb 2b                	jmp    10d0a <tss_init+0x1b9>
        goto tss_init_failed;
   10cdf:	90                   	nop
   10ce0:	eb 01                	jmp    10ce3 <tss_init+0x192>
        goto tss_init_failed;
   10ce2:	90                   	nop
tss_init_failed:
    // 如果创建页表失败
    gdt_free_sel(tss_sel);
   10ce3:	83 ec 0c             	sub    $0xc,%esp
   10ce6:	ff 75 ec             	pushl  -0x14(%ebp)
   10ce9:	e8 ac 07 00 00       	call   1149a <gdt_free_sel>
   10cee:	83 c4 10             	add    $0x10,%esp
    if (kernel_stack) {
   10cf1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10cf5:	74 0e                	je     10d05 <tss_init+0x1b4>
        memory_free_page(kernel_stack);
   10cf7:	83 ec 0c             	sub    $0xc,%esp
   10cfa:	ff 75 e8             	pushl  -0x18(%ebp)
   10cfd:	e8 c0 fc ff ff       	call   109c2 <memory_free_page>
   10d02:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10d05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10d0a:	c9                   	leave  
   10d0b:	c3                   	ret    

00010d0c <task_init>:

int task_init (task_t * task, const char * name, int flag ,uint32_t entry, uint32_t esp) {
   10d0c:	f3 0f 1e fb          	endbr32 
   10d10:	55                   	push   %ebp
   10d11:	89 e5                	mov    %esp,%ebp
   10d13:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   10d16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d1a:	75 19                	jne    10d35 <task_init+0x29>
   10d1c:	68 37 31 01 00       	push   $0x13137
   10d21:	68 d4 31 01 00       	push   $0x131d4
   10d26:	6a 47                	push   $0x47
   10d28:	68 4c 31 01 00       	push   $0x1314c
   10d2d:	e8 66 1e 00 00       	call   12b98 <pannic>
   10d32:	83 c4 10             	add    $0x10,%esp

    int err = tss_init(task, flag, entry, esp);
   10d35:	ff 75 18             	pushl  0x18(%ebp)
   10d38:	ff 75 14             	pushl  0x14(%ebp)
   10d3b:	ff 75 10             	pushl  0x10(%ebp)
   10d3e:	ff 75 08             	pushl  0x8(%ebp)
   10d41:	e8 0b fe ff ff       	call   10b51 <tss_init>
   10d46:	83 c4 10             	add    $0x10,%esp
   10d49:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   10d4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10d50:	79 18                	jns    10d6a <task_init+0x5e>
        log_printf("init task failed.\n");
   10d52:	83 ec 0c             	sub    $0xc,%esp
   10d55:	68 93 31 01 00       	push   $0x13193
   10d5a:	e8 5e 21 00 00       	call   12ebd <log_printf>
   10d5f:	83 c4 10             	add    $0x10,%esp
        return err;
   10d62:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d65:	e9 b6 00 00 00       	jmp    10e20 <task_init+0x114>
    }

    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10d6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d6d:	83 c0 10             	add    $0x10,%eax
   10d70:	83 ec 04             	sub    $0x4,%esp
   10d73:	6a 20                	push   $0x20
   10d75:	ff 75 0c             	pushl  0xc(%ebp)
   10d78:	50                   	push   %eax
   10d79:	e8 6a 19 00 00       	call   126e8 <kernel_strncpy>
   10d7e:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10d81:	8b 45 08             	mov    0x8(%ebp),%eax
   10d84:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->slice_ticks = 0;
   10d8a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d8d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10d94:	8b 45 08             	mov    0x8(%ebp),%eax
   10d97:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task->slice_ticks = task->time_ticks;
   10d9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10da1:	8b 50 08             	mov    0x8(%eax),%edx
   10da4:	8b 45 08             	mov    0x8(%ebp),%eax
   10da7:	89 50 0c             	mov    %edx,0xc(%eax)
    list_node_init(&task->all_node);
   10daa:	8b 45 08             	mov    0x8(%ebp),%eax
   10dad:	83 c0 40             	add    $0x40,%eax
   10db0:	83 ec 0c             	sub    $0xc,%esp
   10db3:	50                   	push   %eax
   10db4:	e8 22 fd ff ff       	call   10adb <list_node_init>
   10db9:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10dbc:	8b 45 08             	mov    0x8(%ebp),%eax
   10dbf:	83 c0 30             	add    $0x30,%eax
   10dc2:	83 ec 0c             	sub    $0xc,%esp
   10dc5:	50                   	push   %eax
   10dc6:	e8 10 fd ff ff       	call   10adb <list_node_init>
   10dcb:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10dce:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd1:	83 c0 38             	add    $0x38,%eax
   10dd4:	83 ec 0c             	sub    $0xc,%esp
   10dd7:	50                   	push   %eax
   10dd8:	e8 fe fc ff ff       	call   10adb <list_node_init>
   10ddd:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10de0:	e8 70 11 00 00       	call   11f55 <irq_enter_protection>
   10de5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task_set_ready(task);
   10de8:	83 ec 0c             	sub    $0xc,%esp
   10deb:	ff 75 08             	pushl  0x8(%ebp)
   10dee:	e8 e7 01 00 00       	call   10fda <task_set_ready>
   10df3:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list, &task->all_node);
   10df6:	8b 45 08             	mov    0x8(%ebp),%eax
   10df9:	83 c0 40             	add    $0x40,%eax
   10dfc:	83 ec 08             	sub    $0x8,%esp
   10dff:	50                   	push   %eax
   10e00:	68 10 80 01 00       	push   $0x18010
   10e05:	e8 67 1e 00 00       	call   12c71 <list_insert_last>
   10e0a:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   10e0d:	83 ec 0c             	sub    $0xc,%esp
   10e10:	ff 75 f0             	pushl  -0x10(%ebp)
   10e13:	e8 59 11 00 00       	call   11f71 <irq_leave_protection>
   10e18:	83 c4 10             	add    $0x10,%esp
    //     task->stack = pesp;

    // }

    
    return 0;
   10e1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e20:	c9                   	leave  
   10e21:	c3                   	ret    

00010e22 <task_switch_from_to>:

void simple_switch (uint32_t **from, uint32_t * to);

// 简单的用jmp到对应的tss选择子进行任务切换
void task_switch_from_to (task_t * from, task_t * to) {
   10e22:	f3 0f 1e fb          	endbr32 
   10e26:	55                   	push   %ebp
   10e27:	89 e5                	mov    %esp,%ebp
   10e29:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   10e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e2f:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10e35:	83 ec 0c             	sub    $0xc,%esp
   10e38:	50                   	push   %eax
   10e39:	e8 47 07 00 00       	call   11585 <switch_to_tss>
   10e3e:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10e41:	90                   	nop
   10e42:	c9                   	leave  
   10e43:	c3                   	ret    

00010e44 <task_first_init>:

void task_first_init (void) {
   10e44:	f3 0f 1e fb          	endbr32 
   10e48:	55                   	push   %ebp
   10e49:	89 e5                	mov    %esp,%ebp
   10e4b:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry (void);
    extern uint8_t s_first_task[], e_first_task[];  // 拷贝代码区域起始和结束区域

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   10e4e:	b8 7b ae 01 00       	mov    $0x1ae7b,%eax
   10e53:	2d e0 ad 01 00       	sub    $0x1ade0,%eax
   10e58:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;       // 分配了十个物理页
   10e5b:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10e62:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e65:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   10e68:	72 19                	jb     10e83 <task_first_init+0x3f>
   10e6a:	68 a6 31 01 00       	push   $0x131a6
   10e6f:	68 e0 31 01 00       	push   $0x131e0
   10e74:	6a 79                	push   $0x79
   10e76:	68 4c 31 01 00       	push   $0x1314c
   10e7b:	e8 18 1d 00 00       	call   12b98 <pannic>
   10e80:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   10e83:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    task_init(&task_manager.first_task, "first task" , 0 ,first_start, first_start + alloc_size);  
   10e8a:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e90:	01 d0                	add    %edx,%eax
   10e92:	83 ec 0c             	sub    $0xc,%esp
   10e95:	50                   	push   %eax
   10e96:	ff 75 ec             	pushl  -0x14(%ebp)
   10e99:	6a 00                	push   $0x0
   10e9b:	68 bd 31 01 00       	push   $0x131bd
   10ea0:	68 28 80 01 00       	push   $0x18028
   10ea5:	e8 62 fe ff ff       	call   10d0c <task_init>
   10eaa:	83 c4 20             	add    $0x20,%esp
    // write_tr(task_manager.first_task.tss_sel);
    task_manager.curr_task = &task_manager.first_task; 
   10ead:	c7 05 00 80 01 00 28 	movl   $0x18028,0x18000
   10eb4:	80 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10eb7:	a1 8c 80 01 00       	mov    0x1808c,%eax
   10ebc:	83 ec 0c             	sub    $0xc,%esp
   10ebf:	50                   	push   %eax
   10ec0:	e8 7b fc ff ff       	call   10b40 <mmu_set_page_dir>
   10ec5:	83 c4 10             	add    $0x10,%esp


    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   10ec8:	83 ec 04             	sub    $0x4,%esp
   10ecb:	6a 07                	push   $0x7
   10ecd:	ff 75 f0             	pushl  -0x10(%ebp)
   10ed0:	ff 75 ec             	pushl  -0x14(%ebp)
   10ed3:	e8 8c fa ff ff       	call   10964 <memory_alloc_page_for>
   10ed8:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start,(void *)s_first_task, copy_size);
   10edb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10ede:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ee1:	83 ec 04             	sub    $0x4,%esp
   10ee4:	52                   	push   %edx
   10ee5:	68 e0 ad 01 00       	push   $0x1ade0
   10eea:	50                   	push   %eax
   10eeb:	e8 29 19 00 00       	call   12819 <kernel_memcpy>
   10ef0:	83 c4 10             	add    $0x10,%esp

    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   10ef3:	a1 d8 80 01 00       	mov    0x180d8,%eax
   10ef8:	0f b7 c0             	movzwl %ax,%eax
   10efb:	83 ec 0c             	sub    $0xc,%esp
   10efe:	50                   	push   %eax
   10eff:	e8 25 fc ff ff       	call   10b29 <write_tr>
   10f04:	83 c4 10             	add    $0x10,%esp
}
   10f07:	90                   	nop
   10f08:	c9                   	leave  
   10f09:	c3                   	ret    

00010f0a <task_first_task>:

task_t * task_first_task (void) {
   10f0a:	f3 0f 1e fb          	endbr32 
   10f0e:	55                   	push   %ebp
   10f0f:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10f11:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   10f16:	5d                   	pop    %ebp
   10f17:	c3                   	ret    

00010f18 <idle_task_entry>:

static void idle_task_entry (void) {
   10f18:	f3 0f 1e fb          	endbr32 
   10f1c:	55                   	push   %ebp
   10f1d:	89 e5                	mov    %esp,%ebp
    for (;;) {
        hlt();
   10f1f:	e8 fe fb ff ff       	call   10b22 <hlt>
   10f24:	eb f9                	jmp    10f1f <idle_task_entry+0x7>

00010f26 <task_manager_init>:
    }
}

void task_manager_init (void) {
   10f26:	f3 0f 1e fb          	endbr32 
   10f2a:	55                   	push   %ebp
   10f2b:	89 e5                	mov    %esp,%ebp
   10f2d:	83 ec 18             	sub    $0x18,%esp
    int sel = gdt_alloc_desc();
   10f30:	e8 ec 04 00 00       	call   11421 <gdt_alloc_desc>
   10f35:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF, 
   10f38:	68 f2 40 00 00       	push   $0x40f2
   10f3d:	6a ff                	push   $0xffffffff
   10f3f:	6a 00                	push   $0x0
   10f41:	ff 75 f4             	pushl  -0xc(%ebp)
   10f44:	e8 03 04 00 00       	call   1134c <segment_desc_set>
   10f49:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D
    );
    task_manager.app_data_sel = sel;
   10f4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f4f:	a3 94 81 01 00       	mov    %eax,0x18194

    sel = gdt_alloc_desc();
   10f54:	e8 c8 04 00 00       	call   11421 <gdt_alloc_desc>
   10f59:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF, 
   10f5c:	68 fa 40 00 00       	push   $0x40fa
   10f61:	6a ff                	push   $0xffffffff
   10f63:	6a 00                	push   $0x0
   10f65:	ff 75 f4             	pushl  -0xc(%ebp)
   10f68:	e8 df 03 00 00       	call   1134c <segment_desc_set>
   10f6d:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D
    );
    task_manager.app_code_sel = sel;
   10f70:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f73:	a3 90 81 01 00       	mov    %eax,0x18190


    list_init(&task_manager.ready_list);
   10f78:	83 ec 0c             	sub    $0xc,%esp
   10f7b:	68 04 80 01 00       	push   $0x18004
   10f80:	e8 60 1c 00 00       	call   12be5 <list_init>
   10f85:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10f88:	83 ec 0c             	sub    $0xc,%esp
   10f8b:	68 10 80 01 00       	push   $0x18010
   10f90:	e8 50 1c 00 00       	call   12be5 <list_init>
   10f95:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10f98:	83 ec 0c             	sub    $0xc,%esp
   10f9b:	68 1c 80 01 00       	push   $0x1801c
   10fa0:	e8 40 1c 00 00       	call   12be5 <list_init>
   10fa5:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   10fa8:	c7 05 00 80 01 00 00 	movl   $0x0,0x18000
   10faf:	00 00 00 

    task_init(&task_manager.idle_task, 
        "idle_task",
        TASK_FLAGS_SYSTEM,
        (uint32_t)idle_task_entry,
        (uint32_t)(idle_task_stack + IDLE_TASK_SIZE)
   10fb2:	b8 00 80 01 00       	mov    $0x18000,%eax
    task_init(&task_manager.idle_task, 
   10fb7:	89 c2                	mov    %eax,%edx
   10fb9:	b8 18 0f 01 00       	mov    $0x10f18,%eax
   10fbe:	83 ec 0c             	sub    $0xc,%esp
   10fc1:	52                   	push   %edx
   10fc2:	50                   	push   %eax
   10fc3:	6a 01                	push   $0x1
   10fc5:	68 c8 31 01 00       	push   $0x131c8
   10fca:	68 dc 80 01 00       	push   $0x180dc
   10fcf:	e8 38 fd ff ff       	call   10d0c <task_init>
   10fd4:	83 c4 20             	add    $0x20,%esp
    );
}
   10fd7:	90                   	nop
   10fd8:	c9                   	leave  
   10fd9:	c3                   	ret    

00010fda <task_set_ready>:

void task_set_ready(task_t * task) {
   10fda:	f3 0f 1e fb          	endbr32 
   10fde:	55                   	push   %ebp
   10fdf:	89 e5                	mov    %esp,%ebp
   10fe1:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10fe4:	81 7d 08 dc 80 01 00 	cmpl   $0x180dc,0x8(%ebp)
   10feb:	74 22                	je     1100f <task_set_ready+0x35>
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   10fed:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff0:	83 c0 30             	add    $0x30,%eax
   10ff3:	83 ec 08             	sub    $0x8,%esp
   10ff6:	50                   	push   %eax
   10ff7:	68 04 80 01 00       	push   $0x18004
   10ffc:	e8 70 1c 00 00       	call   12c71 <list_insert_last>
   11001:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11004:	8b 45 08             	mov    0x8(%ebp),%eax
   11007:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   1100d:	eb 01                	jmp    11010 <task_set_ready+0x36>
        return;
   1100f:	90                   	nop
}
   11010:	c9                   	leave  
   11011:	c3                   	ret    

00011012 <task_set_block>:


void task_set_block (task_t * task) {
   11012:	f3 0f 1e fb          	endbr32 
   11016:	55                   	push   %ebp
   11017:	89 e5                	mov    %esp,%ebp
   11019:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   1101c:	81 7d 08 dc 80 01 00 	cmpl   $0x180dc,0x8(%ebp)
   11023:	74 19                	je     1103e <task_set_block+0x2c>
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   11025:	8b 45 08             	mov    0x8(%ebp),%eax
   11028:	83 c0 30             	add    $0x30,%eax
   1102b:	83 ec 08             	sub    $0x8,%esp
   1102e:	50                   	push   %eax
   1102f:	68 04 80 01 00       	push   $0x18004
   11034:	e8 1c 1d 00 00       	call   12d55 <list_remove>
   11039:	83 c4 10             	add    $0x10,%esp
   1103c:	eb 01                	jmp    1103f <task_set_block+0x2d>
        return;
   1103e:	90                   	nop
}
   1103f:	c9                   	leave  
   11040:	c3                   	ret    

00011041 <task_next_run>:


// 返回下一个的进程(就绪队列头部的进程)
task_t * task_next_run (void) {
   11041:	f3 0f 1e fb          	endbr32 
   11045:	55                   	push   %ebp
   11046:	89 e5                	mov    %esp,%ebp
   11048:	83 ec 10             	sub    $0x10,%esp
    // 如果没有进程就进入空闲进程
    if (list_count(&task_manager.ready_list) == 0) {
   1104b:	68 04 80 01 00       	push   $0x18004
   11050:	e8 ac fa ff ff       	call   10b01 <list_count>
   11055:	83 c4 04             	add    $0x4,%esp
   11058:	85 c0                	test   %eax,%eax
   1105a:	75 07                	jne    11063 <task_next_run+0x22>
        return &task_manager.idle_task;
   1105c:	b8 dc 80 01 00       	mov    $0x180dc,%eax
   11061:	eb 23                	jmp    11086 <task_next_run+0x45>
    }

    list_node_t * task_node = list_first(&task_manager.ready_list);
   11063:	68 04 80 01 00       	push   $0x18004
   11068:	e8 9f fa ff ff       	call   10b0c <list_first>
   1106d:	83 c4 04             	add    $0x4,%esp
   11070:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   11073:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11077:	74 08                	je     11081 <task_next_run+0x40>
   11079:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1107c:	83 e8 30             	sub    $0x30,%eax
   1107f:	eb 05                	jmp    11086 <task_next_run+0x45>
   11081:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11086:	c9                   	leave  
   11087:	c3                   	ret    

00011088 <task_current>:


task_t * task_current (void) {
   11088:	f3 0f 1e fb          	endbr32 
   1108c:	55                   	push   %ebp
   1108d:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   1108f:	a1 00 80 01 00       	mov    0x18000,%eax
}
   11094:	5d                   	pop    %ebp
   11095:	c3                   	ret    

00011096 <sys_sched_yield>:

// 让进程让出CPU
int sys_sched_yield() {
   11096:	f3 0f 1e fb          	endbr32 
   1109a:	55                   	push   %ebp
   1109b:	89 e5                	mov    %esp,%ebp
   1109d:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   110a0:	e8 b0 0e 00 00       	call   11f55 <irq_enter_protection>
   110a5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&task_manager.ready_list) > 1) {
   110a8:	83 ec 0c             	sub    $0xc,%esp
   110ab:	68 04 80 01 00       	push   $0x18004
   110b0:	e8 4c fa ff ff       	call   10b01 <list_count>
   110b5:	83 c4 10             	add    $0x10,%esp
   110b8:	83 f8 01             	cmp    $0x1,%eax
   110bb:	7e 29                	jle    110e6 <sys_sched_yield+0x50>
        task_t * curr_task = task_current();
   110bd:	e8 c6 ff ff ff       	call   11088 <task_current>
   110c2:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task);
   110c5:	83 ec 0c             	sub    $0xc,%esp
   110c8:	ff 75 f0             	pushl  -0x10(%ebp)
   110cb:	e8 42 ff ff ff       	call   11012 <task_set_block>
   110d0:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);    // 再加入的时候，是加入队列的尾部
   110d3:	83 ec 0c             	sub    $0xc,%esp
   110d6:	ff 75 f0             	pushl  -0x10(%ebp)
   110d9:	e8 fc fe ff ff       	call   10fda <task_set_ready>
   110de:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   110e1:	e8 15 00 00 00       	call   110fb <task_dispatch>
    }

    irq_leave_protection(state);
   110e6:	83 ec 0c             	sub    $0xc,%esp
   110e9:	ff 75 f4             	pushl  -0xc(%ebp)
   110ec:	e8 80 0e 00 00       	call   11f71 <irq_leave_protection>
   110f1:	83 c4 10             	add    $0x10,%esp
    // 如果就绪队列里面就1个进程。
    return 0;
   110f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110f9:	c9                   	leave  
   110fa:	c3                   	ret    

000110fb <task_dispatch>:


void task_dispatch (void) {
   110fb:	f3 0f 1e fb          	endbr32 
   110ff:	55                   	push   %ebp
   11100:	89 e5                	mov    %esp,%ebp
   11102:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   11105:	e8 4b 0e 00 00       	call   11f55 <irq_enter_protection>
   1110a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * to = task_next_run();
   1110d:	e8 2f ff ff ff       	call   11041 <task_next_run>
   11112:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task) {
   11115:	a1 00 80 01 00       	mov    0x18000,%eax
   1111a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1111d:	74 2a                	je     11149 <task_dispatch+0x4e>
        task_t * from = task_current();
   1111f:	e8 64 ff ff ff       	call   11088 <task_current>
   11124:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   11127:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1112a:	a3 00 80 01 00       	mov    %eax,0x18000
        to->state = TASK_RUNNING;
   1112f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11132:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   11138:	83 ec 08             	sub    $0x8,%esp
   1113b:	ff 75 f0             	pushl  -0x10(%ebp)
   1113e:	ff 75 ec             	pushl  -0x14(%ebp)
   11141:	e8 dc fc ff ff       	call   10e22 <task_switch_from_to>
   11146:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);
   11149:	83 ec 0c             	sub    $0xc,%esp
   1114c:	ff 75 f4             	pushl  -0xc(%ebp)
   1114f:	e8 1d 0e 00 00       	call   11f71 <irq_leave_protection>
   11154:	83 c4 10             	add    $0x10,%esp

}
   11157:	90                   	nop
   11158:	c9                   	leave  
   11159:	c3                   	ret    

0001115a <task_time_tick>:


// 实现进程时间切片
void task_time_tick(void) {
   1115a:	f3 0f 1e fb          	endbr32 
   1115e:	55                   	push   %ebp
   1115f:	89 e5                	mov    %esp,%ebp
   11161:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   11164:	e8 1f ff ff ff       	call   11088 <task_current>
   11169:	89 45 f0             	mov    %eax,-0x10(%ebp)

    irq_state_t state = irq_enter_protection();
   1116c:	e8 e4 0d 00 00       	call   11f55 <irq_enter_protection>
   11171:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0) {
   11174:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11177:	8b 40 0c             	mov    0xc(%eax),%eax
   1117a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1117d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11180:	89 50 0c             	mov    %edx,0xc(%eax)
   11183:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11186:	8b 40 0c             	mov    0xc(%eax),%eax
   11189:	85 c0                	test   %eax,%eax
   1118b:	75 2d                	jne    111ba <task_time_tick+0x60>

        curr_task->slice_ticks = curr_task->time_ticks;
   1118d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11190:	8b 50 08             	mov    0x8(%eax),%edx
   11193:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11196:	89 50 0c             	mov    %edx,0xc(%eax)

        task_set_block(curr_task);
   11199:	83 ec 0c             	sub    $0xc,%esp
   1119c:	ff 75 f0             	pushl  -0x10(%ebp)
   1119f:	e8 6e fe ff ff       	call   11012 <task_set_block>
   111a4:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task); 
   111a7:	83 ec 0c             	sub    $0xc,%esp
   111aa:	ff 75 f0             	pushl  -0x10(%ebp)
   111ad:	e8 28 fe ff ff       	call   10fda <task_set_ready>
   111b2:	83 c4 10             	add    $0x10,%esp


        task_dispatch();
   111b5:	e8 41 ff ff ff       	call   110fb <task_dispatch>

    }


    list_node_t * curr = list_first(&task_manager.sleep_list);
   111ba:	83 ec 0c             	sub    $0xc,%esp
   111bd:	68 1c 80 01 00       	push   $0x1801c
   111c2:	e8 45 f9 ff ff       	call   10b0c <list_first>
   111c7:	83 c4 10             	add    $0x10,%esp
   111ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr) {
   111cd:	eb 62                	jmp    11231 <task_time_tick+0xd7>
        list_node_t * next = list_node_next(curr);
   111cf:	83 ec 0c             	sub    $0xc,%esp
   111d2:	ff 75 f4             	pushl  -0xc(%ebp)
   111d5:	e8 1c f9 ff ff       	call   10af6 <list_node_next>
   111da:	83 c4 10             	add    $0x10,%esp
   111dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
        
        task_t * task = list_node_parent(curr, task_t, run_node);
   111e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   111e4:	74 08                	je     111ee <task_time_tick+0x94>
   111e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111e9:	83 e8 30             	sub    $0x30,%eax
   111ec:	eb 05                	jmp    111f3 <task_time_tick+0x99>
   111ee:	b8 00 00 00 00       	mov    $0x0,%eax
   111f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0) {
   111f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   111f9:	8b 40 04             	mov    0x4(%eax),%eax
   111fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   111ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11202:	89 50 04             	mov    %edx,0x4(%eax)
   11205:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11208:	8b 40 04             	mov    0x4(%eax),%eax
   1120b:	85 c0                	test   %eax,%eax
   1120d:	75 1c                	jne    1122b <task_time_tick+0xd1>
            task_set_wakeup(task);
   1120f:	83 ec 0c             	sub    $0xc,%esp
   11212:	ff 75 e4             	pushl  -0x1c(%ebp)
   11215:	e8 71 00 00 00       	call   1128b <task_set_wakeup>
   1121a:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   1121d:	83 ec 0c             	sub    $0xc,%esp
   11220:	ff 75 e4             	pushl  -0x1c(%ebp)
   11223:	e8 b2 fd ff ff       	call   10fda <task_set_ready>
   11228:	83 c4 10             	add    $0x10,%esp
        }

        curr = next;
   1122b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1122e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr) {
   11231:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11235:	75 98                	jne    111cf <task_time_tick+0x75>

    }

    task_dispatch();
   11237:	e8 bf fe ff ff       	call   110fb <task_dispatch>
    irq_leave_protection(state);
   1123c:	83 ec 0c             	sub    $0xc,%esp
   1123f:	ff 75 ec             	pushl  -0x14(%ebp)
   11242:	e8 2a 0d 00 00       	call   11f71 <irq_leave_protection>
   11247:	83 c4 10             	add    $0x10,%esp

}
   1124a:	90                   	nop
   1124b:	c9                   	leave  
   1124c:	c3                   	ret    

0001124d <task_set_sleep>:


void task_set_sleep (task_t * task, uint32_t ticks) {
   1124d:	f3 0f 1e fb          	endbr32 
   11251:	55                   	push   %ebp
   11252:	89 e5                	mov    %esp,%ebp
   11254:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   11257:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1125b:	74 2b                	je     11288 <task_set_sleep+0x3b>
        return;
    }

    task->sleep_ticks = ticks;
   1125d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11260:	8b 45 08             	mov    0x8(%ebp),%eax
   11263:	89 50 04             	mov    %edx,0x4(%eax)
    task->state = TASK_SLEEP;
   11266:	8b 45 08             	mov    0x8(%ebp),%eax
   11269:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   1126f:	8b 45 08             	mov    0x8(%ebp),%eax
   11272:	83 c0 30             	add    $0x30,%eax
   11275:	83 ec 08             	sub    $0x8,%esp
   11278:	50                   	push   %eax
   11279:	68 1c 80 01 00       	push   $0x1801c
   1127e:	e8 ee 19 00 00       	call   12c71 <list_insert_last>
   11283:	83 c4 10             	add    $0x10,%esp
   11286:	eb 01                	jmp    11289 <task_set_sleep+0x3c>
        return;
   11288:	90                   	nop

}
   11289:	c9                   	leave  
   1128a:	c3                   	ret    

0001128b <task_set_wakeup>:

void task_set_wakeup (task_t * task) {
   1128b:	f3 0f 1e fb          	endbr32 
   1128f:	55                   	push   %ebp
   11290:	89 e5                	mov    %esp,%ebp
   11292:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   11295:	8b 45 08             	mov    0x8(%ebp),%eax
   11298:	83 c0 30             	add    $0x30,%eax
   1129b:	83 ec 08             	sub    $0x8,%esp
   1129e:	50                   	push   %eax
   1129f:	68 1c 80 01 00       	push   $0x1801c
   112a4:	e8 ac 1a 00 00       	call   12d55 <list_remove>
   112a9:	83 c4 10             	add    $0x10,%esp
}
   112ac:	90                   	nop
   112ad:	c9                   	leave  
   112ae:	c3                   	ret    

000112af <sys_sleep>:

void sys_sleep (uint32_t ms) {
   112af:	f3 0f 1e fb          	endbr32 
   112b3:	55                   	push   %ebp
   112b4:	89 e5                	mov    %esp,%ebp
   112b6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   112b9:	e8 97 0c 00 00       	call   11f55 <irq_enter_protection>
   112be:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_block(task_manager.curr_task);
   112c1:	a1 00 80 01 00       	mov    0x18000,%eax
   112c6:	83 ec 0c             	sub    $0xc,%esp
   112c9:	50                   	push   %eax
   112ca:	e8 43 fd ff ff       	call   11012 <task_set_block>
   112cf:	83 c4 10             	add    $0x10,%esp

    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1))/ OS_TICKS_MS);
   112d2:	8b 45 08             	mov    0x8(%ebp),%eax
   112d5:	83 c0 09             	add    $0x9,%eax
   112d8:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   112dd:	f7 e2                	mul    %edx
   112df:	c1 ea 03             	shr    $0x3,%edx
   112e2:	a1 00 80 01 00       	mov    0x18000,%eax
   112e7:	83 ec 08             	sub    $0x8,%esp
   112ea:	52                   	push   %edx
   112eb:	50                   	push   %eax
   112ec:	e8 5c ff ff ff       	call   1124d <task_set_sleep>
   112f1:	83 c4 10             	add    $0x10,%esp

    task_dispatch();
   112f4:	e8 02 fe ff ff       	call   110fb <task_dispatch>

    irq_leave_protection(state);
   112f9:	83 ec 0c             	sub    $0xc,%esp
   112fc:	ff 75 f4             	pushl  -0xc(%ebp)
   112ff:	e8 6d 0c 00 00       	call   11f71 <irq_leave_protection>
   11304:	83 c4 10             	add    $0x10,%esp

}
   11307:	90                   	nop
   11308:	c9                   	leave  
   11309:	c3                   	ret    

0001130a <lgdt>:
static inline void lgdt (uint32_t start, uint32_t size) {
   1130a:	55                   	push   %ebp
   1130b:	89 e5                	mov    %esp,%ebp
   1130d:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   11310:	8b 45 08             	mov    0x8(%ebp),%eax
   11313:	c1 e8 10             	shr    $0x10,%eax
   11316:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   1131a:	8b 45 08             	mov    0x8(%ebp),%eax
   1131d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   11321:	8b 45 0c             	mov    0xc(%ebp),%eax
   11324:	83 e8 01             	sub    $0x1,%eax
   11327:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1132b:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1132f:	90                   	nop
   11330:	c9                   	leave  
   11331:	c3                   	ret    

00011332 <far_jump>:
static inline void far_jump (uint32_t selector, uint32_t offset) {
   11332:	55                   	push   %ebp
   11333:	89 e5                	mov    %esp,%ebp
   11335:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   11338:	8b 45 0c             	mov    0xc(%ebp),%eax
   1133b:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1133e:	8b 45 08             	mov    0x8(%ebp),%eax
   11341:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   11344:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11347:	ff 28                	ljmp   *(%eax)
}
   11349:	90                   	nop
   1134a:	c9                   	leave  
   1134b:	c3                   	ret    

0001134c <segment_desc_set>:

static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;


void segment_desc_set (int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   1134c:	f3 0f 1e fb          	endbr32 
   11350:	55                   	push   %ebp
   11351:	89 e5                	mov    %esp,%ebp
   11353:	83 ec 14             	sub    $0x14,%esp
   11356:	8b 45 14             	mov    0x14(%ebp),%eax
   11359:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   1135d:	8b 45 08             	mov    0x8(%ebp),%eax
   11360:	c1 f8 03             	sar    $0x3,%eax
   11363:	c1 e0 03             	shl    $0x3,%eax
   11366:	05 a0 81 01 00       	add    $0x181a0,%eax
   1136b:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (limit > 0xFFFFF) {
   1136e:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11375:	76 0f                	jbe    11386 <segment_desc_set+0x3a>
        // 如果limit太大，就把G位置1
        attr |= 0x8000;
   11377:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   1137d:	8b 45 10             	mov    0x10(%ebp),%eax
   11380:	c1 e8 0c             	shr    $0xc,%eax
   11383:	89 45 10             	mov    %eax,0x10(%ebp)
    }

    desc->limit15_0 = limit & 0xFFFF;
   11386:	8b 45 10             	mov    0x10(%ebp),%eax
   11389:	89 c2                	mov    %eax,%edx
   1138b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1138e:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   11391:	8b 45 0c             	mov    0xc(%ebp),%eax
   11394:	89 c2                	mov    %eax,%edx
   11396:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11399:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   1139d:	8b 45 0c             	mov    0xc(%ebp),%eax
   113a0:	c1 e8 10             	shr    $0x10,%eax
   113a3:	89 c2                	mov    %eax,%edx
   113a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113a8:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   113ab:	8b 45 10             	mov    0x10(%ebp),%eax
   113ae:	c1 e8 10             	shr    $0x10,%eax
   113b1:	c1 e0 08             	shl    $0x8,%eax
   113b4:	66 25 00 0f          	and    $0xf00,%ax
   113b8:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   113bc:	89 c2                	mov    %eax,%edx
   113be:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113c1:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   113c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   113c8:	c1 e8 18             	shr    $0x18,%eax
   113cb:	89 c2                	mov    %eax,%edx
   113cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113d0:	88 50 07             	mov    %dl,0x7(%eax)
}
   113d3:	90                   	nop
   113d4:	c9                   	leave  
   113d5:	c3                   	ret    

000113d6 <gate_desc_set>:


void gate_desc_set (gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   113d6:	f3 0f 1e fb          	endbr32 
   113da:	55                   	push   %ebp
   113db:	89 e5                	mov    %esp,%ebp
   113dd:	83 ec 08             	sub    $0x8,%esp
   113e0:	8b 55 0c             	mov    0xc(%ebp),%edx
   113e3:	8b 45 14             	mov    0x14(%ebp),%eax
   113e6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   113ea:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   113ee:	8b 45 10             	mov    0x10(%ebp),%eax
   113f1:	89 c2                	mov    %eax,%edx
   113f3:	8b 45 08             	mov    0x8(%ebp),%eax
   113f6:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   113f9:	8b 45 08             	mov    0x8(%ebp),%eax
   113fc:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11400:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   11404:	8b 45 08             	mov    0x8(%ebp),%eax
   11407:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1140b:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   1140f:	8b 45 10             	mov    0x10(%ebp),%eax
   11412:	c1 e8 10             	shr    $0x10,%eax
   11415:	89 c2                	mov    %eax,%edx
   11417:	8b 45 08             	mov    0x8(%ebp),%eax
   1141a:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   1141e:	90                   	nop
   1141f:	c9                   	leave  
   11420:	c3                   	ret    

00011421 <gdt_alloc_desc>:

int gdt_alloc_desc() {
   11421:	f3 0f 1e fb          	endbr32 
   11425:	55                   	push   %ebp
   11426:	89 e5                	mov    %esp,%ebp
   11428:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&mutex);
   1142b:	83 ec 0c             	sub    $0xc,%esp
   1142e:	68 a0 89 01 00       	push   $0x189a0
   11433:	e8 51 0d 00 00       	call   12189 <mutex_lock>
   11438:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i ++ ) {
   1143b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11442:	eb 36                	jmp    1147a <gdt_alloc_desc+0x59>
        segment_desc_t * desc = gdt_table + i;
   11444:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11447:	c1 e0 03             	shl    $0x3,%eax
   1144a:	05 a0 81 01 00       	add    $0x181a0,%eax
   1144f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   11452:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11455:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11459:	66 85 c0             	test   %ax,%ax
   1145c:	75 18                	jne    11476 <gdt_alloc_desc+0x55>
            mutex_unlock(&mutex);
   1145e:	83 ec 0c             	sub    $0xc,%esp
   11461:	68 a0 89 01 00       	push   $0x189a0
   11466:	e8 b3 0d 00 00       	call   1221e <mutex_unlock>
   1146b:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   1146e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11471:	c1 e0 03             	shl    $0x3,%eax
   11474:	eb 22                	jmp    11498 <gdt_alloc_desc+0x77>
    for (int i = 1; i < GDT_TABLE_SIZE; i ++ ) {
   11476:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1147a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11481:	7e c1                	jle    11444 <gdt_alloc_desc+0x23>
        }
    }

    mutex_unlock(&mutex);
   11483:	83 ec 0c             	sub    $0xc,%esp
   11486:	68 a0 89 01 00       	push   $0x189a0
   1148b:	e8 8e 0d 00 00       	call   1221e <mutex_unlock>
   11490:	83 c4 10             	add    $0x10,%esp

    return -1;
   11493:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11498:	c9                   	leave  
   11499:	c3                   	ret    

0001149a <gdt_free_sel>:


void gdt_free_sel(int sel) {
   1149a:	f3 0f 1e fb          	endbr32 
   1149e:	55                   	push   %ebp
   1149f:	89 e5                	mov    %esp,%ebp
   114a1:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   114a4:	83 ec 0c             	sub    $0xc,%esp
   114a7:	68 a0 89 01 00       	push   $0x189a0
   114ac:	e8 d8 0c 00 00       	call   12189 <mutex_lock>
   114b1:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel/sizeof(segment_desc_t)].attr = 0;
   114b4:	8b 45 08             	mov    0x8(%ebp),%eax
   114b7:	c1 e8 03             	shr    $0x3,%eax
   114ba:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   114c1:	00 00 00 
    mutex_unlock(&mutex);
   114c4:	83 ec 0c             	sub    $0xc,%esp
   114c7:	68 a0 89 01 00       	push   $0x189a0
   114cc:	e8 4d 0d 00 00       	call   1221e <mutex_unlock>
   114d1:	83 c4 10             	add    $0x10,%esp
}
   114d4:	90                   	nop
   114d5:	c9                   	leave  
   114d6:	c3                   	ret    

000114d7 <init_gdt>:


void init_gdt (void) {
   114d7:	f3 0f 1e fb          	endbr32 
   114db:	55                   	push   %ebp
   114dc:	89 e5                	mov    %esp,%ebp
   114de:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i ++ ) {
   114e1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   114e8:	eb 19                	jmp    11503 <init_gdt+0x2c>
        segment_desc_set(i << 3, 0, 0, 0);
   114ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114ed:	c1 e0 03             	shl    $0x3,%eax
   114f0:	6a 00                	push   $0x0
   114f2:	6a 00                	push   $0x0
   114f4:	6a 00                	push   $0x0
   114f6:	50                   	push   %eax
   114f7:	e8 50 fe ff ff       	call   1134c <segment_desc_set>
   114fc:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i ++ ) {
   114ff:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11503:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1150a:	7e de                	jle    114ea <init_gdt+0x13>
    }


    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1150c:	68 92 c0 00 00       	push   $0xc092
   11511:	6a ff                	push   $0xffffffff
   11513:	6a 00                	push   $0x0
   11515:	6a 10                	push   $0x10
   11517:	e8 30 fe ff ff       	call   1134c <segment_desc_set>
   1151c:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1151f:	68 9a c0 00 00       	push   $0xc09a
   11524:	6a ff                	push   $0xffffffff
   11526:	6a 00                	push   $0x0
   11528:	6a 08                	push   $0x8
   1152a:	e8 1d fe ff ff       	call   1134c <segment_desc_set>
   1152f:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   11532:	ba bd 02 01 00       	mov    $0x102bd,%edx
   11537:	b8 b8 81 01 00       	mov    $0x181b8,%eax
   1153c:	68 05 ec 00 00       	push   $0xec05
   11541:	52                   	push   %edx
   11542:	6a 08                	push   $0x8
   11544:	50                   	push   %eax
   11545:	e8 8c fe ff ff       	call   113d6 <gate_desc_set>
   1154a:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall,
        GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT
    );

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1154d:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   11552:	68 00 08 00 00       	push   $0x800
   11557:	50                   	push   %eax
   11558:	e8 ad fd ff ff       	call   1130a <lgdt>
   1155d:	83 c4 08             	add    $0x8,%esp


}
   11560:	90                   	nop
   11561:	c9                   	leave  
   11562:	c3                   	ret    

00011563 <cpu_init>:
void cpu_init (void) {
   11563:	f3 0f 1e fb          	endbr32 
   11567:	55                   	push   %ebp
   11568:	89 e5                	mov    %esp,%ebp
   1156a:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   1156d:	83 ec 0c             	sub    $0xc,%esp
   11570:	68 a0 89 01 00       	push   $0x189a0
   11575:	e8 dd 0b 00 00       	call   12157 <mutex_init>
   1157a:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   1157d:	e8 55 ff ff ff       	call   114d7 <init_gdt>
}
   11582:	90                   	nop
   11583:	c9                   	leave  
   11584:	c3                   	ret    

00011585 <switch_to_tss>:


void switch_to_tss (int tss_sel) {
   11585:	f3 0f 1e fb          	endbr32 
   11589:	55                   	push   %ebp
   1158a:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   1158c:	8b 45 08             	mov    0x8(%ebp),%eax
   1158f:	6a 00                	push   $0x0
   11591:	50                   	push   %eax
   11592:	e8 9b fd ff ff       	call   11332 <far_jump>
   11597:	83 c4 08             	add    $0x8,%esp
   1159a:	90                   	nop
   1159b:	c9                   	leave  
   1159c:	c3                   	ret    

0001159d <inb>:
static inline uint8_t inb (uint16_t port) {
   1159d:	55                   	push   %ebp
   1159e:	89 e5                	mov    %esp,%ebp
   115a0:	83 ec 14             	sub    $0x14,%esp
   115a3:	8b 45 08             	mov    0x8(%ebp),%eax
   115a6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   115aa:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   115ae:	89 c2                	mov    %eax,%edx
   115b0:	ec                   	in     (%dx),%al
   115b1:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   115b4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   115b8:	c9                   	leave  
   115b9:	c3                   	ret    

000115ba <outb>:
static inline void outb (uint16_t port, uint8_t data) {
   115ba:	55                   	push   %ebp
   115bb:	89 e5                	mov    %esp,%ebp
   115bd:	83 ec 08             	sub    $0x8,%esp
   115c0:	8b 45 08             	mov    0x8(%ebp),%eax
   115c3:	8b 55 0c             	mov    0xc(%ebp),%edx
   115c6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   115ca:	89 d0                	mov    %edx,%eax
   115cc:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   115cf:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   115d3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   115d7:	ee                   	out    %al,(%dx)
}
   115d8:	90                   	nop
   115d9:	c9                   	leave  
   115da:	c3                   	ret    

000115db <cli>:
static inline void cli () {
   115db:	55                   	push   %ebp
   115dc:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   115de:	fa                   	cli    
}
   115df:	90                   	nop
   115e0:	5d                   	pop    %ebp
   115e1:	c3                   	ret    

000115e2 <sti>:
static inline void sti () {
   115e2:	55                   	push   %ebp
   115e3:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   115e5:	fb                   	sti    
}
   115e6:	90                   	nop
   115e7:	5d                   	pop    %ebp
   115e8:	c3                   	ret    

000115e9 <read_cr2>:
static inline uint32_t read_cr2 () {
   115e9:	55                   	push   %ebp
   115ea:	89 e5                	mov    %esp,%ebp
   115ec:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   115ef:	0f 20 d0             	mov    %cr2,%eax
   115f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr2;
   115f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   115f8:	c9                   	leave  
   115f9:	c3                   	ret    

000115fa <lidt>:
static inline void lidt (uint32_t start, uint32_t size) {
   115fa:	55                   	push   %ebp
   115fb:	89 e5                	mov    %esp,%ebp
   115fd:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   11600:	8b 45 08             	mov    0x8(%ebp),%eax
   11603:	c1 e8 10             	shr    $0x10,%eax
   11606:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   1160a:	8b 45 08             	mov    0x8(%ebp),%eax
   1160d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   11611:	8b 45 0c             	mov    0xc(%ebp),%eax
   11614:	83 e8 01             	sub    $0x1,%eax
   11617:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %0"::"m"(idt));
   1161b:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1161f:	90                   	nop
   11620:	c9                   	leave  
   11621:	c3                   	ret    

00011622 <hlt>:
static inline void hlt (void) {
   11622:	55                   	push   %ebp
   11623:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11625:	f4                   	hlt    
}
   11626:	90                   	nop
   11627:	5d                   	pop    %ebp
   11628:	c3                   	ret    

00011629 <read_eflags>:


static inline uint32_t read_eflags (void) {
   11629:	55                   	push   %ebp
   1162a:	89 e5                	mov    %esp,%ebp
   1162c:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   1162f:	9c                   	pushf  
   11630:	58                   	pop    %eax
   11631:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   11634:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11637:	c9                   	leave  
   11638:	c3                   	ret    

00011639 <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   11639:	55                   	push   %ebp
   1163a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   1163c:	8b 45 08             	mov    0x8(%ebp),%eax
   1163f:	50                   	push   %eax
   11640:	9d                   	popf   

}
   11641:	90                   	nop
   11642:	5d                   	pop    %ebp
   11643:	c3                   	ret    

00011644 <dump_core_regs>:

void exception_handler_unknown (void);

static gate_desc_t idt_table[IDT_TABLE_NR];

static void dump_core_regs (exception_frame_t * frame) {
   11644:	f3 0f 1e fb          	endbr32 
   11648:	55                   	push   %ebp
   11649:	89 e5                	mov    %esp,%ebp
   1164b:	57                   	push   %edi
   1164c:	56                   	push   %esi
   1164d:	53                   	push   %ebx
   1164e:	83 ec 2c             	sub    $0x2c,%esp
	uint32_t ss, esp;
	if (frame->cs & 0x3) {
   11651:	8b 45 08             	mov    0x8(%ebp),%eax
   11654:	8b 40 3c             	mov    0x3c(%eax),%eax
   11657:	83 e0 03             	and    $0x3,%eax
   1165a:	85 c0                	test   %eax,%eax
   1165c:	74 14                	je     11672 <dump_core_regs+0x2e>
		ss = frame->ss3;
   1165e:	8b 45 08             	mov    0x8(%ebp),%eax
   11661:	8b 40 48             	mov    0x48(%eax),%eax
   11664:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		esp = frame->esp3;
   11667:	8b 45 08             	mov    0x8(%ebp),%eax
   1166a:	8b 40 44             	mov    0x44(%eax),%eax
   1166d:	89 45 e0             	mov    %eax,-0x20(%ebp)
   11670:	eb 12                	jmp    11684 <dump_core_regs+0x40>
	} else {
		ss = frame->ds;
   11672:	8b 45 08             	mov    0x8(%ebp),%eax
   11675:	8b 40 0c             	mov    0xc(%eax),%eax
   11678:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		esp = frame->esp;
   1167b:	8b 45 08             	mov    0x8(%ebp),%eax
   1167e:	8b 40 1c             	mov    0x1c(%eax),%eax
   11681:	89 45 e0             	mov    %eax,-0x20(%ebp)
	}
	log_printf("IRQ: %d, error code: %d", frame->num, frame->error_code);
   11684:	8b 45 08             	mov    0x8(%ebp),%eax
   11687:	8b 50 34             	mov    0x34(%eax),%edx
   1168a:	8b 45 08             	mov    0x8(%ebp),%eax
   1168d:	8b 40 30             	mov    0x30(%eax),%eax
   11690:	83 ec 04             	sub    $0x4,%esp
   11693:	52                   	push   %edx
   11694:	50                   	push   %eax
   11695:	68 f0 31 01 00       	push   $0x131f0
   1169a:	e8 1e 18 00 00       	call   12ebd <log_printf>
   1169f:	83 c4 10             	add    $0x10,%esp
	log_printf("CS: %d\n\rDS: %d\n\rES: %d\n\rFS: %d\n\rGS:%d",
   116a2:	8b 45 08             	mov    0x8(%ebp),%eax
   116a5:	8b 18                	mov    (%eax),%ebx
   116a7:	8b 45 08             	mov    0x8(%ebp),%eax
   116aa:	8b 48 08             	mov    0x8(%eax),%ecx
   116ad:	8b 45 08             	mov    0x8(%ebp),%eax
   116b0:	8b 50 0c             	mov    0xc(%eax),%edx
   116b3:	8b 45 08             	mov    0x8(%ebp),%eax
   116b6:	8b 40 3c             	mov    0x3c(%eax),%eax
   116b9:	83 ec 08             	sub    $0x8,%esp
   116bc:	53                   	push   %ebx
   116bd:	ff 75 e4             	pushl  -0x1c(%ebp)
   116c0:	51                   	push   %ecx
   116c1:	52                   	push   %edx
   116c2:	50                   	push   %eax
   116c3:	68 08 32 01 00       	push   $0x13208
   116c8:	e8 f0 17 00 00       	call   12ebd <log_printf>
   116cd:	83 c4 20             	add    $0x20,%esp
		frame->cs, frame->ds, frame->es, ss, frame->gs
	);
	log_printf("EAX: 0x%x\n\r"
   116d0:	8b 45 08             	mov    0x8(%ebp),%eax
   116d3:	8b 40 18             	mov    0x18(%eax),%eax
   116d6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   116d9:	8b 45 08             	mov    0x8(%ebp),%eax
   116dc:	8b 78 14             	mov    0x14(%eax),%edi
   116df:	8b 45 08             	mov    0x8(%ebp),%eax
   116e2:	8b 70 10             	mov    0x10(%eax),%esi
   116e5:	8b 45 08             	mov    0x8(%ebp),%eax
   116e8:	8b 58 24             	mov    0x24(%eax),%ebx
   116eb:	8b 45 08             	mov    0x8(%ebp),%eax
   116ee:	8b 48 28             	mov    0x28(%eax),%ecx
   116f1:	8b 45 08             	mov    0x8(%ebp),%eax
   116f4:	8b 50 20             	mov    0x20(%eax),%edx
   116f7:	8b 45 08             	mov    0x8(%ebp),%eax
   116fa:	8b 40 2c             	mov    0x2c(%eax),%eax
   116fd:	83 ec 0c             	sub    $0xc,%esp
   11700:	ff 75 e0             	pushl  -0x20(%ebp)
   11703:	ff 75 d4             	pushl  -0x2c(%ebp)
   11706:	57                   	push   %edi
   11707:	56                   	push   %esi
   11708:	53                   	push   %ebx
   11709:	51                   	push   %ecx
   1170a:	52                   	push   %edx
   1170b:	50                   	push   %eax
   1170c:	68 30 32 01 00       	push   $0x13230
   11711:	e8 a7 17 00 00       	call   12ebd <log_printf>
   11716:	83 c4 30             	add    $0x30,%esp
		"EBP: 0x%x\n\r"
		"ESP: 0x%x\n\r",
		frame->eax, frame->ebx, frame->ecx, frame->edx,
		frame->edi, frame->esi, frame->ebp, esp);

	log_printf("EIP: 0x%x\n\rEFLAGS:0x%x\n\r", frame->eip, frame->eflags);
   11719:	8b 45 08             	mov    0x8(%ebp),%eax
   1171c:	8b 50 40             	mov    0x40(%eax),%edx
   1171f:	8b 45 08             	mov    0x8(%ebp),%eax
   11722:	8b 40 38             	mov    0x38(%eax),%eax
   11725:	83 ec 04             	sub    $0x4,%esp
   11728:	52                   	push   %edx
   11729:	50                   	push   %eax
   1172a:	68 89 32 01 00       	push   $0x13289
   1172f:	e8 89 17 00 00       	call   12ebd <log_printf>
   11734:	83 c4 10             	add    $0x10,%esp


}
   11737:	90                   	nop
   11738:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1173b:	5b                   	pop    %ebx
   1173c:	5e                   	pop    %esi
   1173d:	5f                   	pop    %edi
   1173e:	5d                   	pop    %ebp
   1173f:	c3                   	ret    

00011740 <do_default_handler>:

static void do_default_handler (exception_frame_t * frame, char * message) {
   11740:	f3 0f 1e fb          	endbr32 
   11744:	55                   	push   %ebp
   11745:	89 e5                	mov    %esp,%ebp
   11747:	83 ec 08             	sub    $0x8,%esp
	log_printf("---------------------------------");
   1174a:	83 ec 0c             	sub    $0xc,%esp
   1174d:	68 a4 32 01 00       	push   $0x132a4
   11752:	e8 66 17 00 00       	call   12ebd <log_printf>
   11757:	83 c4 10             	add    $0x10,%esp
	log_printf("IRQ/Exception happend: %s", message);
   1175a:	83 ec 08             	sub    $0x8,%esp
   1175d:	ff 75 0c             	pushl  0xc(%ebp)
   11760:	68 c6 32 01 00       	push   $0x132c6
   11765:	e8 53 17 00 00       	call   12ebd <log_printf>
   1176a:	83 c4 10             	add    $0x10,%esp
	dump_core_regs(frame);
   1176d:	83 ec 0c             	sub    $0xc,%esp
   11770:	ff 75 08             	pushl  0x8(%ebp)
   11773:	e8 cc fe ff ff       	call   11644 <dump_core_regs>
   11778:	83 c4 10             	add    $0x10,%esp

}
   1177b:	90                   	nop
   1177c:	c9                   	leave  
   1177d:	c3                   	ret    

0001177e <do_handler_unknown>:
void do_handler_unknown (exception_frame_t * frame) {
   1177e:	f3 0f 1e fb          	endbr32 
   11782:	55                   	push   %ebp
   11783:	89 e5                	mov    %esp,%ebp
   11785:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");        // 默认值放到最后面
   11788:	83 ec 08             	sub    $0x8,%esp
   1178b:	68 e0 32 01 00       	push   $0x132e0
   11790:	ff 75 08             	pushl  0x8(%ebp)
   11793:	e8 a8 ff ff ff       	call   11740 <do_default_handler>
   11798:	83 c4 10             	add    $0x10,%esp
}
   1179b:	90                   	nop
   1179c:	c9                   	leave  
   1179d:	c3                   	ret    

0001179e <do_handler_divider>:

void do_handler_divider (exception_frame_t * frame) {
   1179e:	f3 0f 1e fb          	endbr32 
   117a2:	55                   	push   %ebp
   117a3:	89 e5                	mov    %esp,%ebp
   117a5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Divider exception");
   117a8:	83 ec 08             	sub    $0x8,%esp
   117ab:	68 f2 32 01 00       	push   $0x132f2
   117b0:	ff 75 08             	pushl  0x8(%ebp)
   117b3:	e8 88 ff ff ff       	call   11740 <do_default_handler>
   117b8:	83 c4 10             	add    $0x10,%esp
}
   117bb:	90                   	nop
   117bc:	c9                   	leave  
   117bd:	c3                   	ret    

000117be <do_handler_Debug>:

void do_handler_Debug(exception_frame_t * frame) {
   117be:	f3 0f 1e fb          	endbr32 
   117c2:	55                   	push   %ebp
   117c3:	89 e5                	mov    %esp,%ebp
   117c5:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   117c8:	83 ec 08             	sub    $0x8,%esp
   117cb:	68 04 33 01 00       	push   $0x13304
   117d0:	ff 75 08             	pushl  0x8(%ebp)
   117d3:	e8 68 ff ff ff       	call   11740 <do_default_handler>
   117d8:	83 c4 10             	add    $0x10,%esp
}
   117db:	90                   	nop
   117dc:	c9                   	leave  
   117dd:	c3                   	ret    

000117de <do_handler_NMI>:

void do_handler_NMI(exception_frame_t * frame) {
   117de:	f3 0f 1e fb          	endbr32 
   117e2:	55                   	push   %ebp
   117e3:	89 e5                	mov    %esp,%ebp
   117e5:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   117e8:	83 ec 08             	sub    $0x8,%esp
   117eb:	68 14 33 01 00       	push   $0x13314
   117f0:	ff 75 08             	pushl  0x8(%ebp)
   117f3:	e8 48 ff ff ff       	call   11740 <do_default_handler>
   117f8:	83 c4 10             	add    $0x10,%esp
}
   117fb:	90                   	nop
   117fc:	c9                   	leave  
   117fd:	c3                   	ret    

000117fe <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t * frame) {
   117fe:	f3 0f 1e fb          	endbr32 
   11802:	55                   	push   %ebp
   11803:	89 e5                	mov    %esp,%ebp
   11805:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   11808:	83 ec 08             	sub    $0x8,%esp
   1180b:	68 23 33 01 00       	push   $0x13323
   11810:	ff 75 08             	pushl  0x8(%ebp)
   11813:	e8 28 ff ff ff       	call   11740 <do_default_handler>
   11818:	83 c4 10             	add    $0x10,%esp
}
   1181b:	90                   	nop
   1181c:	c9                   	leave  
   1181d:	c3                   	ret    

0001181e <do_handler_overflow>:

void do_handler_overflow(exception_frame_t * frame) {
   1181e:	f3 0f 1e fb          	endbr32 
   11822:	55                   	push   %ebp
   11823:	89 e5                	mov    %esp,%ebp
   11825:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   11828:	83 ec 08             	sub    $0x8,%esp
   1182b:	68 2f 33 01 00       	push   $0x1332f
   11830:	ff 75 08             	pushl  0x8(%ebp)
   11833:	e8 08 ff ff ff       	call   11740 <do_default_handler>
   11838:	83 c4 10             	add    $0x10,%esp
}
   1183b:	90                   	nop
   1183c:	c9                   	leave  
   1183d:	c3                   	ret    

0001183e <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t * frame) {
   1183e:	f3 0f 1e fb          	endbr32 
   11842:	55                   	push   %ebp
   11843:	89 e5                	mov    %esp,%ebp
   11845:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   11848:	83 ec 08             	sub    $0x8,%esp
   1184b:	68 39 33 01 00       	push   $0x13339
   11850:	ff 75 08             	pushl  0x8(%ebp)
   11853:	e8 e8 fe ff ff       	call   11740 <do_default_handler>
   11858:	83 c4 10             	add    $0x10,%esp
}
   1185b:	90                   	nop
   1185c:	c9                   	leave  
   1185d:	c3                   	ret    

0001185e <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t * frame) {
   1185e:	f3 0f 1e fb          	endbr32 
   11862:	55                   	push   %ebp
   11863:	89 e5                	mov    %esp,%ebp
   11865:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   11868:	83 ec 08             	sub    $0x8,%esp
   1186b:	68 4f 33 01 00       	push   $0x1334f
   11870:	ff 75 08             	pushl  0x8(%ebp)
   11873:	e8 c8 fe ff ff       	call   11740 <do_default_handler>
   11878:	83 c4 10             	add    $0x10,%esp
}
   1187b:	90                   	nop
   1187c:	c9                   	leave  
   1187d:	c3                   	ret    

0001187e <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t * frame) {
   1187e:	f3 0f 1e fb          	endbr32 
   11882:	55                   	push   %ebp
   11883:	89 e5                	mov    %esp,%ebp
   11885:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   11888:	83 ec 08             	sub    $0x8,%esp
   1188b:	68 5f 33 01 00       	push   $0x1335f
   11890:	ff 75 08             	pushl  0x8(%ebp)
   11893:	e8 a8 fe ff ff       	call   11740 <do_default_handler>
   11898:	83 c4 10             	add    $0x10,%esp
}
   1189b:	90                   	nop
   1189c:	c9                   	leave  
   1189d:	c3                   	ret    

0001189e <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t * frame) {
   1189e:	f3 0f 1e fb          	endbr32 
   118a2:	55                   	push   %ebp
   118a3:	89 e5                	mov    %esp,%ebp
   118a5:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   118a8:	83 ec 08             	sub    $0x8,%esp
   118ab:	68 75 33 01 00       	push   $0x13375
   118b0:	ff 75 08             	pushl  0x8(%ebp)
   118b3:	e8 88 fe ff ff       	call   11740 <do_default_handler>
   118b8:	83 c4 10             	add    $0x10,%esp
}
   118bb:	90                   	nop
   118bc:	c9                   	leave  
   118bd:	c3                   	ret    

000118be <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t * frame) {
   118be:	f3 0f 1e fb          	endbr32 
   118c2:	55                   	push   %ebp
   118c3:	89 e5                	mov    %esp,%ebp
   118c5:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   118c8:	83 ec 08             	sub    $0x8,%esp
   118cb:	68 83 33 01 00       	push   $0x13383
   118d0:	ff 75 08             	pushl  0x8(%ebp)
   118d3:	e8 68 fe ff ff       	call   11740 <do_default_handler>
   118d8:	83 c4 10             	add    $0x10,%esp
}
   118db:	90                   	nop
   118dc:	c9                   	leave  
   118dd:	c3                   	ret    

000118de <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t * frame) {
   118de:	f3 0f 1e fb          	endbr32 
   118e2:	55                   	push   %ebp
   118e3:	89 e5                	mov    %esp,%ebp
   118e5:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   118e8:	83 ec 08             	sub    $0x8,%esp
   118eb:	68 8f 33 01 00       	push   $0x1338f
   118f0:	ff 75 08             	pushl  0x8(%ebp)
   118f3:	e8 48 fe ff ff       	call   11740 <do_default_handler>
   118f8:	83 c4 10             	add    $0x10,%esp
}
   118fb:	90                   	nop
   118fc:	c9                   	leave  
   118fd:	c3                   	ret    

000118fe <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t * frame) {
   118fe:	f3 0f 1e fb          	endbr32 
   11902:	55                   	push   %ebp
   11903:	89 e5                	mov    %esp,%ebp
   11905:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   11908:	83 ec 08             	sub    $0x8,%esp
   1190b:	68 a4 33 01 00       	push   $0x133a4
   11910:	ff 75 08             	pushl  0x8(%ebp)
   11913:	e8 28 fe ff ff       	call   11740 <do_default_handler>
   11918:	83 c4 10             	add    $0x10,%esp
}
   1191b:	90                   	nop
   1191c:	c9                   	leave  
   1191d:	c3                   	ret    

0001191e <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t * frame) {
   1191e:	f3 0f 1e fb          	endbr32 
   11922:	55                   	push   %ebp
   11923:	89 e5                	mov    %esp,%ebp
   11925:	83 ec 08             	sub    $0x8,%esp
	log_printf("--------------------------------");
   11928:	83 ec 0c             	sub    $0xc,%esp
   1192b:	68 bc 33 01 00       	push   $0x133bc
   11930:	e8 88 15 00 00       	call   12ebd <log_printf>
   11935:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   11938:	83 ec 0c             	sub    $0xc,%esp
   1193b:	68 e0 33 01 00       	push   $0x133e0
   11940:	e8 78 15 00 00       	call   12ebd <log_printf>
   11945:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   11948:	8b 45 08             	mov    0x8(%ebp),%eax
   1194b:	8b 40 34             	mov    0x34(%eax),%eax
   1194e:	83 e0 01             	and    $0x1,%eax
   11951:	85 c0                	test   %eax,%eax
   11953:	74 12                	je     11967 <do_handler_general_protection+0x49>
        log_printf("the exception occurred during delivery of an "
   11955:	83 ec 0c             	sub    $0xc,%esp
   11958:	68 0c 34 01 00       	push   $0x1340c
   1195d:	e8 5b 15 00 00       	call   12ebd <log_printf>
   11962:	83 c4 10             	add    $0x10,%esp
   11965:	eb 10                	jmp    11977 <do_handler_general_protection+0x59>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   11967:	83 ec 0c             	sub    $0xc,%esp
   1196a:	68 88 34 01 00       	push   $0x13488
   1196f:	e8 49 15 00 00       	call   12ebd <log_printf>
   11974:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   11977:	8b 45 08             	mov    0x8(%ebp),%eax
   1197a:	8b 40 34             	mov    0x34(%eax),%eax
   1197d:	83 e0 02             	and    $0x2,%eax
   11980:	85 c0                	test   %eax,%eax
   11982:	74 12                	je     11996 <do_handler_general_protection+0x78>
        log_printf("the index portion of the error code refers "
   11984:	83 ec 0c             	sub    $0xc,%esp
   11987:	68 e0 34 01 00       	push   $0x134e0
   1198c:	e8 2c 15 00 00       	call   12ebd <log_printf>
   11991:	83 c4 10             	add    $0x10,%esp
   11994:	eb 10                	jmp    119a6 <do_handler_general_protection+0x88>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   11996:	83 ec 0c             	sub    $0xc,%esp
   11999:	68 2c 35 01 00       	push   $0x1352c
   1199e:	e8 1a 15 00 00       	call   12ebd <log_printf>
   119a3:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   119a6:	8b 45 08             	mov    0x8(%ebp),%eax
   119a9:	8b 40 34             	mov    0x34(%eax),%eax
   119ac:	25 f8 ff 00 00       	and    $0xfff8,%eax
   119b1:	83 ec 08             	sub    $0x8,%esp
   119b4:	50                   	push   %eax
   119b5:	68 58 35 01 00       	push   $0x13558
   119ba:	e8 fe 14 00 00       	call   12ebd <log_printf>
   119bf:	83 c4 10             	add    $0x10,%esp
	dump_core_regs(frame);
   119c2:	83 ec 0c             	sub    $0xc,%esp
   119c5:	ff 75 08             	pushl  0x8(%ebp)
   119c8:	e8 77 fc ff ff       	call   11644 <dump_core_regs>
   119cd:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   119d0:	e8 4d fc ff ff       	call   11622 <hlt>
   119d5:	eb f9                	jmp    119d0 <do_handler_general_protection+0xb2>

000119d7 <do_handler_page_fault>:
    }	
}

void do_handler_page_fault(exception_frame_t * frame) {
   119d7:	f3 0f 1e fb          	endbr32 
   119db:	55                   	push   %ebp
   119dc:	89 e5                	mov    %esp,%ebp
   119de:	83 ec 08             	sub    $0x8,%esp
	log_printf("--------");
   119e1:	83 ec 0c             	sub    $0xc,%esp
   119e4:	68 6a 35 01 00       	push   $0x1356a
   119e9:	e8 cf 14 00 00       	call   12ebd <log_printf>
   119ee:	83 c4 10             	add    $0x10,%esp
	log_printf("Page fault.");
   119f1:	83 ec 0c             	sub    $0xc,%esp
   119f4:	68 73 35 01 00       	push   $0x13573
   119f9:	e8 bf 14 00 00       	call   12ebd <log_printf>
   119fe:	83 c4 10             	add    $0x10,%esp

	// 根据错误码判断错误原因
	if (frame->error_code & ERR_PAGE_P) {
   11a01:	8b 45 08             	mov    0x8(%ebp),%eax
   11a04:	8b 40 34             	mov    0x34(%eax),%eax
   11a07:	83 e0 01             	and    $0x1,%eax
   11a0a:	85 c0                	test   %eax,%eax
   11a0c:	74 18                	je     11a26 <do_handler_page_fault+0x4f>
		log_printf("The fault was caused by a page-level protection violation.: 0x%x", read_cr2());
   11a0e:	e8 d6 fb ff ff       	call   115e9 <read_cr2>
   11a13:	83 ec 08             	sub    $0x8,%esp
   11a16:	50                   	push   %eax
   11a17:	68 80 35 01 00       	push   $0x13580
   11a1c:	e8 9c 14 00 00       	call   12ebd <log_printf>
   11a21:	83 c4 10             	add    $0x10,%esp
   11a24:	eb 16                	jmp    11a3c <do_handler_page_fault+0x65>
	} else {
		log_printf("The fault was caused by a non-present page: 0x%x", read_cr2());
   11a26:	e8 be fb ff ff       	call   115e9 <read_cr2>
   11a2b:	83 ec 08             	sub    $0x8,%esp
   11a2e:	50                   	push   %eax
   11a2f:	68 c4 35 01 00       	push   $0x135c4
   11a34:	e8 84 14 00 00       	call   12ebd <log_printf>
   11a39:	83 c4 10             	add    $0x10,%esp
	}

	// 判断是不是读写方面的异常
	if (frame->error_code & ERR_PAGE_WR) {
   11a3c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3f:	8b 40 34             	mov    0x34(%eax),%eax
   11a42:	83 e0 02             	and    $0x2,%eax
   11a45:	85 c0                	test   %eax,%eax
   11a47:	74 18                	je     11a61 <do_handler_page_fault+0x8a>
		log_printf("The access causing the fault was a write.: 0x%x", read_cr2());
   11a49:	e8 9b fb ff ff       	call   115e9 <read_cr2>
   11a4e:	83 ec 08             	sub    $0x8,%esp
   11a51:	50                   	push   %eax
   11a52:	68 f8 35 01 00       	push   $0x135f8
   11a57:	e8 61 14 00 00       	call   12ebd <log_printf>
   11a5c:	83 c4 10             	add    $0x10,%esp
   11a5f:	eb 16                	jmp    11a77 <do_handler_page_fault+0xa0>
	} else {
		log_printf("The access causing the fault was a read.: 0x%x", read_cr2());
   11a61:	e8 83 fb ff ff       	call   115e9 <read_cr2>
   11a66:	83 ec 08             	sub    $0x8,%esp
   11a69:	50                   	push   %eax
   11a6a:	68 28 36 01 00       	push   $0x13628
   11a6f:	e8 49 14 00 00       	call   12ebd <log_printf>
   11a74:	83 c4 10             	add    $0x10,%esp
	}

	if (frame->error_code & ERR_PAGE_US) {
   11a77:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7a:	8b 40 34             	mov    0x34(%eax),%eax
   11a7d:	83 e0 04             	and    $0x4,%eax
   11a80:	85 c0                	test   %eax,%eax
   11a82:	74 18                	je     11a9c <do_handler_page_fault+0xc5>
		log_printf("A user-mode access caused the fault.: 0x%x", read_cr2());
   11a84:	e8 60 fb ff ff       	call   115e9 <read_cr2>
   11a89:	83 ec 08             	sub    $0x8,%esp
   11a8c:	50                   	push   %eax
   11a8d:	68 58 36 01 00       	push   $0x13658
   11a92:	e8 26 14 00 00       	call   12ebd <log_printf>
   11a97:	83 c4 10             	add    $0x10,%esp
   11a9a:	eb 16                	jmp    11ab2 <do_handler_page_fault+0xdb>
	} else {
		log_printf("A supervisor-mode access caused the fault.: 0x%x", read_cr2());
   11a9c:	e8 48 fb ff ff       	call   115e9 <read_cr2>
   11aa1:	83 ec 08             	sub    $0x8,%esp
   11aa4:	50                   	push   %eax
   11aa5:	68 84 36 01 00       	push   $0x13684
   11aaa:	e8 0e 14 00 00       	call   12ebd <log_printf>
   11aaf:	83 c4 10             	add    $0x10,%esp
	}

    dump_core_regs(frame);
   11ab2:	83 ec 0c             	sub    $0xc,%esp
   11ab5:	ff 75 08             	pushl  0x8(%ebp)
   11ab8:	e8 87 fb ff ff       	call   11644 <dump_core_regs>
   11abd:	83 c4 10             	add    $0x10,%esp
	while (1) {
		hlt();
   11ac0:	e8 5d fb ff ff       	call   11622 <hlt>
   11ac5:	eb f9                	jmp    11ac0 <do_handler_page_fault+0xe9>

00011ac7 <do_handler_fpu_error>:
	}
}

void do_handler_fpu_error(exception_frame_t * frame) {
   11ac7:	f3 0f 1e fb          	endbr32 
   11acb:	55                   	push   %ebp
   11acc:	89 e5                	mov    %esp,%ebp
   11ace:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   11ad1:	83 ec 08             	sub    $0x8,%esp
   11ad4:	68 b5 36 01 00       	push   $0x136b5
   11ad9:	ff 75 08             	pushl  0x8(%ebp)
   11adc:	e8 5f fc ff ff       	call   11740 <do_default_handler>
   11ae1:	83 c4 10             	add    $0x10,%esp
}
   11ae4:	90                   	nop
   11ae5:	c9                   	leave  
   11ae6:	c3                   	ret    

00011ae7 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t * frame) {
   11ae7:	f3 0f 1e fb          	endbr32 
   11aeb:	55                   	push   %ebp
   11aec:	89 e5                	mov    %esp,%ebp
   11aee:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   11af1:	83 ec 08             	sub    $0x8,%esp
   11af4:	68 d3 36 01 00       	push   $0x136d3
   11af9:	ff 75 08             	pushl  0x8(%ebp)
   11afc:	e8 3f fc ff ff       	call   11740 <do_default_handler>
   11b01:	83 c4 10             	add    $0x10,%esp
}
   11b04:	90                   	nop
   11b05:	c9                   	leave  
   11b06:	c3                   	ret    

00011b07 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t * frame) {
   11b07:	f3 0f 1e fb          	endbr32 
   11b0b:	55                   	push   %ebp
   11b0c:	89 e5                	mov    %esp,%ebp
   11b0e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   11b11:	83 ec 08             	sub    $0x8,%esp
   11b14:	68 e4 36 01 00       	push   $0x136e4
   11b19:	ff 75 08             	pushl  0x8(%ebp)
   11b1c:	e8 1f fc ff ff       	call   11740 <do_default_handler>
   11b21:	83 c4 10             	add    $0x10,%esp
}
   11b24:	90                   	nop
   11b25:	c9                   	leave  
   11b26:	c3                   	ret    

00011b27 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t * frame) {
   11b27:	f3 0f 1e fb          	endbr32 
   11b2b:	55                   	push   %ebp
   11b2c:	89 e5                	mov    %esp,%ebp
   11b2e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   11b31:	83 ec 08             	sub    $0x8,%esp
   11b34:	68 f4 36 01 00       	push   $0x136f4
   11b39:	ff 75 08             	pushl  0x8(%ebp)
   11b3c:	e8 ff fb ff ff       	call   11740 <do_default_handler>
   11b41:	83 c4 10             	add    $0x10,%esp
}
   11b44:	90                   	nop
   11b45:	c9                   	leave  
   11b46:	c3                   	ret    

00011b47 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t * frame) {
   11b47:	f3 0f 1e fb          	endbr32 
   11b4b:	55                   	push   %ebp
   11b4c:	89 e5                	mov    %esp,%ebp
   11b4e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   11b51:	83 ec 08             	sub    $0x8,%esp
   11b54:	68 13 37 01 00       	push   $0x13713
   11b59:	ff 75 08             	pushl  0x8(%ebp)
   11b5c:	e8 df fb ff ff       	call   11740 <do_default_handler>
   11b61:	83 c4 10             	add    $0x10,%esp
}
   11b64:	90                   	nop
   11b65:	c9                   	leave  
   11b66:	c3                   	ret    

00011b67 <init_pic>:


static void init_pic (void) {
   11b67:	f3 0f 1e fb          	endbr32 
   11b6b:	55                   	push   %ebp
   11b6c:	89 e5                	mov    %esp,%ebp
	outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11b6e:	6a 11                	push   $0x11
   11b70:	6a 20                	push   $0x20
   11b72:	e8 43 fa ff ff       	call   115ba <outb>
   11b77:	83 c4 08             	add    $0x8,%esp
	outb(PIC0_ICW2, IRQ_PIC_START);
   11b7a:	6a 20                	push   $0x20
   11b7c:	6a 21                	push   $0x21
   11b7e:	e8 37 fa ff ff       	call   115ba <outb>
   11b83:	83 c4 08             	add    $0x8,%esp
	outb(PIC0_ICW3, 1 << 2);
   11b86:	6a 04                	push   $0x4
   11b88:	6a 21                	push   $0x21
   11b8a:	e8 2b fa ff ff       	call   115ba <outb>
   11b8f:	83 c4 08             	add    $0x8,%esp
	outb(PIC0_ICW4, PIC_ICW4_8086);
   11b92:	6a 01                	push   $0x1
   11b94:	6a 21                	push   $0x21
   11b96:	e8 1f fa ff ff       	call   115ba <outb>
   11b9b:	83 c4 08             	add    $0x8,%esp


	outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11b9e:	6a 11                	push   $0x11
   11ba0:	68 a0 00 00 00       	push   $0xa0
   11ba5:	e8 10 fa ff ff       	call   115ba <outb>
   11baa:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_ICW2, IRQ_PIC_START + 8);
   11bad:	6a 28                	push   $0x28
   11baf:	68 a1 00 00 00       	push   $0xa1
   11bb4:	e8 01 fa ff ff       	call   115ba <outb>
   11bb9:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_ICW3, 2);
   11bbc:	6a 02                	push   $0x2
   11bbe:	68 a1 00 00 00       	push   $0xa1
   11bc3:	e8 f2 f9 ff ff       	call   115ba <outb>
   11bc8:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_ICW4, PIC_ICW4_8086);
   11bcb:	6a 01                	push   $0x1
   11bcd:	68 a1 00 00 00       	push   $0xa1
   11bd2:	e8 e3 f9 ff ff       	call   115ba <outb>
   11bd7:	83 c4 08             	add    $0x8,%esp

	outb(PIC0_IMR, 0xFF & ~(1 << 2));  // 不禁止来自第二芯片的中断信号
   11bda:	68 fb 00 00 00       	push   $0xfb
   11bdf:	6a 21                	push   $0x21
   11be1:	e8 d4 f9 ff ff       	call   115ba <outb>
   11be6:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_IMR, 0xff); 
   11be9:	68 ff 00 00 00       	push   $0xff
   11bee:	68 a1 00 00 00       	push   $0xa1
   11bf3:	e8 c2 f9 ff ff       	call   115ba <outb>
   11bf8:	83 c4 08             	add    $0x8,%esp

}
   11bfb:	90                   	nop
   11bfc:	c9                   	leave  
   11bfd:	c3                   	ret    

00011bfe <irq_init>:

void irq_init (void) {
   11bfe:	f3 0f 1e fb          	endbr32 
   11c02:	55                   	push   %ebp
   11c03:	89 e5                	mov    %esp,%ebp
   11c05:	83 ec 18             	sub    $0x18,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i ++ ) {
   11c08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11c0f:	eb 25                	jmp    11c36 <irq_init+0x38>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   11c11:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   11c16:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c19:	c1 e0 03             	shl    $0x3,%eax
   11c1c:	05 c0 89 01 00       	add    $0x189c0,%eax
   11c21:	68 00 8e 00 00       	push   $0x8e00
   11c26:	52                   	push   %edx
   11c27:	6a 08                	push   $0x8
   11c29:	50                   	push   %eax
   11c2a:	e8 a7 f7 ff ff       	call   113d6 <gate_desc_set>
   11c2f:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i ++ ) {
   11c32:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11c36:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11c3a:	76 d5                	jbe    11c11 <irq_init+0x13>
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
    }

    // 设置异常处理接口
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   11c3c:	83 ec 08             	sub    $0x8,%esp
   11c3f:	68 4a 00 01 00       	push   $0x1004a
   11c44:	6a 00                	push   $0x0
   11c46:	e8 65 01 00 00       	call   11db0 <irq_install>
   11c4b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   11c4e:	83 ec 08             	sub    $0x8,%esp
   11c51:	68 69 00 01 00       	push   $0x10069
   11c56:	6a 01                	push   $0x1
   11c58:	e8 53 01 00 00       	call   11db0 <irq_install>
   11c5d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   11c60:	83 ec 08             	sub    $0x8,%esp
   11c63:	68 88 00 01 00       	push   $0x10088
   11c68:	6a 02                	push   $0x2
   11c6a:	e8 41 01 00 00       	call   11db0 <irq_install>
   11c6f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   11c72:	83 ec 08             	sub    $0x8,%esp
   11c75:	68 a7 00 01 00       	push   $0x100a7
   11c7a:	6a 03                	push   $0x3
   11c7c:	e8 2f 01 00 00       	call   11db0 <irq_install>
   11c81:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   11c84:	83 ec 08             	sub    $0x8,%esp
   11c87:	68 c6 00 01 00       	push   $0x100c6
   11c8c:	6a 04                	push   $0x4
   11c8e:	e8 1d 01 00 00       	call   11db0 <irq_install>
   11c93:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   11c96:	83 ec 08             	sub    $0x8,%esp
   11c99:	68 e5 00 01 00       	push   $0x100e5
   11c9e:	6a 05                	push   $0x5
   11ca0:	e8 0b 01 00 00       	call   11db0 <irq_install>
   11ca5:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   11ca8:	83 ec 08             	sub    $0x8,%esp
   11cab:	68 04 01 01 00       	push   $0x10104
   11cb0:	6a 06                	push   $0x6
   11cb2:	e8 f9 00 00 00       	call   11db0 <irq_install>
   11cb7:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   11cba:	83 ec 08             	sub    $0x8,%esp
   11cbd:	68 23 01 01 00       	push   $0x10123
   11cc2:	6a 07                	push   $0x7
   11cc4:	e8 e7 00 00 00       	call   11db0 <irq_install>
   11cc9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   11ccc:	83 ec 08             	sub    $0x8,%esp
   11ccf:	68 42 01 01 00       	push   $0x10142
   11cd4:	6a 08                	push   $0x8
   11cd6:	e8 d5 00 00 00       	call   11db0 <irq_install>
   11cdb:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   11cde:	83 ec 08             	sub    $0x8,%esp
   11ce1:	68 5f 01 01 00       	push   $0x1015f
   11ce6:	6a 0a                	push   $0xa
   11ce8:	e8 c3 00 00 00       	call   11db0 <irq_install>
   11ced:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   11cf0:	83 ec 08             	sub    $0x8,%esp
   11cf3:	68 7c 01 01 00       	push   $0x1017c
   11cf8:	6a 0b                	push   $0xb
   11cfa:	e8 b1 00 00 00       	call   11db0 <irq_install>
   11cff:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   11d02:	83 ec 08             	sub    $0x8,%esp
   11d05:	68 99 01 01 00       	push   $0x10199
   11d0a:	6a 0c                	push   $0xc
   11d0c:	e8 9f 00 00 00       	call   11db0 <irq_install>
   11d11:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   11d14:	83 ec 08             	sub    $0x8,%esp
   11d17:	68 b6 01 01 00       	push   $0x101b6
   11d1c:	6a 0d                	push   $0xd
   11d1e:	e8 8d 00 00 00       	call   11db0 <irq_install>
   11d23:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   11d26:	83 ec 08             	sub    $0x8,%esp
   11d29:	68 d3 01 01 00       	push   $0x101d3
   11d2e:	6a 0e                	push   $0xe
   11d30:	e8 7b 00 00 00       	call   11db0 <irq_install>
   11d35:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   11d38:	83 ec 08             	sub    $0x8,%esp
   11d3b:	68 f0 01 01 00       	push   $0x101f0
   11d40:	6a 10                	push   $0x10
   11d42:	e8 69 00 00 00       	call   11db0 <irq_install>
   11d47:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   11d4a:	83 ec 08             	sub    $0x8,%esp
   11d4d:	68 0f 02 01 00       	push   $0x1020f
   11d52:	6a 11                	push   $0x11
   11d54:	e8 57 00 00 00       	call   11db0 <irq_install>
   11d59:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   11d5c:	83 ec 08             	sub    $0x8,%esp
   11d5f:	68 2c 02 01 00       	push   $0x1022c
   11d64:	6a 12                	push   $0x12
   11d66:	e8 45 00 00 00       	call   11db0 <irq_install>
   11d6b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   11d6e:	83 ec 08             	sub    $0x8,%esp
   11d71:	68 4b 02 01 00       	push   $0x1024b
   11d76:	6a 13                	push   $0x13
   11d78:	e8 33 00 00 00       	call   11db0 <irq_install>
   11d7d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   11d80:	83 ec 08             	sub    $0x8,%esp
   11d83:	68 6a 02 01 00       	push   $0x1026a
   11d88:	6a 14                	push   $0x14
   11d8a:	e8 21 00 00 00       	call   11db0 <irq_install>
   11d8f:	83 c4 10             	add    $0x10,%esp


    lidt((uint32_t)idt_table, sizeof(idt_table));
   11d92:	b8 c0 89 01 00       	mov    $0x189c0,%eax
   11d97:	83 ec 08             	sub    $0x8,%esp
   11d9a:	68 00 04 00 00       	push   $0x400
   11d9f:	50                   	push   %eax
   11da0:	e8 55 f8 ff ff       	call   115fa <lidt>
   11da5:	83 c4 10             	add    $0x10,%esp

	init_pic();
   11da8:	e8 ba fd ff ff       	call   11b67 <init_pic>
}
   11dad:	90                   	nop
   11dae:	c9                   	leave  
   11daf:	c3                   	ret    

00011db0 <irq_install>:

int irq_install (int irq_num, irq_handler_t handler) {
   11db0:	f3 0f 1e fb          	endbr32 
   11db4:	55                   	push   %ebp
   11db5:	89 e5                	mov    %esp,%ebp
   11db7:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR) {
   11dba:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11dbe:	7e 07                	jle    11dc7 <irq_install+0x17>
        return -1;
   11dc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11dc5:	eb 25                	jmp    11dec <irq_install+0x3c>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, 
   11dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11dca:	8b 55 08             	mov    0x8(%ebp),%edx
   11dcd:	c1 e2 03             	shl    $0x3,%edx
   11dd0:	81 c2 c0 89 01 00    	add    $0x189c0,%edx
   11dd6:	68 00 8e 00 00       	push   $0x8e00
   11ddb:	50                   	push   %eax
   11ddc:	6a 08                	push   $0x8
   11dde:	52                   	push   %edx
   11ddf:	e8 f2 f5 ff ff       	call   113d6 <gate_desc_set>
   11de4:	83 c4 10             	add    $0x10,%esp
     (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);

    return 0;
   11de7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11dec:	c9                   	leave  
   11ded:	c3                   	ret    

00011dee <irq_enable>:

void irq_enable (int irq_num) {
   11dee:	f3 0f 1e fb          	endbr32 
   11df2:	55                   	push   %ebp
   11df3:	89 e5                	mov    %esp,%ebp
   11df5:	53                   	push   %ebx
   11df6:	83 ec 10             	sub    $0x10,%esp
	if (irq_num < IRQ_PIC_START) {
   11df9:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11dfd:	7e 78                	jle    11e77 <irq_enable+0x89>
		return;
	}

	irq_num -= IRQ_PIC_START;
   11dff:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
	if (irq_num < 8) {
   11e03:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11e07:	7f 32                	jg     11e3b <irq_enable+0x4d>
		uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11e09:	6a 21                	push   $0x21
   11e0b:	e8 8d f7 ff ff       	call   1159d <inb>
   11e10:	83 c4 04             	add    $0x4,%esp
   11e13:	89 c2                	mov    %eax,%edx
   11e15:	8b 45 08             	mov    0x8(%ebp),%eax
   11e18:	bb 01 00 00 00       	mov    $0x1,%ebx
   11e1d:	89 c1                	mov    %eax,%ecx
   11e1f:	d3 e3                	shl    %cl,%ebx
   11e21:	89 d8                	mov    %ebx,%eax
   11e23:	f7 d0                	not    %eax
   11e25:	21 d0                	and    %edx,%eax
   11e27:	88 45 fa             	mov    %al,-0x6(%ebp)
		outb(PIC0_IMR, mask);
   11e2a:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11e2e:	50                   	push   %eax
   11e2f:	6a 21                	push   $0x21
   11e31:	e8 84 f7 ff ff       	call   115ba <outb>
   11e36:	83 c4 08             	add    $0x8,%esp
   11e39:	eb 3d                	jmp    11e78 <irq_enable+0x8a>
	} else {
		irq_num -= 8;
   11e3b:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
		uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11e3f:	68 a1 00 00 00       	push   $0xa1
   11e44:	e8 54 f7 ff ff       	call   1159d <inb>
   11e49:	83 c4 04             	add    $0x4,%esp
   11e4c:	89 c2                	mov    %eax,%edx
   11e4e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e51:	bb 01 00 00 00       	mov    $0x1,%ebx
   11e56:	89 c1                	mov    %eax,%ecx
   11e58:	d3 e3                	shl    %cl,%ebx
   11e5a:	89 d8                	mov    %ebx,%eax
   11e5c:	f7 d0                	not    %eax
   11e5e:	21 d0                	and    %edx,%eax
   11e60:	88 45 fb             	mov    %al,-0x5(%ebp)
		outb(PIC1_IMR, mask);
   11e63:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11e67:	50                   	push   %eax
   11e68:	68 a1 00 00 00       	push   $0xa1
   11e6d:	e8 48 f7 ff ff       	call   115ba <outb>
   11e72:	83 c4 08             	add    $0x8,%esp
   11e75:	eb 01                	jmp    11e78 <irq_enable+0x8a>
		return;
   11e77:	90                   	nop
	}

}
   11e78:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11e7b:	c9                   	leave  
   11e7c:	c3                   	ret    

00011e7d <irq_disable>:


void irq_disable (int irq_num) {
   11e7d:	f3 0f 1e fb          	endbr32 
   11e81:	55                   	push   %ebp
   11e82:	89 e5                	mov    %esp,%ebp
   11e84:	53                   	push   %ebx
   11e85:	83 ec 10             	sub    $0x10,%esp
	if (irq_num < IRQ_PIC_START) {
   11e88:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11e8c:	7e 74                	jle    11f02 <irq_disable+0x85>
		return;
	}

	irq_num -= IRQ_PIC_START;
   11e8e:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
	if (irq_num < 8) {
   11e92:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11e96:	7f 30                	jg     11ec8 <irq_disable+0x4b>
		uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11e98:	6a 21                	push   $0x21
   11e9a:	e8 fe f6 ff ff       	call   1159d <inb>
   11e9f:	83 c4 04             	add    $0x4,%esp
   11ea2:	89 c3                	mov    %eax,%ebx
   11ea4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ea7:	ba 01 00 00 00       	mov    $0x1,%edx
   11eac:	89 c1                	mov    %eax,%ecx
   11eae:	d3 e2                	shl    %cl,%edx
   11eb0:	89 d0                	mov    %edx,%eax
   11eb2:	09 d8                	or     %ebx,%eax
   11eb4:	88 45 fa             	mov    %al,-0x6(%ebp)
		outb(PIC0_IMR, mask);
   11eb7:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11ebb:	50                   	push   %eax
   11ebc:	6a 21                	push   $0x21
   11ebe:	e8 f7 f6 ff ff       	call   115ba <outb>
   11ec3:	83 c4 08             	add    $0x8,%esp
   11ec6:	eb 3b                	jmp    11f03 <irq_disable+0x86>
	} else {
		irq_num -= 8;
   11ec8:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
		uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   11ecc:	68 a1 00 00 00       	push   $0xa1
   11ed1:	e8 c7 f6 ff ff       	call   1159d <inb>
   11ed6:	83 c4 04             	add    $0x4,%esp
   11ed9:	89 c3                	mov    %eax,%ebx
   11edb:	8b 45 08             	mov    0x8(%ebp),%eax
   11ede:	ba 01 00 00 00       	mov    $0x1,%edx
   11ee3:	89 c1                	mov    %eax,%ecx
   11ee5:	d3 e2                	shl    %cl,%edx
   11ee7:	89 d0                	mov    %edx,%eax
   11ee9:	09 d8                	or     %ebx,%eax
   11eeb:	88 45 fb             	mov    %al,-0x5(%ebp)
		outb(PIC1_IMR, mask);
   11eee:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11ef2:	50                   	push   %eax
   11ef3:	68 a1 00 00 00       	push   $0xa1
   11ef8:	e8 bd f6 ff ff       	call   115ba <outb>
   11efd:	83 c4 08             	add    $0x8,%esp
   11f00:	eb 01                	jmp    11f03 <irq_disable+0x86>
		return;
   11f02:	90                   	nop
	}

}
   11f03:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11f06:	c9                   	leave  
   11f07:	c3                   	ret    

00011f08 <irq_disable_global>:

// 全局中断关闭
void irq_disable_global (void) {
   11f08:	f3 0f 1e fb          	endbr32 
   11f0c:	55                   	push   %ebp
   11f0d:	89 e5                	mov    %esp,%ebp
	cli();
   11f0f:	e8 c7 f6 ff ff       	call   115db <cli>
}
   11f14:	90                   	nop
   11f15:	5d                   	pop    %ebp
   11f16:	c3                   	ret    

00011f17 <irq_enable_global>:

// 全局中断开启
void irq_enable_global (void) {
   11f17:	f3 0f 1e fb          	endbr32 
   11f1b:	55                   	push   %ebp
   11f1c:	89 e5                	mov    %esp,%ebp
	sti();
   11f1e:	e8 bf f6 ff ff       	call   115e2 <sti>
}
   11f23:	90                   	nop
   11f24:	5d                   	pop    %ebp
   11f25:	c3                   	ret    

00011f26 <pic_send_eoi>:

void pic_send_eoi (int irq_num) {
   11f26:	f3 0f 1e fb          	endbr32 
   11f2a:	55                   	push   %ebp
   11f2b:	89 e5                	mov    %esp,%ebp
	irq_num -= IRQ_PIC_START;
   11f2d:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
	if (irq_num >= 8) {
   11f31:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11f35:	7e 0f                	jle    11f46 <pic_send_eoi+0x20>
		outb(PIC1_OCW2, PIC_OCW2_EOI);
   11f37:	6a 20                	push   $0x20
   11f39:	68 a0 00 00 00       	push   $0xa0
   11f3e:	e8 77 f6 ff ff       	call   115ba <outb>
   11f43:	83 c4 08             	add    $0x8,%esp
	}

	outb(PIC0_OCW2, PIC_OCW2_EOI);
   11f46:	6a 20                	push   $0x20
   11f48:	6a 20                	push   $0x20
   11f4a:	e8 6b f6 ff ff       	call   115ba <outb>
   11f4f:	83 c4 08             	add    $0x8,%esp
}
   11f52:	90                   	nop
   11f53:	c9                   	leave  
   11f54:	c3                   	ret    

00011f55 <irq_enter_protection>:


// 进入临界区保护
irq_state_t irq_enter_protection (void) {
   11f55:	f3 0f 1e fb          	endbr32 
   11f59:	55                   	push   %ebp
   11f5a:	89 e5                	mov    %esp,%ebp
   11f5c:	83 ec 10             	sub    $0x10,%esp
	irq_state_t state = read_eflags();
   11f5f:	e8 c5 f6 ff ff       	call   11629 <read_eflags>
   11f64:	89 45 fc             	mov    %eax,-0x4(%ebp)
	irq_disable_global();
   11f67:	e8 9c ff ff ff       	call   11f08 <irq_disable_global>
	return state;
   11f6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11f6f:	c9                   	leave  
   11f70:	c3                   	ret    

00011f71 <irq_leave_protection>:

// 退出临界区保护
void irq_leave_protection (irq_state_t state) {
   11f71:	f3 0f 1e fb          	endbr32 
   11f75:	55                   	push   %ebp
   11f76:	89 e5                	mov    %esp,%ebp
	write_eflags(state);
   11f78:	ff 75 08             	pushl  0x8(%ebp)
   11f7b:	e8 b9 f6 ff ff       	call   11639 <write_eflags>
   11f80:	83 c4 04             	add    $0x4,%esp
   11f83:	90                   	nop
   11f84:	c9                   	leave  
   11f85:	c3                   	ret    

00011f86 <outb>:
static inline void outb (uint16_t port, uint8_t data) {
   11f86:	55                   	push   %ebp
   11f87:	89 e5                	mov    %esp,%ebp
   11f89:	83 ec 08             	sub    $0x8,%esp
   11f8c:	8b 45 08             	mov    0x8(%ebp),%eax
   11f8f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f92:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11f96:	89 d0                	mov    %edx,%eax
   11f98:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11f9b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11f9f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11fa3:	ee                   	out    %al,(%dx)
}
   11fa4:	90                   	nop
   11fa5:	c9                   	leave  
   11fa6:	c3                   	ret    

00011fa7 <do_handler_time>:
#include "os_cfg.h"

static uint32_t sys_tick;


void do_handler_time (exception_frame_t * frame) {
   11fa7:	f3 0f 1e fb          	endbr32 
   11fab:	55                   	push   %ebp
   11fac:	89 e5                	mov    %esp,%ebp
   11fae:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11fb1:	a1 c0 8d 01 00       	mov    0x18dc0,%eax
   11fb6:	83 c0 01             	add    $0x1,%eax
   11fb9:	a3 c0 8d 01 00       	mov    %eax,0x18dc0

    pic_send_eoi(IRQ0_TIMER);    // 告诉系统可以进行下一个进程了
   11fbe:	83 ec 0c             	sub    $0xc,%esp
   11fc1:	6a 20                	push   $0x20
   11fc3:	e8 5e ff ff ff       	call   11f26 <pic_send_eoi>
   11fc8:	83 c4 10             	add    $0x10,%esp
    task_time_tick();       // 做有关任务定时方面的处理
   11fcb:	e8 8a f1 ff ff       	call   1115a <task_time_tick>

}
   11fd0:	90                   	nop
   11fd1:	c9                   	leave  
   11fd2:	c3                   	ret    

00011fd3 <init_pit>:
static void init_pit (void) {
   11fd3:	f3 0f 1e fb          	endbr32 
   11fd7:	55                   	push   %ebp
   11fd8:	89 e5                	mov    %esp,%ebp
   11fda:	83 ec 18             	sub    $0x18,%esp

    uint32_t reload_count =  PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11fdd:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11fe4:	6a 36                	push   $0x36
   11fe6:	6a 43                	push   $0x43
   11fe8:	e8 99 ff ff ff       	call   11f86 <outb>
   11fed:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   11ff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ff3:	0f b6 c0             	movzbl %al,%eax
   11ff6:	50                   	push   %eax
   11ff7:	6a 40                	push   $0x40
   11ff9:	e8 88 ff ff ff       	call   11f86 <outb>
   11ffe:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   12001:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12004:	c1 e8 08             	shr    $0x8,%eax
   12007:	0f b6 c0             	movzbl %al,%eax
   1200a:	50                   	push   %eax
   1200b:	6a 40                	push   $0x40
   1200d:	e8 74 ff ff ff       	call   11f86 <outb>
   12012:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time);
   12015:	83 ec 08             	sub    $0x8,%esp
   12018:	68 89 02 01 00       	push   $0x10289
   1201d:	6a 20                	push   $0x20
   1201f:	e8 8c fd ff ff       	call   11db0 <irq_install>
   12024:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   12027:	83 ec 0c             	sub    $0xc,%esp
   1202a:	6a 20                	push   $0x20
   1202c:	e8 bd fd ff ff       	call   11dee <irq_enable>
   12031:	83 c4 10             	add    $0x10,%esp
}
   12034:	90                   	nop
   12035:	c9                   	leave  
   12036:	c3                   	ret    

00012037 <time_init>:

void time_init (void) {
   12037:	f3 0f 1e fb          	endbr32 
   1203b:	55                   	push   %ebp
   1203c:	89 e5                	mov    %esp,%ebp
   1203e:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   12041:	c7 05 c0 8d 01 00 00 	movl   $0x0,0x18dc0
   12048:	00 00 00 
    init_pit();
   1204b:	e8 83 ff ff ff       	call   11fd3 <init_pit>
}
   12050:	90                   	nop
   12051:	c9                   	leave  
   12052:	c3                   	ret    

00012053 <kernel_init>:


static boot_info_t * init_boot_info;


void kernel_init (boot_info_t * boot_info) {
   12053:	f3 0f 1e fb          	endbr32 
   12057:	55                   	push   %ebp
   12058:	89 e5                	mov    %esp,%ebp
   1205a:	83 ec 08             	sub    $0x8,%esp

    cpu_init();
   1205d:	e8 01 f5 ff ff       	call   11563 <cpu_init>
    log_init();
   12062:	e8 b5 0d 00 00       	call   12e1c <log_init>

    
    memory_init(boot_info);
   12067:	83 ec 0c             	sub    $0xc,%esp
   1206a:	ff 75 08             	pushl  0x8(%ebp)
   1206d:	e8 4d e7 ff ff       	call   107bf <memory_init>
   12072:	83 c4 10             	add    $0x10,%esp


    irq_init();
   12075:	e8 84 fb ff ff       	call   11bfe <irq_init>
    time_init();
   1207a:	e8 b8 ff ff ff       	call   12037 <time_init>
    task_manager_init();
   1207f:	e8 a2 ee ff ff       	call   10f26 <task_manager_init>

}
   12084:	90                   	nop
   12085:	c9                   	leave  
   12086:	c3                   	ret    

00012087 <move_to_first_task>:

void move_to_first_task (void) {
   12087:	f3 0f 1e fb          	endbr32 
   1208b:	55                   	push   %ebp
   1208c:	89 e5                	mov    %esp,%ebp
   1208e:	56                   	push   %esi
   1208f:	53                   	push   %ebx
   12090:	83 ec 10             	sub    $0x10,%esp
    task_t * curr = task_current();
   12093:	e8 f0 ef ff ff       	call   11088 <task_current>
   12098:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   1209b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1209f:	75 19                	jne    120ba <move_to_first_task+0x33>
   120a1:	68 30 37 01 00       	push   $0x13730
   120a6:	68 b8 37 01 00       	push   $0x137b8
   120ab:	6a 24                	push   $0x24
   120ad:	68 3c 37 01 00       	push   $0x1373c
   120b2:	e8 e1 0a 00 00       	call   12b98 <pannic>
   120b7:	83 c4 10             	add    $0x10,%esp

    tss_t * tss = &(curr->tss);
   120ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120bd:	83 c0 48             	add    $0x48,%eax
   120c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"           // EFLAGS
        "push %[cs]\n\t"			// CS
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   120c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120c6:	8b 40 50             	mov    0x50(%eax),%eax
   120c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   120cc:	8b 52 38             	mov    0x38(%edx),%edx
   120cf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   120d2:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip));
   120d5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   120d8:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   120db:	8b 75 f0             	mov    -0x10(%ebp),%esi
   120de:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   120e1:	50                   	push   %eax
   120e2:	52                   	push   %edx
   120e3:	51                   	push   %ecx
   120e4:	53                   	push   %ebx
   120e5:	56                   	push   %esi
   120e6:	cf                   	iret   
    
}
   120e7:	90                   	nop
   120e8:	8d 65 f8             	lea    -0x8(%ebp),%esp
   120eb:	5b                   	pop    %ebx
   120ec:	5e                   	pop    %esi
   120ed:	5d                   	pop    %ebp
   120ee:	c3                   	ret    

000120ef <init_main>:

void init_main (void) {
   120ef:	f3 0f 1e fb          	endbr32 
   120f3:	55                   	push   %ebp
   120f4:	89 e5                	mov    %esp,%ebp
   120f6:	83 ec 08             	sub    $0x8,%esp
    // list_test();

    log_printf("Kernel is running....");
   120f9:	83 ec 0c             	sub    $0xc,%esp
   120fc:	68 83 37 01 00       	push   $0x13783
   12101:	e8 b7 0d 00 00       	call   12ebd <log_printf>
   12106:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s", OS_VERSION);
   12109:	83 ec 08             	sub    $0x8,%esp
   1210c:	68 99 37 01 00       	push   $0x13799
   12111:	68 9f 37 01 00       	push   $0x1379f
   12116:	e8 a2 0d 00 00       	call   12ebd <log_printf>
   1211b:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 1234, -12345, 0x123456, 'a');
   1211e:	83 ec 0c             	sub    $0xc,%esp
   12121:	6a 61                	push   $0x61
   12123:	68 56 34 12 00       	push   $0x123456
   12128:	68 c7 cf ff ff       	push   $0xffffcfc7
   1212d:	68 d2 04 00 00       	push   $0x4d2
   12132:	68 ab 37 01 00       	push   $0x137ab
   12137:	e8 81 0d 00 00       	call   12ebd <log_printf>
   1213c:	83 c4 20             	add    $0x20,%esp

    task_first_init();
   1213f:	e8 00 ed ff ff       	call   10e44 <task_first_init>
    move_to_first_task();
   12144:	e8 3e ff ff ff       	call   12087 <move_to_first_task>

   12149:	90                   	nop
   1214a:	c9                   	leave  
   1214b:	c3                   	ret    

0001214c <list_count>:
static inline int list_count (list_t * list) {
   1214c:	55                   	push   %ebp
   1214d:	89 e5                	mov    %esp,%ebp
    return list->count;
   1214f:	8b 45 08             	mov    0x8(%ebp),%eax
   12152:	8b 40 08             	mov    0x8(%eax),%eax
}
   12155:	5d                   	pop    %ebp
   12156:	c3                   	ret    

00012157 <mutex_init>:
#include "cpu/irq.h"
#include "ipc/mutex.h"



void mutex_init (mutex_t * mutex) {
   12157:	f3 0f 1e fb          	endbr32 
   1215b:	55                   	push   %ebp
   1215c:	89 e5                	mov    %esp,%ebp
   1215e:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   12161:	8b 45 08             	mov    0x8(%ebp),%eax
   12164:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   1216b:	8b 45 08             	mov    0x8(%ebp),%eax
   1216e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   12174:	8b 45 08             	mov    0x8(%ebp),%eax
   12177:	83 c0 08             	add    $0x8,%eax
   1217a:	83 ec 0c             	sub    $0xc,%esp
   1217d:	50                   	push   %eax
   1217e:	e8 62 0a 00 00       	call   12be5 <list_init>
   12183:	83 c4 10             	add    $0x10,%esp
}
   12186:	90                   	nop
   12187:	c9                   	leave  
   12188:	c3                   	ret    

00012189 <mutex_lock>:

// 对互斥锁进行上锁
void mutex_lock (mutex_t * mutex) {
   12189:	f3 0f 1e fb          	endbr32 
   1218d:	55                   	push   %ebp
   1218e:	89 e5                	mov    %esp,%ebp
   12190:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12193:	e8 bd fd ff ff       	call   11f55 <irq_enter_protection>
   12198:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   1219b:	e8 e8 ee ff ff       	call   11088 <task_current>
   121a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   121a3:	8b 45 08             	mov    0x8(%ebp),%eax
   121a6:	8b 40 04             	mov    0x4(%eax),%eax
   121a9:	85 c0                	test   %eax,%eax
   121ab:	75 19                	jne    121c6 <mutex_lock+0x3d>
        mutex->locked_count++;
   121ad:	8b 45 08             	mov    0x8(%ebp),%eax
   121b0:	8b 40 04             	mov    0x4(%eax),%eax
   121b3:	8d 50 01             	lea    0x1(%eax),%edx
   121b6:	8b 45 08             	mov    0x8(%ebp),%eax
   121b9:	89 50 04             	mov    %edx,0x4(%eax)
        mutex->owner = curr;
   121bc:	8b 45 08             	mov    0x8(%ebp),%eax
   121bf:	8b 55 f0             	mov    -0x10(%ebp),%edx
   121c2:	89 10                	mov    %edx,(%eax)
   121c4:	eb 47                	jmp    1220d <mutex_lock+0x84>
    } else if (mutex->owner == curr) {
   121c6:	8b 45 08             	mov    0x8(%ebp),%eax
   121c9:	8b 00                	mov    (%eax),%eax
   121cb:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   121ce:	75 11                	jne    121e1 <mutex_lock+0x58>
        mutex->locked_count++;
   121d0:	8b 45 08             	mov    0x8(%ebp),%eax
   121d3:	8b 40 04             	mov    0x4(%eax),%eax
   121d6:	8d 50 01             	lea    0x1(%eax),%edx
   121d9:	8b 45 08             	mov    0x8(%ebp),%eax
   121dc:	89 50 04             	mov    %edx,0x4(%eax)
   121df:	eb 2c                	jmp    1220d <mutex_lock+0x84>
    } else {
        task_set_block(curr);
   121e1:	83 ec 0c             	sub    $0xc,%esp
   121e4:	ff 75 f0             	pushl  -0x10(%ebp)
   121e7:	e8 26 ee ff ff       	call   11012 <task_set_block>
   121ec:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   121ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121f2:	8d 50 38             	lea    0x38(%eax),%edx
   121f5:	8b 45 08             	mov    0x8(%ebp),%eax
   121f8:	83 c0 08             	add    $0x8,%eax
   121fb:	83 ec 08             	sub    $0x8,%esp
   121fe:	52                   	push   %edx
   121ff:	50                   	push   %eax
   12200:	e8 6c 0a 00 00       	call   12c71 <list_insert_last>
   12205:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12208:	e8 ee ee ff ff       	call   110fb <task_dispatch>
    }

    irq_leave_protection(state);
   1220d:	83 ec 0c             	sub    $0xc,%esp
   12210:	ff 75 f4             	pushl  -0xc(%ebp)
   12213:	e8 59 fd ff ff       	call   11f71 <irq_leave_protection>
   12218:	83 c4 10             	add    $0x10,%esp
}
   1221b:	90                   	nop
   1221c:	c9                   	leave  
   1221d:	c3                   	ret    

0001221e <mutex_unlock>:

// 对互斥锁解锁
void mutex_unlock (mutex_t * mutex) {
   1221e:	f3 0f 1e fb          	endbr32 
   12222:	55                   	push   %ebp
   12223:	89 e5                	mov    %esp,%ebp
   12225:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12228:	e8 28 fd ff ff       	call   11f55 <irq_enter_protection>
   1222d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   12230:	e8 53 ee ff ff       	call   11088 <task_current>
   12235:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   12238:	8b 45 08             	mov    0x8(%ebp),%eax
   1223b:	8b 00                	mov    (%eax),%eax
   1223d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12240:	0f 85 88 00 00 00    	jne    122ce <mutex_unlock+0xb0>
        if (--mutex->locked_count == 0) {
   12246:	8b 45 08             	mov    0x8(%ebp),%eax
   12249:	8b 40 04             	mov    0x4(%eax),%eax
   1224c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1224f:	8b 45 08             	mov    0x8(%ebp),%eax
   12252:	89 50 04             	mov    %edx,0x4(%eax)
   12255:	8b 45 08             	mov    0x8(%ebp),%eax
   12258:	8b 40 04             	mov    0x4(%eax),%eax
   1225b:	85 c0                	test   %eax,%eax
   1225d:	75 6f                	jne    122ce <mutex_unlock+0xb0>
            mutex->owner = (task_t *)0;
   1225f:	8b 45 08             	mov    0x8(%ebp),%eax
   12262:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   12268:	8b 45 08             	mov    0x8(%ebp),%eax
   1226b:	83 c0 08             	add    $0x8,%eax
   1226e:	83 ec 0c             	sub    $0xc,%esp
   12271:	50                   	push   %eax
   12272:	e8 d5 fe ff ff       	call   1214c <list_count>
   12277:	83 c4 10             	add    $0x10,%esp
   1227a:	85 c0                	test   %eax,%eax
   1227c:	74 50                	je     122ce <mutex_unlock+0xb0>
                list_node_t * node = list_remove_first(&mutex->wait_list);
   1227e:	8b 45 08             	mov    0x8(%ebp),%eax
   12281:	83 c0 08             	add    $0x8,%eax
   12284:	83 ec 0c             	sub    $0xc,%esp
   12287:	50                   	push   %eax
   12288:	e8 4b 0a 00 00       	call   12cd8 <list_remove_first>
   1228d:	83 c4 10             	add    $0x10,%esp
   12290:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(node, task_t, wait_node);
   12293:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12297:	74 08                	je     122a1 <mutex_unlock+0x83>
   12299:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1229c:	83 e8 38             	sub    $0x38,%eax
   1229f:	eb 05                	jmp    122a6 <mutex_unlock+0x88>
   122a1:	b8 00 00 00 00       	mov    $0x0,%eax
   122a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   122a9:	83 ec 0c             	sub    $0xc,%esp
   122ac:	ff 75 e8             	pushl  -0x18(%ebp)
   122af:	e8 26 ed ff ff       	call   10fda <task_set_ready>
   122b4:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   122b7:	8b 45 08             	mov    0x8(%ebp),%eax
   122ba:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   122c1:	8b 45 08             	mov    0x8(%ebp),%eax
   122c4:	8b 55 e8             	mov    -0x18(%ebp),%edx
   122c7:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   122c9:	e8 2d ee ff ff       	call   110fb <task_dispatch>
            }
        }
    }


    irq_leave_protection(state);
   122ce:	83 ec 0c             	sub    $0xc,%esp
   122d1:	ff 75 f4             	pushl  -0xc(%ebp)
   122d4:	e8 98 fc ff ff       	call   11f71 <irq_leave_protection>
   122d9:	83 c4 10             	add    $0x10,%esp

   122dc:	90                   	nop
   122dd:	c9                   	leave  
   122de:	c3                   	ret    

000122df <list_count>:
static inline int list_count (list_t * list) {
   122df:	55                   	push   %ebp
   122e0:	89 e5                	mov    %esp,%ebp
    return list->count;
   122e2:	8b 45 08             	mov    0x8(%ebp),%eax
   122e5:	8b 40 08             	mov    0x8(%eax),%eax
}
   122e8:	5d                   	pop    %ebp
   122e9:	c3                   	ret    

000122ea <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init (sem_t * sem, int init_count) {
   122ea:	f3 0f 1e fb          	endbr32 
   122ee:	55                   	push   %ebp
   122ef:	89 e5                	mov    %esp,%ebp
   122f1:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   122f4:	8b 45 08             	mov    0x8(%ebp),%eax
   122f7:	8b 55 0c             	mov    0xc(%ebp),%edx
   122fa:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   122fc:	8b 45 08             	mov    0x8(%ebp),%eax
   122ff:	83 c0 04             	add    $0x4,%eax
   12302:	83 ec 0c             	sub    $0xc,%esp
   12305:	50                   	push   %eax
   12306:	e8 da 08 00 00       	call   12be5 <list_init>
   1230b:	83 c4 10             	add    $0x10,%esp
}
   1230e:	90                   	nop
   1230f:	c9                   	leave  
   12310:	c3                   	ret    

00012311 <sem_wait>:

// 等信号
void sem_wait (sem_t * sem) {
   12311:	f3 0f 1e fb          	endbr32 
   12315:	55                   	push   %ebp
   12316:	89 e5                	mov    %esp,%ebp
   12318:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1231b:	e8 35 fc ff ff       	call   11f55 <irq_enter_protection>
   12320:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   12323:	8b 45 08             	mov    0x8(%ebp),%eax
   12326:	8b 00                	mov    (%eax),%eax
   12328:	85 c0                	test   %eax,%eax
   1232a:	7e 0f                	jle    1233b <sem_wait+0x2a>
        sem->count--;
   1232c:	8b 45 08             	mov    0x8(%ebp),%eax
   1232f:	8b 00                	mov    (%eax),%eax
   12331:	8d 50 ff             	lea    -0x1(%eax),%edx
   12334:	8b 45 08             	mov    0x8(%ebp),%eax
   12337:	89 10                	mov    %edx,(%eax)
   12339:	eb 34                	jmp    1236f <sem_wait+0x5e>
    } else {
        task_t * curr = task_current();
   1233b:	e8 48 ed ff ff       	call   11088 <task_current>
   12340:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   12343:	83 ec 0c             	sub    $0xc,%esp
   12346:	ff 75 f0             	pushl  -0x10(%ebp)
   12349:	e8 c4 ec ff ff       	call   11012 <task_set_block>
   1234e:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   12351:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12354:	8d 50 38             	lea    0x38(%eax),%edx
   12357:	8b 45 08             	mov    0x8(%ebp),%eax
   1235a:	83 c0 04             	add    $0x4,%eax
   1235d:	83 ec 08             	sub    $0x8,%esp
   12360:	52                   	push   %edx
   12361:	50                   	push   %eax
   12362:	e8 0a 09 00 00       	call   12c71 <list_insert_last>
   12367:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1236a:	e8 8c ed ff ff       	call   110fb <task_dispatch>
    }

    irq_leave_protection(state);
   1236f:	83 ec 0c             	sub    $0xc,%esp
   12372:	ff 75 f4             	pushl  -0xc(%ebp)
   12375:	e8 f7 fb ff ff       	call   11f71 <irq_leave_protection>
   1237a:	83 c4 10             	add    $0x10,%esp
}
   1237d:	90                   	nop
   1237e:	c9                   	leave  
   1237f:	c3                   	ret    

00012380 <sem_notify>:

// 发信号
void sem_notify (sem_t * sem) {
   12380:	f3 0f 1e fb          	endbr32 
   12384:	55                   	push   %ebp
   12385:	89 e5                	mov    %esp,%ebp
   12387:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   1238a:	e8 c6 fb ff ff       	call   11f55 <irq_enter_protection>
   1238f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list)) {
   12392:	8b 45 08             	mov    0x8(%ebp),%eax
   12395:	83 c0 04             	add    $0x4,%eax
   12398:	83 ec 0c             	sub    $0xc,%esp
   1239b:	50                   	push   %eax
   1239c:	e8 3e ff ff ff       	call   122df <list_count>
   123a1:	83 c4 10             	add    $0x10,%esp
   123a4:	85 c0                	test   %eax,%eax
   123a6:	74 40                	je     123e8 <sem_notify+0x68>
        list_node_t * node = list_remove_first(&sem->wait_list);
   123a8:	8b 45 08             	mov    0x8(%ebp),%eax
   123ab:	83 c0 04             	add    $0x4,%eax
   123ae:	83 ec 0c             	sub    $0xc,%esp
   123b1:	50                   	push   %eax
   123b2:	e8 21 09 00 00       	call   12cd8 <list_remove_first>
   123b7:	83 c4 10             	add    $0x10,%esp
   123ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent(node, task_t, wait_node);
   123bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   123c1:	74 08                	je     123cb <sem_notify+0x4b>
   123c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   123c6:	83 e8 38             	sub    $0x38,%eax
   123c9:	eb 05                	jmp    123d0 <sem_notify+0x50>
   123cb:	b8 00 00 00 00       	mov    $0x0,%eax
   123d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   123d3:	83 ec 0c             	sub    $0xc,%esp
   123d6:	ff 75 ec             	pushl  -0x14(%ebp)
   123d9:	e8 fc eb ff ff       	call   10fda <task_set_ready>
   123de:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   123e1:	e8 15 ed ff ff       	call   110fb <task_dispatch>
   123e6:	eb 0d                	jmp    123f5 <sem_notify+0x75>
    } else {
        sem->count++;
   123e8:	8b 45 08             	mov    0x8(%ebp),%eax
   123eb:	8b 00                	mov    (%eax),%eax
   123ed:	8d 50 01             	lea    0x1(%eax),%edx
   123f0:	8b 45 08             	mov    0x8(%ebp),%eax
   123f3:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   123f5:	83 ec 0c             	sub    $0xc,%esp
   123f8:	ff 75 f4             	pushl  -0xc(%ebp)
   123fb:	e8 71 fb ff ff       	call   11f71 <irq_leave_protection>
   12400:	83 c4 10             	add    $0x10,%esp
}
   12403:	90                   	nop
   12404:	c9                   	leave  
   12405:	c3                   	ret    

00012406 <sem_count>:

int sem_count (sem_t * sem) {
   12406:	f3 0f 1e fb          	endbr32 
   1240a:	55                   	push   %ebp
   1240b:	89 e5                	mov    %esp,%ebp
   1240d:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   12410:	e8 40 fb ff ff       	call   11f55 <irq_enter_protection>
   12415:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   12418:	8b 45 08             	mov    0x8(%ebp),%eax
   1241b:	8b 00                	mov    (%eax),%eax
   1241d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   12420:	83 ec 0c             	sub    $0xc,%esp
   12423:	ff 75 f4             	pushl  -0xc(%ebp)
   12426:	e8 46 fb ff ff       	call   11f71 <irq_leave_protection>
   1242b:	83 c4 10             	add    $0x10,%esp

    return count;
   1242e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12431:	c9                   	leave  
   12432:	c3                   	ret    

00012433 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"


int bitmap_byte_count(int bit_count) {
   12433:	f3 0f 1e fb          	endbr32 
   12437:	55                   	push   %ebp
   12438:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   1243a:	8b 45 08             	mov    0x8(%ebp),%eax
   1243d:	83 c0 07             	add    $0x7,%eax
   12440:	8d 50 07             	lea    0x7(%eax),%edx
   12443:	85 c0                	test   %eax,%eax
   12445:	0f 48 c2             	cmovs  %edx,%eax
   12448:	c1 f8 03             	sar    $0x3,%eax
}
   1244b:	5d                   	pop    %ebp
   1244c:	c3                   	ret    

0001244d <bitmap_init>:

void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   1244d:	f3 0f 1e fb          	endbr32 
   12451:	55                   	push   %ebp
   12452:	89 e5                	mov    %esp,%ebp
   12454:	83 ec 18             	sub    $0x18,%esp

    bitmap->bit_count = count;
   12457:	8b 45 08             	mov    0x8(%ebp),%eax
   1245a:	8b 55 10             	mov    0x10(%ebp),%edx
   1245d:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1245f:	8b 45 08             	mov    0x8(%ebp),%eax
   12462:	8b 55 0c             	mov    0xc(%ebp),%edx
   12465:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);    // 计算位图需要多少字节表示
   12468:	8b 45 08             	mov    0x8(%ebp),%eax
   1246b:	8b 00                	mov    (%eax),%eax
   1246d:	50                   	push   %eax
   1246e:	e8 c0 ff ff ff       	call   12433 <bitmap_byte_count>
   12473:	83 c4 04             	add    $0x4,%esp
   12476:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF : 0, bytes);
   12479:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1247d:	74 07                	je     12486 <bitmap_init+0x39>
   1247f:	ba ff 00 00 00       	mov    $0xff,%edx
   12484:	eb 05                	jmp    1248b <bitmap_init+0x3e>
   12486:	ba 00 00 00 00       	mov    $0x0,%edx
   1248b:	8b 45 08             	mov    0x8(%ebp),%eax
   1248e:	8b 40 04             	mov    0x4(%eax),%eax
   12491:	83 ec 04             	sub    $0x4,%esp
   12494:	ff 75 f4             	pushl  -0xc(%ebp)
   12497:	52                   	push   %edx
   12498:	50                   	push   %eax
   12499:	e8 ce 03 00 00       	call   1286c <kernel_memset>
   1249e:	83 c4 10             	add    $0x10,%esp

}
   124a1:	90                   	nop
   124a2:	c9                   	leave  
   124a3:	c3                   	ret    

000124a4 <bitmap_get_bit>:

int bitmap_get_bit (bitmap_t * bitmap, int index) {
   124a4:	f3 0f 1e fb          	endbr32 
   124a8:	55                   	push   %ebp
   124a9:	89 e5                	mov    %esp,%ebp
   124ab:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   124ac:	8b 45 08             	mov    0x8(%ebp),%eax
   124af:	8b 50 04             	mov    0x4(%eax),%edx
   124b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   124b5:	8d 48 07             	lea    0x7(%eax),%ecx
   124b8:	85 c0                	test   %eax,%eax
   124ba:	0f 48 c1             	cmovs  %ecx,%eax
   124bd:	c1 f8 03             	sar    $0x3,%eax
   124c0:	01 d0                	add    %edx,%eax
   124c2:	0f b6 00             	movzbl (%eax),%eax
   124c5:	0f b6 d8             	movzbl %al,%ebx
   124c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   124cb:	99                   	cltd   
   124cc:	c1 ea 1d             	shr    $0x1d,%edx
   124cf:	01 d0                	add    %edx,%eax
   124d1:	83 e0 07             	and    $0x7,%eax
   124d4:	29 d0                	sub    %edx,%eax
   124d6:	ba 01 00 00 00       	mov    $0x1,%edx
   124db:	89 c1                	mov    %eax,%ecx
   124dd:	d3 e2                	shl    %cl,%edx
   124df:	89 d0                	mov    %edx,%eax
   124e1:	21 d8                	and    %ebx,%eax
}
   124e3:	5b                   	pop    %ebx
   124e4:	5d                   	pop    %ebp
   124e5:	c3                   	ret    

000124e6 <bitmap_set_bit>:

void bitmap_set_bit (bitmap_t * bitmap, int index, int count,int bit) {
   124e6:	f3 0f 1e fb          	endbr32 
   124ea:	55                   	push   %ebp
   124eb:	89 e5                	mov    %esp,%ebp
   124ed:	56                   	push   %esi
   124ee:	53                   	push   %ebx
   124ef:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i ++ , index++) {
   124f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   124f9:	e9 a4 00 00 00       	jmp    125a2 <bitmap_set_bit+0xbc>
        if (bit) {
   124fe:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12502:	74 4c                	je     12550 <bitmap_set_bit+0x6a>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   12504:	8b 45 08             	mov    0x8(%ebp),%eax
   12507:	8b 50 04             	mov    0x4(%eax),%edx
   1250a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1250d:	8d 48 07             	lea    0x7(%eax),%ecx
   12510:	85 c0                	test   %eax,%eax
   12512:	0f 48 c1             	cmovs  %ecx,%eax
   12515:	c1 f8 03             	sar    $0x3,%eax
   12518:	89 c3                	mov    %eax,%ebx
   1251a:	89 d8                	mov    %ebx,%eax
   1251c:	01 d0                	add    %edx,%eax
   1251e:	0f b6 00             	movzbl (%eax),%eax
   12521:	89 c6                	mov    %eax,%esi
   12523:	8b 45 0c             	mov    0xc(%ebp),%eax
   12526:	99                   	cltd   
   12527:	c1 ea 1d             	shr    $0x1d,%edx
   1252a:	01 d0                	add    %edx,%eax
   1252c:	83 e0 07             	and    $0x7,%eax
   1252f:	29 d0                	sub    %edx,%eax
   12531:	ba 01 00 00 00       	mov    $0x1,%edx
   12536:	89 c1                	mov    %eax,%ecx
   12538:	d3 e2                	shl    %cl,%edx
   1253a:	89 d0                	mov    %edx,%eax
   1253c:	89 f1                	mov    %esi,%ecx
   1253e:	09 c1                	or     %eax,%ecx
   12540:	8b 45 08             	mov    0x8(%ebp),%eax
   12543:	8b 40 04             	mov    0x4(%eax),%eax
   12546:	89 da                	mov    %ebx,%edx
   12548:	01 d0                	add    %edx,%eax
   1254a:	89 ca                	mov    %ecx,%edx
   1254c:	88 10                	mov    %dl,(%eax)
   1254e:	eb 4a                	jmp    1259a <bitmap_set_bit+0xb4>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12550:	8b 45 08             	mov    0x8(%ebp),%eax
   12553:	8b 50 04             	mov    0x4(%eax),%edx
   12556:	8b 45 0c             	mov    0xc(%ebp),%eax
   12559:	8d 48 07             	lea    0x7(%eax),%ecx
   1255c:	85 c0                	test   %eax,%eax
   1255e:	0f 48 c1             	cmovs  %ecx,%eax
   12561:	c1 f8 03             	sar    $0x3,%eax
   12564:	89 c3                	mov    %eax,%ebx
   12566:	89 d8                	mov    %ebx,%eax
   12568:	01 d0                	add    %edx,%eax
   1256a:	0f b6 00             	movzbl (%eax),%eax
   1256d:	89 c6                	mov    %eax,%esi
   1256f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12572:	99                   	cltd   
   12573:	c1 ea 1d             	shr    $0x1d,%edx
   12576:	01 d0                	add    %edx,%eax
   12578:	83 e0 07             	and    $0x7,%eax
   1257b:	29 d0                	sub    %edx,%eax
   1257d:	ba 01 00 00 00       	mov    $0x1,%edx
   12582:	89 c1                	mov    %eax,%ecx
   12584:	d3 e2                	shl    %cl,%edx
   12586:	89 d0                	mov    %edx,%eax
   12588:	f7 d0                	not    %eax
   1258a:	89 f2                	mov    %esi,%edx
   1258c:	21 c2                	and    %eax,%edx
   1258e:	8b 45 08             	mov    0x8(%ebp),%eax
   12591:	8b 40 04             	mov    0x4(%eax),%eax
   12594:	89 d9                	mov    %ebx,%ecx
   12596:	01 c8                	add    %ecx,%eax
   12598:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i ++ , index++) {
   1259a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1259e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   125a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   125a5:	3b 45 10             	cmp    0x10(%ebp),%eax
   125a8:	7d 0e                	jge    125b8 <bitmap_set_bit+0xd2>
   125aa:	8b 45 08             	mov    0x8(%ebp),%eax
   125ad:	8b 00                	mov    (%eax),%eax
   125af:	39 45 0c             	cmp    %eax,0xc(%ebp)
   125b2:	0f 8c 46 ff ff ff    	jl     124fe <bitmap_set_bit+0x18>
        }
    }
}
   125b8:	90                   	nop
   125b9:	83 c4 10             	add    $0x10,%esp
   125bc:	5b                   	pop    %ebx
   125bd:	5e                   	pop    %esi
   125be:	5d                   	pop    %ebp
   125bf:	c3                   	ret    

000125c0 <bitmap_is_set>:

int bitmap_is_set (bitmap_t * bitmap, int index) {
   125c0:	f3 0f 1e fb          	endbr32 
   125c4:	55                   	push   %ebp
   125c5:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   125c7:	ff 75 0c             	pushl  0xc(%ebp)
   125ca:	ff 75 08             	pushl  0x8(%ebp)
   125cd:	e8 d2 fe ff ff       	call   124a4 <bitmap_get_bit>
   125d2:	83 c4 08             	add    $0x8,%esp
   125d5:	85 c0                	test   %eax,%eax
   125d7:	0f 95 c0             	setne  %al
   125da:	0f b6 c0             	movzbl %al,%eax
}
   125dd:	c9                   	leave  
   125de:	c3                   	ret    

000125df <bitmap_alloc_nbits>:

int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   125df:	f3 0f 1e fb          	endbr32 
   125e3:	55                   	push   %ebp
   125e4:	89 e5                	mov    %esp,%ebp
   125e6:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   125e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   125f0:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   125f7:	e9 85 00 00 00       	jmp    12681 <bitmap_alloc_nbits+0xa2>
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   125fc:	ff 75 fc             	pushl  -0x4(%ebp)
   125ff:	ff 75 08             	pushl  0x8(%ebp)
   12602:	e8 9d fe ff ff       	call   124a4 <bitmap_get_bit>
   12607:	83 c4 08             	add    $0x8,%esp
   1260a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1260d:	74 06                	je     12615 <bitmap_alloc_nbits+0x36>
            search_idx++;
   1260f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   12613:	eb 6c                	jmp    12681 <bitmap_alloc_nbits+0xa2>
        }

        ok_index = search_idx;
   12615:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12618:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++ ) {
   1261b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12622:	eb 27                	jmp    1264b <bitmap_alloc_nbits+0x6c>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   12624:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12627:	8d 50 01             	lea    0x1(%eax),%edx
   1262a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1262d:	50                   	push   %eax
   1262e:	ff 75 08             	pushl  0x8(%ebp)
   12631:	e8 6e fe ff ff       	call   124a4 <bitmap_get_bit>
   12636:	83 c4 08             	add    $0x8,%esp
   12639:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1263c:	74 09                	je     12647 <bitmap_alloc_nbits+0x68>
                ok_index = -1;
   1263e:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   12645:	eb 16                	jmp    1265d <bitmap_alloc_nbits+0x7e>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++ ) {
   12647:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1264b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1264e:	3b 45 10             	cmp    0x10(%ebp),%eax
   12651:	7d 0a                	jge    1265d <bitmap_alloc_nbits+0x7e>
   12653:	8b 45 08             	mov    0x8(%ebp),%eax
   12656:	8b 00                	mov    (%eax),%eax
   12658:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1265b:	7c c7                	jl     12624 <bitmap_alloc_nbits+0x45>
            }
        }

        if (i >= count) {
   1265d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12660:	3b 45 10             	cmp    0x10(%ebp),%eax
   12663:	7c 1c                	jl     12681 <bitmap_alloc_nbits+0xa2>
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12665:	8b 45 0c             	mov    0xc(%ebp),%eax
   12668:	f7 d0                	not    %eax
   1266a:	50                   	push   %eax
   1266b:	ff 75 10             	pushl  0x10(%ebp)
   1266e:	ff 75 f8             	pushl  -0x8(%ebp)
   12671:	ff 75 08             	pushl  0x8(%ebp)
   12674:	e8 6d fe ff ff       	call   124e6 <bitmap_set_bit>
   12679:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   1267c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1267f:	eb 13                	jmp    12694 <bitmap_alloc_nbits+0xb5>
    while (search_idx < bitmap->bit_count) {
   12681:	8b 45 08             	mov    0x8(%ebp),%eax
   12684:	8b 00                	mov    (%eax),%eax
   12686:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12689:	0f 8c 6d ff ff ff    	jl     125fc <bitmap_alloc_nbits+0x1d>
        }

    }

    return -1;
   1268f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   12694:	c9                   	leave  
   12695:	c3                   	ret    

00012696 <hlt>:
static inline void hlt (void) {
   12696:	55                   	push   %ebp
   12697:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12699:	f4                   	hlt    
}
   1269a:	90                   	nop
   1269b:	5d                   	pop    %ebp
   1269c:	c3                   	ret    

0001269d <kernel_strcpy>:
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

// 字符串复制
void kernel_strcpy(char * dest, const char * src) {
   1269d:	f3 0f 1e fb          	endbr32 
   126a1:	55                   	push   %ebp
   126a2:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   126a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126a8:	74 3b                	je     126e5 <kernel_strcpy+0x48>
   126aa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126ae:	74 35                	je     126e5 <kernel_strcpy+0x48>
        return;
    }

    while (*dest && *src) {
   126b0:	eb 17                	jmp    126c9 <kernel_strcpy+0x2c>
        *dest++ = *src++;
   126b2:	8b 55 0c             	mov    0xc(%ebp),%edx
   126b5:	8d 42 01             	lea    0x1(%edx),%eax
   126b8:	89 45 0c             	mov    %eax,0xc(%ebp)
   126bb:	8b 45 08             	mov    0x8(%ebp),%eax
   126be:	8d 48 01             	lea    0x1(%eax),%ecx
   126c1:	89 4d 08             	mov    %ecx,0x8(%ebp)
   126c4:	0f b6 12             	movzbl (%edx),%edx
   126c7:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   126c9:	8b 45 08             	mov    0x8(%ebp),%eax
   126cc:	0f b6 00             	movzbl (%eax),%eax
   126cf:	84 c0                	test   %al,%al
   126d1:	74 0a                	je     126dd <kernel_strcpy+0x40>
   126d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   126d6:	0f b6 00             	movzbl (%eax),%eax
   126d9:	84 c0                	test   %al,%al
   126db:	75 d5                	jne    126b2 <kernel_strcpy+0x15>
    }

    *dest = '\0';  // 结束字符
   126dd:	8b 45 08             	mov    0x8(%ebp),%eax
   126e0:	c6 00 00             	movb   $0x0,(%eax)
   126e3:	eb 01                	jmp    126e6 <kernel_strcpy+0x49>
        return;
   126e5:	90                   	nop
}
   126e6:	5d                   	pop    %ebp
   126e7:	c3                   	ret    

000126e8 <kernel_strncpy>:

// 字符串复制
void kernel_strncpy(char * dest, const char * src, int size) {
   126e8:	f3 0f 1e fb          	endbr32 
   126ec:	55                   	push   %ebp
   126ed:	89 e5                	mov    %esp,%ebp
   126ef:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   126f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126f6:	74 61                	je     12759 <kernel_strncpy+0x71>
   126f8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126fc:	74 5b                	je     12759 <kernel_strncpy+0x71>
   126fe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12702:	74 55                	je     12759 <kernel_strncpy+0x71>
        return;
    }

    char * d = dest;
   12704:	8b 45 08             	mov    0x8(%ebp),%eax
   12707:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   1270a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1270d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while((size-- > 0) && (*s)) {
   12710:	eb 17                	jmp    12729 <kernel_strncpy+0x41>
        *d++ = *s++;
   12712:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12715:	8d 42 01             	lea    0x1(%edx),%eax
   12718:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1271b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1271e:	8d 48 01             	lea    0x1(%eax),%ecx
   12721:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12724:	0f b6 12             	movzbl (%edx),%edx
   12727:	88 10                	mov    %dl,(%eax)
    while((size-- > 0) && (*s)) {
   12729:	8b 45 10             	mov    0x10(%ebp),%eax
   1272c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1272f:	89 55 10             	mov    %edx,0x10(%ebp)
   12732:	85 c0                	test   %eax,%eax
   12734:	7e 0a                	jle    12740 <kernel_strncpy+0x58>
   12736:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12739:	0f b6 00             	movzbl (%eax),%eax
   1273c:	84 c0                	test   %al,%al
   1273e:	75 d2                	jne    12712 <kernel_strncpy+0x2a>
    }

    if (size == 0) {
   12740:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12744:	75 0b                	jne    12751 <kernel_strncpy+0x69>
        *(d - 1) = '\0';
   12746:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12749:	83 e8 01             	sub    $0x1,%eax
   1274c:	c6 00 00             	movb   $0x0,(%eax)
   1274f:	eb 09                	jmp    1275a <kernel_strncpy+0x72>
    } else {
        *d = '\0';
   12751:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12754:	c6 00 00             	movb   $0x0,(%eax)
   12757:	eb 01                	jmp    1275a <kernel_strncpy+0x72>
        return;
   12759:	90                   	nop
    }

}
   1275a:	c9                   	leave  
   1275b:	c3                   	ret    

0001275c <kernel_strncmp>:

// 字符串比较
int kernel_strncmp(const char * s1, const char * s2, int size) {
   1275c:	f3 0f 1e fb          	endbr32 
   12760:	55                   	push   %ebp
   12761:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   12763:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12767:	74 06                	je     1276f <kernel_strncmp+0x13>
   12769:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1276d:	75 0f                	jne    1277e <kernel_strncmp+0x22>
        return -1;
   1276f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12774:	eb 62                	jmp    127d8 <kernel_strncmp+0x7c>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   12776:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   1277a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   1277e:	8b 45 08             	mov    0x8(%ebp),%eax
   12781:	0f b6 00             	movzbl (%eax),%eax
   12784:	84 c0                	test   %al,%al
   12786:	74 20                	je     127a8 <kernel_strncmp+0x4c>
   12788:	8b 45 0c             	mov    0xc(%ebp),%eax
   1278b:	0f b6 00             	movzbl (%eax),%eax
   1278e:	84 c0                	test   %al,%al
   12790:	74 16                	je     127a8 <kernel_strncmp+0x4c>
   12792:	8b 45 08             	mov    0x8(%ebp),%eax
   12795:	0f b6 10             	movzbl (%eax),%edx
   12798:	8b 45 0c             	mov    0xc(%ebp),%eax
   1279b:	0f b6 00             	movzbl (%eax),%eax
   1279e:	38 c2                	cmp    %al,%dl
   127a0:	75 06                	jne    127a8 <kernel_strncmp+0x4c>
   127a2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   127a6:	75 ce                	jne    12776 <kernel_strncmp+0x1a>
    }

    // s1 = "abc"
    // s2 = "abcdef"  这样认为相同，比到长度最小的看想不相同，这里是这样实现的。

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   127a8:	8b 45 08             	mov    0x8(%ebp),%eax
   127ab:	0f b6 00             	movzbl (%eax),%eax
   127ae:	84 c0                	test   %al,%al
   127b0:	74 21                	je     127d3 <kernel_strncmp+0x77>
   127b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   127b5:	0f b6 00             	movzbl (%eax),%eax
   127b8:	84 c0                	test   %al,%al
   127ba:	74 17                	je     127d3 <kernel_strncmp+0x77>
   127bc:	8b 45 08             	mov    0x8(%ebp),%eax
   127bf:	0f b6 10             	movzbl (%eax),%edx
   127c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   127c5:	0f b6 00             	movzbl (%eax),%eax
   127c8:	38 c2                	cmp    %al,%dl
   127ca:	74 07                	je     127d3 <kernel_strncmp+0x77>
   127cc:	b8 01 00 00 00       	mov    $0x1,%eax
   127d1:	eb 05                	jmp    127d8 <kernel_strncmp+0x7c>
   127d3:	b8 00 00 00 00       	mov    $0x0,%eax

}
   127d8:	5d                   	pop    %ebp
   127d9:	c3                   	ret    

000127da <kernel_strlen>:

// 求字符串长度
int kernel_strlen(const char * str) {
   127da:	f3 0f 1e fb          	endbr32 
   127de:	55                   	push   %ebp
   127df:	89 e5                	mov    %esp,%ebp
   127e1:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   127e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127e8:	75 07                	jne    127f1 <kernel_strlen+0x17>
        return 0;
   127ea:	b8 00 00 00 00       	mov    $0x0,%eax
   127ef:	eb 26                	jmp    12817 <kernel_strlen+0x3d>
    }

    const char * c = str;
   127f1:	8b 45 08             	mov    0x8(%ebp),%eax
   127f4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   127f7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while(*c++) {
   127fe:	eb 04                	jmp    12804 <kernel_strlen+0x2a>
        len++;
   12800:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(*c++) {
   12804:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12807:	8d 50 01             	lea    0x1(%eax),%edx
   1280a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1280d:	0f b6 00             	movzbl (%eax),%eax
   12810:	84 c0                	test   %al,%al
   12812:	75 ec                	jne    12800 <kernel_strlen+0x26>
    }

    return len;
   12814:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   12817:	c9                   	leave  
   12818:	c3                   	ret    

00012819 <kernel_memcpy>:


void kernel_memcpy(void * dest, void * src, int size) {
   12819:	f3 0f 1e fb          	endbr32 
   1281d:	55                   	push   %ebp
   1281e:	89 e5                	mov    %esp,%ebp
   12820:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   12823:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12827:	74 40                	je     12869 <kernel_memcpy+0x50>
   12829:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1282d:	74 3a                	je     12869 <kernel_memcpy+0x50>
   1282f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12833:	74 34                	je     12869 <kernel_memcpy+0x50>
        return;
    }

    uint8_t * s = (uint8_t *)src;
   12835:	8b 45 0c             	mov    0xc(%ebp),%eax
   12838:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   1283b:	8b 45 08             	mov    0x8(%ebp),%eax
   1283e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   12841:	eb 17                	jmp    1285a <kernel_memcpy+0x41>
        *d++ = *s++;
   12843:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12846:	8d 42 01             	lea    0x1(%edx),%eax
   12849:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1284c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1284f:	8d 48 01             	lea    0x1(%eax),%ecx
   12852:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12855:	0f b6 12             	movzbl (%edx),%edx
   12858:	88 10                	mov    %dl,(%eax)
    while(size--) {
   1285a:	8b 45 10             	mov    0x10(%ebp),%eax
   1285d:	8d 50 ff             	lea    -0x1(%eax),%edx
   12860:	89 55 10             	mov    %edx,0x10(%ebp)
   12863:	85 c0                	test   %eax,%eax
   12865:	75 dc                	jne    12843 <kernel_memcpy+0x2a>
   12867:	eb 01                	jmp    1286a <kernel_memcpy+0x51>
        return;
   12869:	90                   	nop
    }
}
   1286a:	c9                   	leave  
   1286b:	c3                   	ret    

0001286c <kernel_memset>:

void kernel_memset(void * dest, uint8_t v, int size) {
   1286c:	f3 0f 1e fb          	endbr32 
   12870:	55                   	push   %ebp
   12871:	89 e5                	mov    %esp,%ebp
   12873:	83 ec 14             	sub    $0x14,%esp
   12876:	8b 45 0c             	mov    0xc(%ebp),%eax
   12879:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   1287c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12880:	74 2c                	je     128ae <kernel_memset+0x42>
   12882:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12886:	74 26                	je     128ae <kernel_memset+0x42>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   12888:	8b 45 08             	mov    0x8(%ebp),%eax
   1288b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size --) {
   1288e:	eb 0f                	jmp    1289f <kernel_memset+0x33>
        *d++ = v;
   12890:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12893:	8d 50 01             	lea    0x1(%eax),%edx
   12896:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12899:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1289d:	88 10                	mov    %dl,(%eax)
    while(size --) {
   1289f:	8b 45 10             	mov    0x10(%ebp),%eax
   128a2:	8d 50 ff             	lea    -0x1(%eax),%edx
   128a5:	89 55 10             	mov    %edx,0x10(%ebp)
   128a8:	85 c0                	test   %eax,%eax
   128aa:	75 e4                	jne    12890 <kernel_memset+0x24>
   128ac:	eb 01                	jmp    128af <kernel_memset+0x43>
        return;
   128ae:	90                   	nop
    }

}
   128af:	c9                   	leave  
   128b0:	c3                   	ret    

000128b1 <kernel_memcmp>:
int kernel_memcmp(void * d1, void * d2, int size) {
   128b1:	f3 0f 1e fb          	endbr32 
   128b5:	55                   	push   %ebp
   128b6:	89 e5                	mov    %esp,%ebp
   128b8:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   128bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128bf:	74 0c                	je     128cd <kernel_memcmp+0x1c>
   128c1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128c5:	74 06                	je     128cd <kernel_memcmp+0x1c>
   128c7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   128cb:	75 07                	jne    128d4 <kernel_memcmp+0x23>
        return 1;
   128cd:	b8 01 00 00 00       	mov    $0x1,%eax
   128d2:	eb 43                	jmp    12917 <kernel_memcmp+0x66>
    }

    uint8_t * p_d1 = (uint8_t *)d1;
   128d4:	8b 45 08             	mov    0x8(%ebp),%eax
   128d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * p_d2 = (uint8_t *)d2;
   128da:	8b 45 0c             	mov    0xc(%ebp),%eax
   128dd:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   128e0:	eb 23                	jmp    12905 <kernel_memcmp+0x54>
        if (*p_d1++ != *p_d2++) {
   128e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128e5:	8d 50 01             	lea    0x1(%eax),%edx
   128e8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128eb:	0f b6 08             	movzbl (%eax),%ecx
   128ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128f1:	8d 50 01             	lea    0x1(%eax),%edx
   128f4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   128f7:	0f b6 00             	movzbl (%eax),%eax
   128fa:	38 c1                	cmp    %al,%cl
   128fc:	74 07                	je     12905 <kernel_memcmp+0x54>
            return 1;
   128fe:	b8 01 00 00 00       	mov    $0x1,%eax
   12903:	eb 12                	jmp    12917 <kernel_memcmp+0x66>
    while(size--) {
   12905:	8b 45 10             	mov    0x10(%ebp),%eax
   12908:	8d 50 ff             	lea    -0x1(%eax),%edx
   1290b:	89 55 10             	mov    %edx,0x10(%ebp)
   1290e:	85 c0                	test   %eax,%eax
   12910:	75 d0                	jne    128e2 <kernel_memcmp+0x31>
        }
    }

    return 0;
   12912:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12917:	c9                   	leave  
   12918:	c3                   	ret    

00012919 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   12919:	f3 0f 1e fb          	endbr32 
   1291d:	55                   	push   %ebp
   1291e:	89 e5                	mov    %esp,%ebp
   12920:	83 ec 10             	sub    $0x10,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   12923:	8b 45 08             	mov    0x8(%ebp),%eax
   12926:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   12929:	8b 45 0c             	mov    0xc(%ebp),%eax
   1292c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   1292f:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12933:	74 1d                	je     12952 <kernel_itoa+0x39>
   12935:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12939:	74 17                	je     12952 <kernel_itoa+0x39>
   1293b:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1293f:	74 11                	je     12952 <kernel_itoa+0x39>
   12941:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12945:	74 0b                	je     12952 <kernel_itoa+0x39>
        *p = '\0';
   12947:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1294a:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1294d:	e9 a2 00 00 00       	jmp    129f4 <kernel_itoa+0xdb>
    }

    if ((num < 0) && (base == 10)) {
   12952:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12956:	79 12                	jns    1296a <kernel_itoa+0x51>
   12958:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1295c:	75 0c                	jne    1296a <kernel_itoa+0x51>
        *p++ = '-';
   1295e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12961:	8d 50 01             	lea    0x1(%eax),%edx
   12964:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12967:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    // 一位一位的转换
    do {
        char ch = num2ch[num % base + 15];
   1296a:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12970:	8b 45 0c             	mov    0xc(%ebp),%eax
   12973:	99                   	cltd   
   12974:	f7 7d 10             	idivl  0x10(%ebp)
   12977:	89 d0                	mov    %edx,%eax
   12979:	83 c0 0f             	add    $0xf,%eax
   1297c:	01 c8                	add    %ecx,%eax
   1297e:	0f b6 00             	movzbl (%eax),%eax
   12981:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   12984:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12987:	8d 50 01             	lea    0x1(%eax),%edx
   1298a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1298d:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   12991:	88 10                	mov    %dl,(%eax)
        num /= base;
   12993:	8b 45 0c             	mov    0xc(%ebp),%eax
   12996:	99                   	cltd   
   12997:	f7 7d 10             	idivl  0x10(%ebp)
   1299a:	89 45 0c             	mov    %eax,0xc(%ebp)
    }while(num);
   1299d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129a1:	75 c7                	jne    1296a <kernel_itoa+0x51>

    *p-- = '\0';
   129a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129a6:	8d 50 ff             	lea    -0x1(%eax),%edx
   129a9:	89 55 fc             	mov    %edx,-0x4(%ebp)
   129ac:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (old_num > 0) ? buf : buf + 1;
   129af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   129b3:	7f 08                	jg     129bd <kernel_itoa+0xa4>
   129b5:	8b 45 08             	mov    0x8(%ebp),%eax
   129b8:	83 c0 01             	add    $0x1,%eax
   129bb:	eb 03                	jmp    129c0 <kernel_itoa+0xa7>
   129bd:	8b 45 08             	mov    0x8(%ebp),%eax
   129c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p) {
   129c3:	eb 27                	jmp    129ec <kernel_itoa+0xd3>
        char ch = *start;
   129c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129c8:	0f b6 00             	movzbl (%eax),%eax
   129cb:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   129ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129d1:	0f b6 10             	movzbl (%eax),%edx
   129d4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129d7:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   129d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129dc:	8d 50 ff             	lea    -0x1(%eax),%edx
   129df:	89 55 fc             	mov    %edx,-0x4(%ebp)
   129e2:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   129e6:	88 10                	mov    %dl,(%eax)
        start++;
   129e8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p) {
   129ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129ef:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   129f2:	72 d1                	jb     129c5 <kernel_itoa+0xac>
    }
}
   129f4:	c9                   	leave  
   129f5:	c3                   	ret    

000129f6 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buffer, const char * fmt, ...) {
   129f6:	f3 0f 1e fb          	endbr32 
   129fa:	55                   	push   %ebp
   129fb:	89 e5                	mov    %esp,%ebp
   129fd:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args, fmt);
   12a00:	8d 45 10             	lea    0x10(%ebp),%eax
   12a03:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buffer, fmt, args);
   12a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12a09:	83 ec 04             	sub    $0x4,%esp
   12a0c:	50                   	push   %eax
   12a0d:	ff 75 0c             	pushl  0xc(%ebp)
   12a10:	ff 75 08             	pushl  0x8(%ebp)
   12a13:	e8 06 00 00 00       	call   12a1e <kernel_vsprintf>
   12a18:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12a1b:	90                   	nop
   12a1c:	c9                   	leave  
   12a1d:	c3                   	ret    

00012a1e <kernel_vsprintf>:


/**
 * 格式化字符串
 */
void kernel_vsprintf(char * buffer, const char * fmt, va_list args) {
   12a1e:	f3 0f 1e fb          	endbr32 
   12a22:	55                   	push   %ebp
   12a23:	89 e5                	mov    %esp,%ebp
   12a25:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   12a28:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char * curr = buffer;
   12a2f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a32:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   12a35:	e9 41 01 00 00       	jmp    12b7b <kernel_vsprintf+0x15d>
        switch (state) {
   12a3a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   12a3e:	74 0b                	je     12a4b <kernel_vsprintf+0x2d>
   12a40:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   12a44:	74 55                	je     12a9b <kernel_vsprintf+0x7d>
   12a46:	e9 30 01 00 00       	jmp    12b7b <kernel_vsprintf+0x15d>
            // 普通字符
            case NORMAL:
                if (ch == '%') {
   12a4b:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   12a4f:	75 0c                	jne    12a5d <kernel_vsprintf+0x3f>
                    state = READ_FMT;
   12a51:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12a58:	e9 1e 01 00 00       	jmp    12b7b <kernel_vsprintf+0x15d>
                } else if ((int)ch == 10) {
   12a5d:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   12a61:	75 24                	jne    12a87 <kernel_vsprintf+0x69>
                    // 换行\n
                    *curr++ = '\r';
   12a63:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a66:	8d 50 01             	lea    0x1(%eax),%edx
   12a69:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a6c:	c6 00 0d             	movb   $0xd,(%eax)
                    *curr++ = '\n';
   12a6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a72:	8d 50 01             	lea    0x1(%eax),%edx
   12a75:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a78:	c6 00 0a             	movb   $0xa,(%eax)
                    state = NORMAL;
   12a7b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   12a82:	e9 f4 00 00 00       	jmp    12b7b <kernel_vsprintf+0x15d>
                }
                else {
                    *curr++ = ch;
   12a87:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a8a:	8d 50 01             	lea    0x1(%eax),%edx
   12a8d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a90:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12a94:	88 10                	mov    %dl,(%eax)
                }
                break;
   12a96:	e9 e0 00 00 00       	jmp    12b7b <kernel_vsprintf+0x15d>
            // 格式化控制字符，只支持部分
            case READ_FMT:
                if (ch == 'd') {
   12a9b:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12a9f:	75 31                	jne    12ad2 <kernel_vsprintf+0xb4>
                    int num = va_arg(args, int);
   12aa1:	8b 45 10             	mov    0x10(%ebp),%eax
   12aa4:	8d 50 04             	lea    0x4(%eax),%edx
   12aa7:	89 55 10             	mov    %edx,0x10(%ebp)
   12aaa:	8b 00                	mov    (%eax),%eax
   12aac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr, num, 10);
   12aaf:	6a 0a                	push   $0xa
   12ab1:	ff 75 e4             	pushl  -0x1c(%ebp)
   12ab4:	ff 75 f8             	pushl  -0x8(%ebp)
   12ab7:	e8 5d fe ff ff       	call   12919 <kernel_itoa>
   12abc:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   12abf:	ff 75 f8             	pushl  -0x8(%ebp)
   12ac2:	e8 13 fd ff ff       	call   127da <kernel_strlen>
   12ac7:	83 c4 04             	add    $0x4,%esp
   12aca:	01 45 f8             	add    %eax,-0x8(%ebp)
   12acd:	e9 a1 00 00 00       	jmp    12b73 <kernel_vsprintf+0x155>

                } else if (ch == 'x') {
   12ad2:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12ad6:	75 2e                	jne    12b06 <kernel_vsprintf+0xe8>
                    int num = va_arg(args, int);
   12ad8:	8b 45 10             	mov    0x10(%ebp),%eax
   12adb:	8d 50 04             	lea    0x4(%eax),%edx
   12ade:	89 55 10             	mov    %edx,0x10(%ebp)
   12ae1:	8b 00                	mov    (%eax),%eax
   12ae3:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr, num, 16);
   12ae6:	6a 10                	push   $0x10
   12ae8:	ff 75 e8             	pushl  -0x18(%ebp)
   12aeb:	ff 75 f8             	pushl  -0x8(%ebp)
   12aee:	e8 26 fe ff ff       	call   12919 <kernel_itoa>
   12af3:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   12af6:	ff 75 f8             	pushl  -0x8(%ebp)
   12af9:	e8 dc fc ff ff       	call   127da <kernel_strlen>
   12afe:	83 c4 04             	add    $0x4,%esp
   12b01:	01 45 f8             	add    %eax,-0x8(%ebp)
   12b04:	eb 6d                	jmp    12b73 <kernel_vsprintf+0x155>

                } else if (ch == 'c') {
   12b06:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12b0a:	75 1f                	jne    12b2b <kernel_vsprintf+0x10d>
                    char c = va_arg(args, int);
   12b0c:	8b 45 10             	mov    0x10(%ebp),%eax
   12b0f:	8d 50 04             	lea    0x4(%eax),%edx
   12b12:	89 55 10             	mov    %edx,0x10(%ebp)
   12b15:	8b 00                	mov    (%eax),%eax
   12b17:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   12b1a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b1d:	8d 50 01             	lea    0x1(%eax),%edx
   12b20:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12b23:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12b27:	88 10                	mov    %dl,(%eax)
   12b29:	eb 48                	jmp    12b73 <kernel_vsprintf+0x155>
                    
                } else if (ch == 's') {
   12b2b:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12b2f:	75 42                	jne    12b73 <kernel_vsprintf+0x155>
                    const char * str = va_arg(args, char *);
   12b31:	8b 45 10             	mov    0x10(%ebp),%eax
   12b34:	8d 50 04             	lea    0x4(%eax),%edx
   12b37:	89 55 10             	mov    %edx,0x10(%ebp)
   12b3a:	8b 00                	mov    (%eax),%eax
   12b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   12b3f:	ff 75 f4             	pushl  -0xc(%ebp)
   12b42:	e8 93 fc ff ff       	call   127da <kernel_strlen>
   12b47:	83 c4 04             	add    $0x4,%esp
   12b4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while (len--) {
   12b4d:	eb 17                	jmp    12b66 <kernel_vsprintf+0x148>
                        *curr++ = *str++;
   12b4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12b52:	8d 42 01             	lea    0x1(%edx),%eax
   12b55:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12b58:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b5b:	8d 48 01             	lea    0x1(%eax),%ecx
   12b5e:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12b61:	0f b6 12             	movzbl (%edx),%edx
   12b64:	88 10                	mov    %dl,(%eax)
                    while (len--) {
   12b66:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b69:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b6c:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12b6f:	85 c0                	test   %eax,%eax
   12b71:	75 dc                	jne    12b4f <kernel_vsprintf+0x131>
                    }
                }

                state = NORMAL;
   12b73:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   12b7a:	90                   	nop
    while ((ch = *fmt++)) {
   12b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b7e:	8d 50 01             	lea    0x1(%eax),%edx
   12b81:	89 55 0c             	mov    %edx,0xc(%ebp)
   12b84:	0f b6 00             	movzbl (%eax),%eax
   12b87:	88 45 ef             	mov    %al,-0x11(%ebp)
   12b8a:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12b8e:	0f 85 a6 fe ff ff    	jne    12a3a <kernel_vsprintf+0x1c>
        }
    }
}
   12b94:	90                   	nop
   12b95:	90                   	nop
   12b96:	c9                   	leave  
   12b97:	c3                   	ret    

00012b98 <pannic>:



 void pannic(const char * file, int line, const char * func, const char * cond) {
   12b98:	f3 0f 1e fb          	endbr32 
   12b9c:	55                   	push   %ebp
   12b9d:	89 e5                	mov    %esp,%ebp
   12b9f:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   12ba2:	83 ec 08             	sub    $0x8,%esp
   12ba5:	ff 75 14             	pushl  0x14(%ebp)
   12ba8:	68 cc 37 01 00       	push   $0x137cc
   12bad:	e8 0b 03 00 00       	call   12ebd <log_printf>
   12bb2:	83 c4 10             	add    $0x10,%esp
    log_printf("file:%s\nline:%d\nfunc:%s", file, line, func);
   12bb5:	ff 75 10             	pushl  0x10(%ebp)
   12bb8:	ff 75 0c             	pushl  0xc(%ebp)
   12bbb:	ff 75 08             	pushl  0x8(%ebp)
   12bbe:	68 de 37 01 00       	push   $0x137de
   12bc3:	e8 f5 02 00 00       	call   12ebd <log_printf>
   12bc8:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12bcb:	e8 c6 fa ff ff       	call   12696 <hlt>
   12bd0:	eb f9                	jmp    12bcb <pannic+0x33>

00012bd2 <list_is_empty>:
static inline int list_is_empty (list_t * list) {
   12bd2:	55                   	push   %ebp
   12bd3:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12bd5:	8b 45 08             	mov    0x8(%ebp),%eax
   12bd8:	8b 40 08             	mov    0x8(%eax),%eax
   12bdb:	85 c0                	test   %eax,%eax
   12bdd:	0f 94 c0             	sete   %al
   12be0:	0f b6 c0             	movzbl %al,%eax
}
   12be3:	5d                   	pop    %ebp
   12be4:	c3                   	ret    

00012be5 <list_init>:
#include "tools/list.h"



void list_init (list_t * list) {
   12be5:	f3 0f 1e fb          	endbr32 
   12be9:	55                   	push   %ebp
   12bea:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t  *)0;
   12bec:	8b 45 08             	mov    0x8(%ebp),%eax
   12bef:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12bf6:	8b 45 08             	mov    0x8(%ebp),%eax
   12bf9:	8b 50 04             	mov    0x4(%eax),%edx
   12bfc:	8b 45 08             	mov    0x8(%ebp),%eax
   12bff:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   12c01:	8b 45 08             	mov    0x8(%ebp),%eax
   12c04:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12c0b:	90                   	nop
   12c0c:	5d                   	pop    %ebp
   12c0d:	c3                   	ret    

00012c0e <list_insert_first>:

void list_insert_first (list_t * list, list_node_t * node) {
   12c0e:	f3 0f 1e fb          	endbr32 
   12c12:	55                   	push   %ebp
   12c13:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12c15:	8b 45 08             	mov    0x8(%ebp),%eax
   12c18:	8b 10                	mov    (%eax),%edx
   12c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c1d:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   12c20:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12c29:	ff 75 08             	pushl  0x8(%ebp)
   12c2c:	e8 a1 ff ff ff       	call   12bd2 <list_is_empty>
   12c31:	83 c4 04             	add    $0x4,%esp
   12c34:	85 c0                	test   %eax,%eax
   12c36:	74 15                	je     12c4d <list_insert_first+0x3f>
        list->last = list->first = node;
   12c38:	8b 45 08             	mov    0x8(%ebp),%eax
   12c3b:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c3e:	89 10                	mov    %edx,(%eax)
   12c40:	8b 45 08             	mov    0x8(%ebp),%eax
   12c43:	8b 10                	mov    (%eax),%edx
   12c45:	8b 45 08             	mov    0x8(%ebp),%eax
   12c48:	89 50 04             	mov    %edx,0x4(%eax)
   12c4b:	eb 12                	jmp    12c5f <list_insert_first+0x51>
    }   else {
        list->first->pre = node;
   12c4d:	8b 45 08             	mov    0x8(%ebp),%eax
   12c50:	8b 00                	mov    (%eax),%eax
   12c52:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c55:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12c57:	8b 45 08             	mov    0x8(%ebp),%eax
   12c5a:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c5d:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12c5f:	8b 45 08             	mov    0x8(%ebp),%eax
   12c62:	8b 40 08             	mov    0x8(%eax),%eax
   12c65:	8d 50 01             	lea    0x1(%eax),%edx
   12c68:	8b 45 08             	mov    0x8(%ebp),%eax
   12c6b:	89 50 08             	mov    %edx,0x8(%eax)

}
   12c6e:	90                   	nop
   12c6f:	c9                   	leave  
   12c70:	c3                   	ret    

00012c71 <list_insert_last>:

void list_insert_last (list_t * list, list_node_t * node) {
   12c71:	f3 0f 1e fb          	endbr32 
   12c75:	55                   	push   %ebp
   12c76:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12c78:	8b 45 08             	mov    0x8(%ebp),%eax
   12c7b:	8b 50 04             	mov    0x4(%eax),%edx
   12c7e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c81:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   12c83:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c86:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   12c8d:	ff 75 08             	pushl  0x8(%ebp)
   12c90:	e8 3d ff ff ff       	call   12bd2 <list_is_empty>
   12c95:	83 c4 04             	add    $0x4,%esp
   12c98:	85 c0                	test   %eax,%eax
   12c9a:	74 15                	je     12cb1 <list_insert_last+0x40>
        list->last = list->first = node;
   12c9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12c9f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ca2:	89 10                	mov    %edx,(%eax)
   12ca4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ca7:	8b 10                	mov    (%eax),%edx
   12ca9:	8b 45 08             	mov    0x8(%ebp),%eax
   12cac:	89 50 04             	mov    %edx,0x4(%eax)
   12caf:	eb 15                	jmp    12cc6 <list_insert_last+0x55>
    } else {
        list->last->next = node;
   12cb1:	8b 45 08             	mov    0x8(%ebp),%eax
   12cb4:	8b 40 04             	mov    0x4(%eax),%eax
   12cb7:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cba:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12cbd:	8b 45 08             	mov    0x8(%ebp),%eax
   12cc0:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cc3:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12cc6:	8b 45 08             	mov    0x8(%ebp),%eax
   12cc9:	8b 40 08             	mov    0x8(%eax),%eax
   12ccc:	8d 50 01             	lea    0x1(%eax),%edx
   12ccf:	8b 45 08             	mov    0x8(%ebp),%eax
   12cd2:	89 50 08             	mov    %edx,0x8(%eax)

}
   12cd5:	90                   	nop
   12cd6:	c9                   	leave  
   12cd7:	c3                   	ret    

00012cd8 <list_remove_first>:


list_node_t * list_remove_first (list_t * list) {
   12cd8:	f3 0f 1e fb          	endbr32 
   12cdc:	55                   	push   %ebp
   12cdd:	89 e5                	mov    %esp,%ebp
   12cdf:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   12ce2:	ff 75 08             	pushl  0x8(%ebp)
   12ce5:	e8 e8 fe ff ff       	call   12bd2 <list_is_empty>
   12cea:	83 c4 04             	add    $0x4,%esp
   12ced:	85 c0                	test   %eax,%eax
   12cef:	74 07                	je     12cf8 <list_remove_first+0x20>
        return (list_node_t *)0;
   12cf1:	b8 00 00 00 00       	mov    $0x0,%eax
   12cf6:	eb 5b                	jmp    12d53 <list_remove_first+0x7b>
    } 

    list_node_t * remove_node = list->first;
   12cf8:	8b 45 08             	mov    0x8(%ebp),%eax
   12cfb:	8b 00                	mov    (%eax),%eax
   12cfd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   12d00:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12d03:	8b 50 04             	mov    0x4(%eax),%edx
   12d06:	8b 45 08             	mov    0x8(%ebp),%eax
   12d09:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {  // 假如只有一个节点
   12d0b:	8b 45 08             	mov    0x8(%ebp),%eax
   12d0e:	8b 00                	mov    (%eax),%eax
   12d10:	85 c0                	test   %eax,%eax
   12d12:	75 0c                	jne    12d20 <list_remove_first+0x48>
        list->last = (list_node_t *)0;
   12d14:	8b 45 08             	mov    0x8(%ebp),%eax
   12d17:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12d1e:	eb 0c                	jmp    12d2c <list_remove_first+0x54>
    } else {
        remove_node->next->pre = (list_node_t *)0;   // 有超过一个节点
   12d20:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12d23:	8b 40 04             	mov    0x4(%eax),%eax
   12d26:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t * )0;
   12d2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12d2f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12d36:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12d39:	8b 50 04             	mov    0x4(%eax),%edx
   12d3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12d3f:	89 10                	mov    %edx,(%eax)

    list->count--;
   12d41:	8b 45 08             	mov    0x8(%ebp),%eax
   12d44:	8b 40 08             	mov    0x8(%eax),%eax
   12d47:	8d 50 ff             	lea    -0x1(%eax),%edx
   12d4a:	8b 45 08             	mov    0x8(%ebp),%eax
   12d4d:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   12d50:	8b 45 fc             	mov    -0x4(%ebp),%eax

}
   12d53:	c9                   	leave  
   12d54:	c3                   	ret    

00012d55 <list_remove>:

list_node_t * list_remove (list_t * list, list_node_t * node) {
   12d55:	f3 0f 1e fb          	endbr32 
   12d59:	55                   	push   %ebp
   12d5a:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {  // 如果删除的点是头节点，直接置空
   12d5c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d5f:	8b 00                	mov    (%eax),%eax
   12d61:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12d64:	75 0b                	jne    12d71 <list_remove+0x1c>
        list->first = node->next;
   12d66:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d69:	8b 50 04             	mov    0x4(%eax),%edx
   12d6c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d6f:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {    // 删除的点是尾节点
   12d71:	8b 45 08             	mov    0x8(%ebp),%eax
   12d74:	8b 40 04             	mov    0x4(%eax),%eax
   12d77:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12d7a:	75 0b                	jne    12d87 <list_remove+0x32>
        list->last = node->pre;
   12d7c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d7f:	8b 10                	mov    (%eax),%edx
   12d81:	8b 45 08             	mov    0x8(%ebp),%eax
   12d84:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12d87:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d8a:	8b 00                	mov    (%eax),%eax
   12d8c:	85 c0                	test   %eax,%eax
   12d8e:	74 0e                	je     12d9e <list_remove+0x49>
        node->pre->next = node->next;
   12d90:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d93:	8b 00                	mov    (%eax),%eax
   12d95:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d98:	8b 52 04             	mov    0x4(%edx),%edx
   12d9b:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12d9e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12da1:	8b 40 04             	mov    0x4(%eax),%eax
   12da4:	85 c0                	test   %eax,%eax
   12da6:	74 0d                	je     12db5 <list_remove+0x60>
        node->next->pre = node->pre;
   12da8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dab:	8b 40 04             	mov    0x4(%eax),%eax
   12dae:	8b 55 0c             	mov    0xc(%ebp),%edx
   12db1:	8b 12                	mov    (%edx),%edx
   12db3:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   12db5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12db8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12dbf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dc2:	8b 50 04             	mov    0x4(%eax),%edx
   12dc5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dc8:	89 10                	mov    %edx,(%eax)
    list->count--;
   12dca:	8b 45 08             	mov    0x8(%ebp),%eax
   12dcd:	8b 40 08             	mov    0x8(%eax),%eax
   12dd0:	8d 50 ff             	lea    -0x1(%eax),%edx
   12dd3:	8b 45 08             	mov    0x8(%ebp),%eax
   12dd6:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   12dd9:	8b 45 0c             	mov    0xc(%ebp),%eax


   12ddc:	5d                   	pop    %ebp
   12ddd:	c3                   	ret    

00012dde <inb>:
static inline uint8_t inb (uint16_t port) {
   12dde:	55                   	push   %ebp
   12ddf:	89 e5                	mov    %esp,%ebp
   12de1:	83 ec 14             	sub    $0x14,%esp
   12de4:	8b 45 08             	mov    0x8(%ebp),%eax
   12de7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   12deb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12def:	89 c2                	mov    %eax,%edx
   12df1:	ec                   	in     (%dx),%al
   12df2:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12df5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12df9:	c9                   	leave  
   12dfa:	c3                   	ret    

00012dfb <outb>:
static inline void outb (uint16_t port, uint8_t data) {
   12dfb:	55                   	push   %ebp
   12dfc:	89 e5                	mov    %esp,%ebp
   12dfe:	83 ec 08             	sub    $0x8,%esp
   12e01:	8b 45 08             	mov    0x8(%ebp),%eax
   12e04:	8b 55 0c             	mov    0xc(%ebp),%edx
   12e07:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12e0b:	89 d0                	mov    %edx,%eax
   12e0d:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   12e10:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12e14:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12e18:	ee                   	out    %al,(%dx)
}
   12e19:	90                   	nop
   12e1a:	c9                   	leave  
   12e1b:	c3                   	ret    

00012e1c <log_init>:

static mutex_t mutex;

#define COM1_PORT 0x3F8

void log_init(void) {
   12e1c:	f3 0f 1e fb          	endbr32 
   12e20:	55                   	push   %ebp
   12e21:	89 e5                	mov    %esp,%ebp
   12e23:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12e26:	83 ec 0c             	sub    $0xc,%esp
   12e29:	68 c8 8d 01 00       	push   $0x18dc8
   12e2e:	e8 24 f3 ff ff       	call   12157 <mutex_init>
   12e33:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12e36:	83 ec 08             	sub    $0x8,%esp
   12e39:	6a 00                	push   $0x0
   12e3b:	68 f9 03 00 00       	push   $0x3f9
   12e40:	e8 b6 ff ff ff       	call   12dfb <outb>
   12e45:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   12e48:	83 ec 08             	sub    $0x8,%esp
   12e4b:	68 80 00 00 00       	push   $0x80
   12e50:	68 fb 03 00 00       	push   $0x3fb
   12e55:	e8 a1 ff ff ff       	call   12dfb <outb>
   12e5a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   12e5d:	83 ec 08             	sub    $0x8,%esp
   12e60:	6a 03                	push   $0x3
   12e62:	68 f8 03 00 00       	push   $0x3f8
   12e67:	e8 8f ff ff ff       	call   12dfb <outb>
   12e6c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12e6f:	83 ec 08             	sub    $0x8,%esp
   12e72:	6a 00                	push   $0x0
   12e74:	68 f9 03 00 00       	push   $0x3f9
   12e79:	e8 7d ff ff ff       	call   12dfb <outb>
   12e7e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12e81:	83 ec 08             	sub    $0x8,%esp
   12e84:	6a 03                	push   $0x3
   12e86:	68 fb 03 00 00       	push   $0x3fb
   12e8b:	e8 6b ff ff ff       	call   12dfb <outb>
   12e90:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0x0c7);
   12e93:	83 ec 08             	sub    $0x8,%esp
   12e96:	68 c7 00 00 00       	push   $0xc7
   12e9b:	68 fa 03 00 00       	push   $0x3fa
   12ea0:	e8 56 ff ff ff       	call   12dfb <outb>
   12ea5:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0F);
   12ea8:	83 ec 08             	sub    $0x8,%esp
   12eab:	6a 0f                	push   $0xf
   12ead:	68 fc 03 00 00       	push   $0x3fc
   12eb2:	e8 44 ff ff ff       	call   12dfb <outb>
   12eb7:	83 c4 10             	add    $0x10,%esp

}
   12eba:	90                   	nop
   12ebb:	c9                   	leave  
   12ebc:	c3                   	ret    

00012ebd <log_printf>:


void log_printf(const char * fmt, ...) {
   12ebd:	f3 0f 1e fb          	endbr32 
   12ec1:	55                   	push   %ebp
   12ec2:	89 e5                	mov    %esp,%ebp
   12ec4:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;

    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12eca:	83 ec 04             	sub    $0x4,%esp
   12ecd:	68 80 00 00 00       	push   $0x80
   12ed2:	6a 00                	push   $0x0
   12ed4:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12eda:	50                   	push   %eax
   12edb:	e8 8c f9 ff ff       	call   1286c <kernel_memset>
   12ee0:	83 c4 10             	add    $0x10,%esp

    va_start(args, fmt);
   12ee3:	8d 45 0c             	lea    0xc(%ebp),%eax
   12ee6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   12eec:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12ef2:	83 ec 04             	sub    $0x4,%esp
   12ef5:	50                   	push   %eax
   12ef6:	ff 75 08             	pushl  0x8(%ebp)
   12ef9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12eff:	50                   	push   %eax
   12f00:	e8 19 fb ff ff       	call   12a1e <kernel_vsprintf>
   12f05:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   12f08:	83 ec 0c             	sub    $0xc,%esp
   12f0b:	68 c8 8d 01 00       	push   $0x18dc8
   12f10:	e8 74 f2 ff ff       	call   12189 <mutex_lock>
   12f15:	83 c4 10             	add    $0x10,%esp

    const char * p = str_buf;    
   12f18:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12f1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   12f21:	eb 3b                	jmp    12f5e <log_printf+0xa1>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);   // 检查当前串口是否在忙
   12f23:	90                   	nop
   12f24:	83 ec 0c             	sub    $0xc,%esp
   12f27:	68 fd 03 00 00       	push   $0x3fd
   12f2c:	e8 ad fe ff ff       	call   12dde <inb>
   12f31:	83 c4 10             	add    $0x10,%esp
   12f34:	0f b6 c0             	movzbl %al,%eax
   12f37:	83 e0 40             	and    $0x40,%eax
   12f3a:	85 c0                	test   %eax,%eax
   12f3c:	74 e6                	je     12f24 <log_printf+0x67>
        outb(COM1_PORT, *p++);
   12f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f41:	8d 50 01             	lea    0x1(%eax),%edx
   12f44:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12f47:	0f b6 00             	movzbl (%eax),%eax
   12f4a:	0f b6 c0             	movzbl %al,%eax
   12f4d:	83 ec 08             	sub    $0x8,%esp
   12f50:	50                   	push   %eax
   12f51:	68 f8 03 00 00       	push   $0x3f8
   12f56:	e8 a0 fe ff ff       	call   12dfb <outb>
   12f5b:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12f5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f61:	0f b6 00             	movzbl (%eax),%eax
   12f64:	84 c0                	test   %al,%al
   12f66:	75 bb                	jne    12f23 <log_printf+0x66>
    }

    outb(COM1_PORT, '\r');
   12f68:	83 ec 08             	sub    $0x8,%esp
   12f6b:	6a 0d                	push   $0xd
   12f6d:	68 f8 03 00 00       	push   $0x3f8
   12f72:	e8 84 fe ff ff       	call   12dfb <outb>
   12f77:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12f7a:	83 ec 08             	sub    $0x8,%esp
   12f7d:	6a 0a                	push   $0xa
   12f7f:	68 f8 03 00 00       	push   $0x3f8
   12f84:	e8 72 fe ff ff       	call   12dfb <outb>
   12f89:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   12f8c:	83 ec 0c             	sub    $0xc,%esp
   12f8f:	68 c8 8d 01 00       	push   $0x18dc8
   12f94:	e8 85 f2 ff ff       	call   1221e <mutex_unlock>
   12f99:	83 c4 10             	add    $0x10,%esp
}
   12f9c:	90                   	nop
   12f9d:	c9                   	leave  
   12f9e:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
    jmp first_task_main
8000000b:	e9 75 00 00 00       	jmp    80000085 <first_task_main>

80000010 <sys_call>:
    int arg2;
    int arg3;
}syscall_args_t;


static inline int sys_call (syscall_args_t * args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    // 使用特权级0,其实比3高即可，偏移量不需要，填0即可。类似于far_jump函数的实现
	uint32_t addr[] = {0, SELECTOR_SYSCALL | 0};
80000019:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
80000020:	c7 45 f0 18 00 00 00 	movl   $0x18,-0x10(%ebp)
            "push %[arg2]\n\t"
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[a])\n\n"::
            [arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
            [arg0]"r"(args->arg0), [id]"r"(args->id),
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000044:	8d 7d ec             	lea    -0x14(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
            [a]"r"(addr));
}
8000004e:	90                   	nop
8000004f:	83 c4 10             	add    $0x10,%esp
80000052:	5b                   	pop    %ebx
80000053:	5e                   	pop    %esi
80000054:	5f                   	pop    %edi
80000055:	5d                   	pop    %ebp
80000056:	c3                   	ret    

80000057 <msleep>:

static inline int msleep(int ms) {
80000057:	55                   	push   %ebp
80000058:	89 e5                	mov    %esp,%ebp
8000005a:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
8000005d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000061:	7f 07                	jg     8000006a <msleep+0x13>
        return 0;
80000063:	b8 00 00 00 00       	mov    $0x0,%eax
80000068:	eb 19                	jmp    80000083 <msleep+0x2c>
    }

    syscall_args_t args;
    args.id = SYS_sleep;
8000006a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000071:	8b 45 08             	mov    0x8(%ebp),%eax
80000074:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000077:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000007a:	50                   	push   %eax
8000007b:	e8 90 ff ff ff       	call   80000010 <sys_call>
80000080:	83 c4 04             	add    $0x4,%esp
}
80000083:	c9                   	leave  
80000084:	c3                   	ret    

80000085 <first_task_main>:
#include "core/task.h"
#include "tools/log.h"
#include "applib/lib_syscall.h"

int first_task_main (void) {
80000085:	f3 0f 1e fb          	endbr32 
80000089:	55                   	push   %ebp
8000008a:	89 e5                	mov    %esp,%ebp
    for(;;) {
        // log_printf("first task");
        // sys_sleep(1000);
        msleep(1000);
8000008c:	68 e8 03 00 00       	push   $0x3e8
80000091:	e8 c1 ff ff ff       	call   80000057 <msleep>
80000096:	83 c4 04             	add    $0x4,%esp
80000099:	eb f1                	jmp    8000008c <first_task_main+0x7>
