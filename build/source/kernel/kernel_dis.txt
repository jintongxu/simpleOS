
/home/rafael/Documents/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
/home/rafael/Documents/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001674 memsz 0x00004290 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013b8  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000002b8  000113b8  000113b8  000023b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011670  00011670  00002670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002c10  00011680  00011680  00002674  2**5
                  ALLOC
  4 .debug_line   00000d53  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00001401  00000000  00000000  000033c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000740  00000000  00000000  000047c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 000000e0  00000000  00000000  00004f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    0000087c  00000000  00000000  00004fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      0000002b  00000000  00000000  00005864  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000804  00000000  00000000  00005890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000113b8 l    d  .rodata	00000000 .rodata
00011670 l    d  .data	00000000 .data
00011680 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
000102a8 l     F .text	00000028 lgdt
00011680 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010425 l     F .text	0000001d inb
00010442 l     F .text	00000021 outb
00010463 l     F .text	00000007 cli
0001046a l     F .text	00000007 sti
00010471 l     F .text	00000028 lidt
00011e80 l     O .bss	00000400 idt_table
00010499 l     F .text	000000d6 dump_core_regs
0001056f l     F .text	0000003e do_default_handler
0001082d l     F .text	00000097 init_pic
00000000 l    df *ABS*	00000000 time.c
00010c1b l     F .text	00000021 outb
00012280 l     O .bss	00000004 sys_tick
00010c63 l     F .text	00000064 init_pit
00000000 l    df *ABS*	00000000 init.c
00012284 l     O .bss	00000004 init_boot_info
00000000 l    df *ABS*	00000000 klib.c
00011670 l     O .data	00000004 num2ch.1617
00000000 l    df *ABS*	00000000 log.c
0001123f l     F .text	0000001d inb
0001125c l     F .text	00000021 outb
00010eea g     F .text	00000053 kernel_memcpy
00010bdd g     F .text	0000000f irq_enable_global
0001070d g     F .text	00000020 do_handler_segment_not_present
00010f3d g     F .text	00000045 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010416 g     F .text	0000000f cpu_init
0001127d g     F .text	00000079 log_init
00010d0c g     F .text	00000062 init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00010d6e g     F .text	0000004b kernel_strcpy
00010ab4 g     F .text	0000008f irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
0001064d g     F .text	00000020 do_handler_overflow
000107ad g     F .text	00000020 do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
0001074d g     F .text	00000020 do_handler_general_protection
000105cd g     F .text	00000020 do_handler_divider
000106cd g     F .text	00000020 do_handler_double_fault
0001076d g     F .text	00000020 do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00010bec g     F .text	0000002f pic_send_eoi
00010199 g       .text	00000000 exception_handler_stack_segment_fault
0001080d g     F .text	00000020 do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
00010289 g       .text	00000000 exception_handler_time
00012290 g     O .bss	00002000 stack
000100e5 g       .text	00000000 exception_handler_bound_range
0001068d g     F .text	00000020 do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
0001078d g     F .text	00000020 do_handler_fpu_error
000107cd g     F .text	00000020 do_handler_machine_check
000105ed g     F .text	00000020 do_handler_Debug
0001060d g     F .text	00000020 do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00010db9 g     F .text	00000074 kernel_strncpy
00010bce g     F .text	0000000f irq_disable_global
00010ce3 g     F .text	00000029 kernel_init
00010000 g       .text	00000000 _start
000110ef g     F .text	00000150 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
000106ed g     F .text	00000020 do_handler_invalid_tss
00010a76 g     F .text	0000003e irq_install
000103a5 g     F .text	00000071 init_gdt
00010b43 g     F .text	0000008b irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
000106ad g     F .text	00000020 do_handler_device_unavailable
00010f82 g     F .text	00000068 kernel_memcmp
000107ed g     F .text	00000020 do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
000105ad g     F .text	00000020 do_handler_unknown
000101f0 g       .text	00000000 exception_handler_fpu_error
000108c4 g     F .text	000001b2 irq_init
00010eab g     F .text	0000003f kernel_strlen
000102d0 g     F .text	0000008a segment_desc_set
0001066d g     F .text	00000020 do_handler_bound_range
00010e2d g     F .text	0000007e kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
00010088 g       .text	00000000 exception_handler_NMI
00010069 g       .text	00000000 exception_handler_Debug
0001072d g     F .text	00000020 do_handler_stack_segment_fault
0001062d g     F .text	00000020 do_handler_breakpoint
000112f6 g     F .text	000000c2 log_printf
000110c7 g     F .text	00000028 kernel_sprintf
00010fea g     F .text	000000dd kernel_itoa
0001035a g     F .text	0000004b gate_desc_set
00010c3c g     F .text	00000027 do_handler_time
00010cc7 g     F .text	0000001c time_init



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .global _start
    .extern init_main
    # void start (boot_info_t * boot_info)
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
    
    # mov 4(%ebp), %eax

    # kernel_init(boot_info)
    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 d7 0c 00 00       	call   10ce3 <kernel_init>

    // 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
    # 指定的选择子，会被加载到CS寄存器中
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 90 42 01 00       	mov    $0x14290,%esp
    jmp init_main
   10026:	e9 e1 0c 00 00       	jmp    10d0c <init_main>

0001002b <exception_handler_unknown>:
    add $(2*4), %esp

    iret
.endm

exception_handler unknown, -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 71 05 00 00       	call   105ad <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divider>:
exception_handler divider, 0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 72 05 00 00       	call   105cd <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 73 05 00 00       	call   105ed <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 74 05 00 00       	call   1060d <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 75 05 00 00       	call   1062d <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 76 05 00 00       	call   1064d <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 77 05 00 00       	call   1066d <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 78 05 00 00       	call   1068d <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 79 05 00 00       	call   106ad <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 7c 05 00 00       	call   106cd <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 7f 05 00 00       	call   106ed <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 82 05 00 00       	call   1070d <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha  
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 85 05 00 00       	call   1072d <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 88 05 00 00       	call   1074d <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa   
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret   

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 8b 05 00 00       	call   1076d <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa   
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret   

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha  
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 8c 05 00 00       	call   1078d <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa   
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret   

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha  
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 8f 05 00 00       	call   107ad <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa   
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret   

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha  
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 90 05 00 00       	call   107cd <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa   
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret   

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha  
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 91 05 00 00       	call   107ed <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa   
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret   

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha  
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 92 05 00 00       	call   1080d <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa   
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret   

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 a2 09 00 00       	call   10c3c <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <lgdt>:
static inline void sti () {
    __asm__ __volatile__("sti");
}


static inline void lgdt (uint32_t start, uint32_t size) {
   102a8:	55                   	push   %ebp
   102a9:	89 e5                	mov    %esp,%ebp
   102ab:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    }gdt;

    gdt.start31_16 = start >> 16;
   102ae:	8b 45 08             	mov    0x8(%ebp),%eax
   102b1:	c1 e8 10             	shr    $0x10,%eax
   102b4:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   102b8:	8b 45 08             	mov    0x8(%ebp),%eax
   102bb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   102bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c2:	83 e8 01             	sub    $0x1,%eax
   102c5:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   102c9:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   102cd:	90                   	nop
   102ce:	c9                   	leave  
   102cf:	c3                   	ret    

000102d0 <segment_desc_set>:


static segment_desc_t gdt_table[GDT_TABLE_SIZE];


void segment_desc_set (int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   102d0:	f3 0f 1e fb          	endbr32 
   102d4:	55                   	push   %ebp
   102d5:	89 e5                	mov    %esp,%ebp
   102d7:	83 ec 14             	sub    $0x14,%esp
   102da:	8b 45 14             	mov    0x14(%ebp),%eax
   102dd:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   102e1:	8b 45 08             	mov    0x8(%ebp),%eax
   102e4:	c1 f8 03             	sar    $0x3,%eax
   102e7:	c1 e0 03             	shl    $0x3,%eax
   102ea:	05 80 16 01 00       	add    $0x11680,%eax
   102ef:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (limit > 0xFFFFF) {
   102f2:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   102f9:	76 0f                	jbe    1030a <segment_desc_set+0x3a>
        // 如果limit太大，就把G位置1
        attr |= 0x8000;
   102fb:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10301:	8b 45 10             	mov    0x10(%ebp),%eax
   10304:	c1 e8 0c             	shr    $0xc,%eax
   10307:	89 45 10             	mov    %eax,0x10(%ebp)
    }

    desc->limit15_0 = limit & 0xFFFF;
   1030a:	8b 45 10             	mov    0x10(%ebp),%eax
   1030d:	89 c2                	mov    %eax,%edx
   1030f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10312:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   10315:	8b 45 0c             	mov    0xc(%ebp),%eax
   10318:	89 c2                	mov    %eax,%edx
   1031a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1031d:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   10321:	8b 45 0c             	mov    0xc(%ebp),%eax
   10324:	c1 e8 10             	shr    $0x10,%eax
   10327:	89 c2                	mov    %eax,%edx
   10329:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1032c:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   1032f:	8b 45 10             	mov    0x10(%ebp),%eax
   10332:	c1 e8 10             	shr    $0x10,%eax
   10335:	c1 e0 08             	shl    $0x8,%eax
   10338:	66 25 00 0f          	and    $0xf00,%ax
   1033c:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10340:	89 c2                	mov    %eax,%edx
   10342:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10345:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   10349:	8b 45 0c             	mov    0xc(%ebp),%eax
   1034c:	c1 e8 18             	shr    $0x18,%eax
   1034f:	89 c2                	mov    %eax,%edx
   10351:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10354:	88 50 07             	mov    %dl,0x7(%eax)
}
   10357:	90                   	nop
   10358:	c9                   	leave  
   10359:	c3                   	ret    

0001035a <gate_desc_set>:


void gate_desc_set (gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   1035a:	f3 0f 1e fb          	endbr32 
   1035e:	55                   	push   %ebp
   1035f:	89 e5                	mov    %esp,%ebp
   10361:	83 ec 08             	sub    $0x8,%esp
   10364:	8b 55 0c             	mov    0xc(%ebp),%edx
   10367:	8b 45 14             	mov    0x14(%ebp),%eax
   1036a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1036e:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   10372:	8b 45 10             	mov    0x10(%ebp),%eax
   10375:	89 c2                	mov    %eax,%edx
   10377:	8b 45 08             	mov    0x8(%ebp),%eax
   1037a:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   1037d:	8b 45 08             	mov    0x8(%ebp),%eax
   10380:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10384:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10388:	8b 45 08             	mov    0x8(%ebp),%eax
   1038b:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1038f:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   10393:	8b 45 10             	mov    0x10(%ebp),%eax
   10396:	c1 e8 10             	shr    $0x10,%eax
   10399:	89 c2                	mov    %eax,%edx
   1039b:	8b 45 08             	mov    0x8(%ebp),%eax
   1039e:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   103a2:	90                   	nop
   103a3:	c9                   	leave  
   103a4:	c3                   	ret    

000103a5 <init_gdt>:


void init_gdt (void) {
   103a5:	f3 0f 1e fb          	endbr32 
   103a9:	55                   	push   %ebp
   103aa:	89 e5                	mov    %esp,%ebp
   103ac:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i ++ ) {
   103af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   103b6:	eb 19                	jmp    103d1 <init_gdt+0x2c>
        segment_desc_set(i << 3, 0, 0, 0);
   103b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103bb:	c1 e0 03             	shl    $0x3,%eax
   103be:	6a 00                	push   $0x0
   103c0:	6a 00                	push   $0x0
   103c2:	6a 00                	push   $0x0
   103c4:	50                   	push   %eax
   103c5:	e8 06 ff ff ff       	call   102d0 <segment_desc_set>
   103ca:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i ++ ) {
   103cd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   103d1:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   103d8:	7e de                	jle    103b8 <init_gdt+0x13>
    }


    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   103da:	68 92 c0 00 00       	push   $0xc092
   103df:	6a ff                	push   $0xffffffff
   103e1:	6a 00                	push   $0x0
   103e3:	6a 10                	push   $0x10
   103e5:	e8 e6 fe ff ff       	call   102d0 <segment_desc_set>
   103ea:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   103ed:	68 9a c0 00 00       	push   $0xc09a
   103f2:	6a ff                	push   $0xffffffff
   103f4:	6a 00                	push   $0x0
   103f6:	6a 08                	push   $0x8
   103f8:	e8 d3 fe ff ff       	call   102d0 <segment_desc_set>
   103fd:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10400:	b8 80 16 01 00       	mov    $0x11680,%eax
   10405:	68 00 08 00 00       	push   $0x800
   1040a:	50                   	push   %eax
   1040b:	e8 98 fe ff ff       	call   102a8 <lgdt>
   10410:	83 c4 08             	add    $0x8,%esp


}
   10413:	90                   	nop
   10414:	c9                   	leave  
   10415:	c3                   	ret    

00010416 <cpu_init>:
void cpu_init (void) {
   10416:	f3 0f 1e fb          	endbr32 
   1041a:	55                   	push   %ebp
   1041b:	89 e5                	mov    %esp,%ebp
    init_gdt();
   1041d:	e8 83 ff ff ff       	call   103a5 <init_gdt>
   10422:	90                   	nop
   10423:	5d                   	pop    %ebp
   10424:	c3                   	ret    

00010425 <inb>:
static inline uint8_t inb (uint16_t port) {
   10425:	55                   	push   %ebp
   10426:	89 e5                	mov    %esp,%ebp
   10428:	83 ec 14             	sub    $0x14,%esp
   1042b:	8b 45 08             	mov    0x8(%ebp),%eax
   1042e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   10432:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10436:	89 c2                	mov    %eax,%edx
   10438:	ec                   	in     (%dx),%al
   10439:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   1043c:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10440:	c9                   	leave  
   10441:	c3                   	ret    

00010442 <outb>:
static inline void outb (uint16_t port, uint8_t data) {
   10442:	55                   	push   %ebp
   10443:	89 e5                	mov    %esp,%ebp
   10445:	83 ec 08             	sub    $0x8,%esp
   10448:	8b 45 08             	mov    0x8(%ebp),%eax
   1044b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1044e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10452:	89 d0                	mov    %edx,%eax
   10454:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   10457:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1045b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1045f:	ee                   	out    %al,(%dx)
}
   10460:	90                   	nop
   10461:	c9                   	leave  
   10462:	c3                   	ret    

00010463 <cli>:
static inline void cli () {
   10463:	55                   	push   %ebp
   10464:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   10466:	fa                   	cli    
}
   10467:	90                   	nop
   10468:	5d                   	pop    %ebp
   10469:	c3                   	ret    

0001046a <sti>:
static inline void sti () {
   1046a:	55                   	push   %ebp
   1046b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   1046d:	fb                   	sti    
}
   1046e:	90                   	nop
   1046f:	5d                   	pop    %ebp
   10470:	c3                   	ret    

00010471 <lidt>:
static inline void write_cr0 (uint32_t v) {
    __asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
}


static inline void lidt (uint32_t start, uint32_t size) {
   10471:	55                   	push   %ebp
   10472:	89 e5                	mov    %esp,%ebp
   10474:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    }idt;

    idt.start31_16 = start >> 16;
   10477:	8b 45 08             	mov    0x8(%ebp),%eax
   1047a:	c1 e8 10             	shr    $0x10,%eax
   1047d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   10481:	8b 45 08             	mov    0x8(%ebp),%eax
   10484:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   10488:	8b 45 0c             	mov    0xc(%ebp),%eax
   1048b:	83 e8 01             	sub    $0x1,%eax
   1048e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lidt %0"::"m"(idt));
   10492:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10496:	90                   	nop
   10497:	c9                   	leave  
   10498:	c3                   	ret    

00010499 <dump_core_regs>:

void exception_handler_unknown (void);

static gate_desc_t idt_table[IDT_TABLE_NR];

static void dump_core_regs (exception_frame_t * frame) {
   10499:	f3 0f 1e fb          	endbr32 
   1049d:	55                   	push   %ebp
   1049e:	89 e5                	mov    %esp,%ebp
   104a0:	57                   	push   %edi
   104a1:	56                   	push   %esi
   104a2:	53                   	push   %ebx
   104a3:	83 ec 1c             	sub    $0x1c,%esp
	log_printf("IRQ: %d, error code: %d", frame->num, frame->error_code);
   104a6:	8b 45 08             	mov    0x8(%ebp),%eax
   104a9:	8b 50 34             	mov    0x34(%eax),%edx
   104ac:	8b 45 08             	mov    0x8(%ebp),%eax
   104af:	8b 40 30             	mov    0x30(%eax),%eax
   104b2:	83 ec 04             	sub    $0x4,%esp
   104b5:	52                   	push   %edx
   104b6:	50                   	push   %eax
   104b7:	68 b8 13 01 00       	push   $0x113b8
   104bc:	e8 35 0e 00 00       	call   112f6 <log_printf>
   104c1:	83 c4 10             	add    $0x10,%esp
	log_printf("CS: %d\n\rDS: %d\n\rES: %d\n\rFS: %d\n\rGS:%d",
   104c4:	8b 45 08             	mov    0x8(%ebp),%eax
   104c7:	8b 30                	mov    (%eax),%esi
   104c9:	8b 45 08             	mov    0x8(%ebp),%eax
   104cc:	8b 58 04             	mov    0x4(%eax),%ebx
   104cf:	8b 45 08             	mov    0x8(%ebp),%eax
   104d2:	8b 48 08             	mov    0x8(%eax),%ecx
   104d5:	8b 45 08             	mov    0x8(%ebp),%eax
   104d8:	8b 50 0c             	mov    0xc(%eax),%edx
   104db:	8b 45 08             	mov    0x8(%ebp),%eax
   104de:	8b 40 3c             	mov    0x3c(%eax),%eax
   104e1:	83 ec 08             	sub    $0x8,%esp
   104e4:	56                   	push   %esi
   104e5:	53                   	push   %ebx
   104e6:	51                   	push   %ecx
   104e7:	52                   	push   %edx
   104e8:	50                   	push   %eax
   104e9:	68 d0 13 01 00       	push   $0x113d0
   104ee:	e8 03 0e 00 00       	call   112f6 <log_printf>
   104f3:	83 c4 20             	add    $0x20,%esp
		frame->cs, frame->ds, frame->es, frame->fs, frame->gs
	);
	log_printf("EAX: 0x%x\n\r"
   104f6:	8b 45 08             	mov    0x8(%ebp),%eax
   104f9:	8b 48 1c             	mov    0x1c(%eax),%ecx
   104fc:	8b 45 08             	mov    0x8(%ebp),%eax
   104ff:	8b 40 18             	mov    0x18(%eax),%eax
   10502:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10505:	8b 45 08             	mov    0x8(%ebp),%eax
   10508:	8b 78 14             	mov    0x14(%eax),%edi
   1050b:	89 7d e0             	mov    %edi,-0x20(%ebp)
   1050e:	8b 45 08             	mov    0x8(%ebp),%eax
   10511:	8b 78 10             	mov    0x10(%eax),%edi
   10514:	8b 45 08             	mov    0x8(%ebp),%eax
   10517:	8b 70 24             	mov    0x24(%eax),%esi
   1051a:	8b 45 08             	mov    0x8(%ebp),%eax
   1051d:	8b 58 28             	mov    0x28(%eax),%ebx
   10520:	8b 45 08             	mov    0x8(%ebp),%eax
   10523:	8b 50 20             	mov    0x20(%eax),%edx
   10526:	8b 45 08             	mov    0x8(%ebp),%eax
   10529:	8b 40 2c             	mov    0x2c(%eax),%eax
   1052c:	83 ec 0c             	sub    $0xc,%esp
   1052f:	51                   	push   %ecx
   10530:	ff 75 e4             	pushl  -0x1c(%ebp)
   10533:	ff 75 e0             	pushl  -0x20(%ebp)
   10536:	57                   	push   %edi
   10537:	56                   	push   %esi
   10538:	53                   	push   %ebx
   10539:	52                   	push   %edx
   1053a:	50                   	push   %eax
   1053b:	68 f8 13 01 00       	push   $0x113f8
   10540:	e8 b1 0d 00 00       	call   112f6 <log_printf>
   10545:	83 c4 30             	add    $0x30,%esp
		"EBP: 0x%x\n\r"
		"ESP: 0x%x\n\r",
		frame->eax, frame->ebx, frame->ecx, frame->edx,
		frame->edi, frame->esi, frame->ebp, frame->esp);

	log_printf("EIP: 0x%x\n\rEFLAGS:0x%x\n\r", frame->eip, frame->eflags);
   10548:	8b 45 08             	mov    0x8(%ebp),%eax
   1054b:	8b 50 40             	mov    0x40(%eax),%edx
   1054e:	8b 45 08             	mov    0x8(%ebp),%eax
   10551:	8b 40 38             	mov    0x38(%eax),%eax
   10554:	83 ec 04             	sub    $0x4,%esp
   10557:	52                   	push   %edx
   10558:	50                   	push   %eax
   10559:	68 51 14 01 00       	push   $0x11451
   1055e:	e8 93 0d 00 00       	call   112f6 <log_printf>
   10563:	83 c4 10             	add    $0x10,%esp


}
   10566:	90                   	nop
   10567:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1056a:	5b                   	pop    %ebx
   1056b:	5e                   	pop    %esi
   1056c:	5f                   	pop    %edi
   1056d:	5d                   	pop    %ebp
   1056e:	c3                   	ret    

0001056f <do_default_handler>:

static void do_default_handler (exception_frame_t * frame, char * message) {
   1056f:	f3 0f 1e fb          	endbr32 
   10573:	55                   	push   %ebp
   10574:	89 e5                	mov    %esp,%ebp
   10576:	83 ec 08             	sub    $0x8,%esp
	log_printf("---------------------------------");
   10579:	83 ec 0c             	sub    $0xc,%esp
   1057c:	68 6c 14 01 00       	push   $0x1146c
   10581:	e8 70 0d 00 00       	call   112f6 <log_printf>
   10586:	83 c4 10             	add    $0x10,%esp
	log_printf("IRQ/Exception happend: %s", message);
   10589:	83 ec 08             	sub    $0x8,%esp
   1058c:	ff 75 0c             	pushl  0xc(%ebp)
   1058f:	68 8e 14 01 00       	push   $0x1148e
   10594:	e8 5d 0d 00 00       	call   112f6 <log_printf>
   10599:	83 c4 10             	add    $0x10,%esp
	dump_core_regs(frame);
   1059c:	83 ec 0c             	sub    $0xc,%esp
   1059f:	ff 75 08             	pushl  0x8(%ebp)
   105a2:	e8 f2 fe ff ff       	call   10499 <dump_core_regs>
   105a7:	83 c4 10             	add    $0x10,%esp

}
   105aa:	90                   	nop
   105ab:	c9                   	leave  
   105ac:	c3                   	ret    

000105ad <do_handler_unknown>:
void do_handler_unknown (exception_frame_t * frame) {
   105ad:	f3 0f 1e fb          	endbr32 
   105b1:	55                   	push   %ebp
   105b2:	89 e5                	mov    %esp,%ebp
   105b4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");        // 默认值放到最后面
   105b7:	83 ec 08             	sub    $0x8,%esp
   105ba:	68 a8 14 01 00       	push   $0x114a8
   105bf:	ff 75 08             	pushl  0x8(%ebp)
   105c2:	e8 a8 ff ff ff       	call   1056f <do_default_handler>
   105c7:	83 c4 10             	add    $0x10,%esp
}
   105ca:	90                   	nop
   105cb:	c9                   	leave  
   105cc:	c3                   	ret    

000105cd <do_handler_divider>:

void do_handler_divider (exception_frame_t * frame) {
   105cd:	f3 0f 1e fb          	endbr32 
   105d1:	55                   	push   %ebp
   105d2:	89 e5                	mov    %esp,%ebp
   105d4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Divider exception");
   105d7:	83 ec 08             	sub    $0x8,%esp
   105da:	68 ba 14 01 00       	push   $0x114ba
   105df:	ff 75 08             	pushl  0x8(%ebp)
   105e2:	e8 88 ff ff ff       	call   1056f <do_default_handler>
   105e7:	83 c4 10             	add    $0x10,%esp
}
   105ea:	90                   	nop
   105eb:	c9                   	leave  
   105ec:	c3                   	ret    

000105ed <do_handler_Debug>:

void do_handler_Debug(exception_frame_t * frame) {
   105ed:	f3 0f 1e fb          	endbr32 
   105f1:	55                   	push   %ebp
   105f2:	89 e5                	mov    %esp,%ebp
   105f4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   105f7:	83 ec 08             	sub    $0x8,%esp
   105fa:	68 cc 14 01 00       	push   $0x114cc
   105ff:	ff 75 08             	pushl  0x8(%ebp)
   10602:	e8 68 ff ff ff       	call   1056f <do_default_handler>
   10607:	83 c4 10             	add    $0x10,%esp
}
   1060a:	90                   	nop
   1060b:	c9                   	leave  
   1060c:	c3                   	ret    

0001060d <do_handler_NMI>:

void do_handler_NMI(exception_frame_t * frame) {
   1060d:	f3 0f 1e fb          	endbr32 
   10611:	55                   	push   %ebp
   10612:	89 e5                	mov    %esp,%ebp
   10614:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   10617:	83 ec 08             	sub    $0x8,%esp
   1061a:	68 dc 14 01 00       	push   $0x114dc
   1061f:	ff 75 08             	pushl  0x8(%ebp)
   10622:	e8 48 ff ff ff       	call   1056f <do_default_handler>
   10627:	83 c4 10             	add    $0x10,%esp
}
   1062a:	90                   	nop
   1062b:	c9                   	leave  
   1062c:	c3                   	ret    

0001062d <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t * frame) {
   1062d:	f3 0f 1e fb          	endbr32 
   10631:	55                   	push   %ebp
   10632:	89 e5                	mov    %esp,%ebp
   10634:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   10637:	83 ec 08             	sub    $0x8,%esp
   1063a:	68 eb 14 01 00       	push   $0x114eb
   1063f:	ff 75 08             	pushl  0x8(%ebp)
   10642:	e8 28 ff ff ff       	call   1056f <do_default_handler>
   10647:	83 c4 10             	add    $0x10,%esp
}
   1064a:	90                   	nop
   1064b:	c9                   	leave  
   1064c:	c3                   	ret    

0001064d <do_handler_overflow>:

void do_handler_overflow(exception_frame_t * frame) {
   1064d:	f3 0f 1e fb          	endbr32 
   10651:	55                   	push   %ebp
   10652:	89 e5                	mov    %esp,%ebp
   10654:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   10657:	83 ec 08             	sub    $0x8,%esp
   1065a:	68 f7 14 01 00       	push   $0x114f7
   1065f:	ff 75 08             	pushl  0x8(%ebp)
   10662:	e8 08 ff ff ff       	call   1056f <do_default_handler>
   10667:	83 c4 10             	add    $0x10,%esp
}
   1066a:	90                   	nop
   1066b:	c9                   	leave  
   1066c:	c3                   	ret    

0001066d <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t * frame) {
   1066d:	f3 0f 1e fb          	endbr32 
   10671:	55                   	push   %ebp
   10672:	89 e5                	mov    %esp,%ebp
   10674:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10677:	83 ec 08             	sub    $0x8,%esp
   1067a:	68 01 15 01 00       	push   $0x11501
   1067f:	ff 75 08             	pushl  0x8(%ebp)
   10682:	e8 e8 fe ff ff       	call   1056f <do_default_handler>
   10687:	83 c4 10             	add    $0x10,%esp
}
   1068a:	90                   	nop
   1068b:	c9                   	leave  
   1068c:	c3                   	ret    

0001068d <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t * frame) {
   1068d:	f3 0f 1e fb          	endbr32 
   10691:	55                   	push   %ebp
   10692:	89 e5                	mov    %esp,%ebp
   10694:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   10697:	83 ec 08             	sub    $0x8,%esp
   1069a:	68 17 15 01 00       	push   $0x11517
   1069f:	ff 75 08             	pushl  0x8(%ebp)
   106a2:	e8 c8 fe ff ff       	call   1056f <do_default_handler>
   106a7:	83 c4 10             	add    $0x10,%esp
}
   106aa:	90                   	nop
   106ab:	c9                   	leave  
   106ac:	c3                   	ret    

000106ad <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t * frame) {
   106ad:	f3 0f 1e fb          	endbr32 
   106b1:	55                   	push   %ebp
   106b2:	89 e5                	mov    %esp,%ebp
   106b4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   106b7:	83 ec 08             	sub    $0x8,%esp
   106ba:	68 27 15 01 00       	push   $0x11527
   106bf:	ff 75 08             	pushl  0x8(%ebp)
   106c2:	e8 a8 fe ff ff       	call   1056f <do_default_handler>
   106c7:	83 c4 10             	add    $0x10,%esp
}
   106ca:	90                   	nop
   106cb:	c9                   	leave  
   106cc:	c3                   	ret    

000106cd <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t * frame) {
   106cd:	f3 0f 1e fb          	endbr32 
   106d1:	55                   	push   %ebp
   106d2:	89 e5                	mov    %esp,%ebp
   106d4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   106d7:	83 ec 08             	sub    $0x8,%esp
   106da:	68 3d 15 01 00       	push   $0x1153d
   106df:	ff 75 08             	pushl  0x8(%ebp)
   106e2:	e8 88 fe ff ff       	call   1056f <do_default_handler>
   106e7:	83 c4 10             	add    $0x10,%esp
}
   106ea:	90                   	nop
   106eb:	c9                   	leave  
   106ec:	c3                   	ret    

000106ed <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t * frame) {
   106ed:	f3 0f 1e fb          	endbr32 
   106f1:	55                   	push   %ebp
   106f2:	89 e5                	mov    %esp,%ebp
   106f4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   106f7:	83 ec 08             	sub    $0x8,%esp
   106fa:	68 4b 15 01 00       	push   $0x1154b
   106ff:	ff 75 08             	pushl  0x8(%ebp)
   10702:	e8 68 fe ff ff       	call   1056f <do_default_handler>
   10707:	83 c4 10             	add    $0x10,%esp
}
   1070a:	90                   	nop
   1070b:	c9                   	leave  
   1070c:	c3                   	ret    

0001070d <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t * frame) {
   1070d:	f3 0f 1e fb          	endbr32 
   10711:	55                   	push   %ebp
   10712:	89 e5                	mov    %esp,%ebp
   10714:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   10717:	83 ec 08             	sub    $0x8,%esp
   1071a:	68 57 15 01 00       	push   $0x11557
   1071f:	ff 75 08             	pushl  0x8(%ebp)
   10722:	e8 48 fe ff ff       	call   1056f <do_default_handler>
   10727:	83 c4 10             	add    $0x10,%esp
}
   1072a:	90                   	nop
   1072b:	c9                   	leave  
   1072c:	c3                   	ret    

0001072d <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t * frame) {
   1072d:	f3 0f 1e fb          	endbr32 
   10731:	55                   	push   %ebp
   10732:	89 e5                	mov    %esp,%ebp
   10734:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   10737:	83 ec 08             	sub    $0x8,%esp
   1073a:	68 6c 15 01 00       	push   $0x1156c
   1073f:	ff 75 08             	pushl  0x8(%ebp)
   10742:	e8 28 fe ff ff       	call   1056f <do_default_handler>
   10747:	83 c4 10             	add    $0x10,%esp
}
   1074a:	90                   	nop
   1074b:	c9                   	leave  
   1074c:	c3                   	ret    

0001074d <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t * frame) {
   1074d:	f3 0f 1e fb          	endbr32 
   10751:	55                   	push   %ebp
   10752:	89 e5                	mov    %esp,%ebp
   10754:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "general-protection");
   10757:	83 ec 08             	sub    $0x8,%esp
   1075a:	68 81 15 01 00       	push   $0x11581
   1075f:	ff 75 08             	pushl  0x8(%ebp)
   10762:	e8 08 fe ff ff       	call   1056f <do_default_handler>
   10767:	83 c4 10             	add    $0x10,%esp
}
   1076a:	90                   	nop
   1076b:	c9                   	leave  
   1076c:	c3                   	ret    

0001076d <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t * frame) {
   1076d:	f3 0f 1e fb          	endbr32 
   10771:	55                   	push   %ebp
   10772:	89 e5                	mov    %esp,%ebp
   10774:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "page-fault");
   10777:	83 ec 08             	sub    $0x8,%esp
   1077a:	68 94 15 01 00       	push   $0x11594
   1077f:	ff 75 08             	pushl  0x8(%ebp)
   10782:	e8 e8 fd ff ff       	call   1056f <do_default_handler>
   10787:	83 c4 10             	add    $0x10,%esp
}
   1078a:	90                   	nop
   1078b:	c9                   	leave  
   1078c:	c3                   	ret    

0001078d <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t * frame) {
   1078d:	f3 0f 1e fb          	endbr32 
   10791:	55                   	push   %ebp
   10792:	89 e5                	mov    %esp,%ebp
   10794:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10797:	83 ec 08             	sub    $0x8,%esp
   1079a:	68 9f 15 01 00       	push   $0x1159f
   1079f:	ff 75 08             	pushl  0x8(%ebp)
   107a2:	e8 c8 fd ff ff       	call   1056f <do_default_handler>
   107a7:	83 c4 10             	add    $0x10,%esp
}
   107aa:	90                   	nop
   107ab:	c9                   	leave  
   107ac:	c3                   	ret    

000107ad <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t * frame) {
   107ad:	f3 0f 1e fb          	endbr32 
   107b1:	55                   	push   %ebp
   107b2:	89 e5                	mov    %esp,%ebp
   107b4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   107b7:	83 ec 08             	sub    $0x8,%esp
   107ba:	68 bd 15 01 00       	push   $0x115bd
   107bf:	ff 75 08             	pushl  0x8(%ebp)
   107c2:	e8 a8 fd ff ff       	call   1056f <do_default_handler>
   107c7:	83 c4 10             	add    $0x10,%esp
}
   107ca:	90                   	nop
   107cb:	c9                   	leave  
   107cc:	c3                   	ret    

000107cd <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t * frame) {
   107cd:	f3 0f 1e fb          	endbr32 
   107d1:	55                   	push   %ebp
   107d2:	89 e5                	mov    %esp,%ebp
   107d4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   107d7:	83 ec 08             	sub    $0x8,%esp
   107da:	68 ce 15 01 00       	push   $0x115ce
   107df:	ff 75 08             	pushl  0x8(%ebp)
   107e2:	e8 88 fd ff ff       	call   1056f <do_default_handler>
   107e7:	83 c4 10             	add    $0x10,%esp
}
   107ea:	90                   	nop
   107eb:	c9                   	leave  
   107ec:	c3                   	ret    

000107ed <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t * frame) {
   107ed:	f3 0f 1e fb          	endbr32 
   107f1:	55                   	push   %ebp
   107f2:	89 e5                	mov    %esp,%ebp
   107f4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   107f7:	83 ec 08             	sub    $0x8,%esp
   107fa:	68 e0 15 01 00       	push   $0x115e0
   107ff:	ff 75 08             	pushl  0x8(%ebp)
   10802:	e8 68 fd ff ff       	call   1056f <do_default_handler>
   10807:	83 c4 10             	add    $0x10,%esp
}
   1080a:	90                   	nop
   1080b:	c9                   	leave  
   1080c:	c3                   	ret    

0001080d <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t * frame) {
   1080d:	f3 0f 1e fb          	endbr32 
   10811:	55                   	push   %ebp
   10812:	89 e5                	mov    %esp,%ebp
   10814:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   10817:	83 ec 08             	sub    $0x8,%esp
   1081a:	68 ff 15 01 00       	push   $0x115ff
   1081f:	ff 75 08             	pushl  0x8(%ebp)
   10822:	e8 48 fd ff ff       	call   1056f <do_default_handler>
   10827:	83 c4 10             	add    $0x10,%esp
}
   1082a:	90                   	nop
   1082b:	c9                   	leave  
   1082c:	c3                   	ret    

0001082d <init_pic>:


static void init_pic (void) {
   1082d:	f3 0f 1e fb          	endbr32 
   10831:	55                   	push   %ebp
   10832:	89 e5                	mov    %esp,%ebp
	outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10834:	6a 11                	push   $0x11
   10836:	6a 20                	push   $0x20
   10838:	e8 05 fc ff ff       	call   10442 <outb>
   1083d:	83 c4 08             	add    $0x8,%esp
	outb(PIC0_ICW2, IRQ_PIC_START);
   10840:	6a 20                	push   $0x20
   10842:	6a 21                	push   $0x21
   10844:	e8 f9 fb ff ff       	call   10442 <outb>
   10849:	83 c4 08             	add    $0x8,%esp
	outb(PIC0_ICW3, 1 << 2);
   1084c:	6a 04                	push   $0x4
   1084e:	6a 21                	push   $0x21
   10850:	e8 ed fb ff ff       	call   10442 <outb>
   10855:	83 c4 08             	add    $0x8,%esp
	outb(PIC0_ICW4, PIC_ICW4_8086);
   10858:	6a 01                	push   $0x1
   1085a:	6a 21                	push   $0x21
   1085c:	e8 e1 fb ff ff       	call   10442 <outb>
   10861:	83 c4 08             	add    $0x8,%esp


	outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10864:	6a 11                	push   $0x11
   10866:	68 a0 00 00 00       	push   $0xa0
   1086b:	e8 d2 fb ff ff       	call   10442 <outb>
   10870:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10873:	6a 28                	push   $0x28
   10875:	68 a1 00 00 00       	push   $0xa1
   1087a:	e8 c3 fb ff ff       	call   10442 <outb>
   1087f:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_ICW3, 2);
   10882:	6a 02                	push   $0x2
   10884:	68 a1 00 00 00       	push   $0xa1
   10889:	e8 b4 fb ff ff       	call   10442 <outb>
   1088e:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_ICW4, PIC_ICW4_8086);
   10891:	6a 01                	push   $0x1
   10893:	68 a1 00 00 00       	push   $0xa1
   10898:	e8 a5 fb ff ff       	call   10442 <outb>
   1089d:	83 c4 08             	add    $0x8,%esp

	outb(PIC0_IMR, 0xFF & ~(1 << 2));  // 不禁止来自第二芯片的中断信号
   108a0:	68 fb 00 00 00       	push   $0xfb
   108a5:	6a 21                	push   $0x21
   108a7:	e8 96 fb ff ff       	call   10442 <outb>
   108ac:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_IMR, 0xff); 
   108af:	68 ff 00 00 00       	push   $0xff
   108b4:	68 a1 00 00 00       	push   $0xa1
   108b9:	e8 84 fb ff ff       	call   10442 <outb>
   108be:	83 c4 08             	add    $0x8,%esp

}
   108c1:	90                   	nop
   108c2:	c9                   	leave  
   108c3:	c3                   	ret    

000108c4 <irq_init>:

void irq_init (void) {
   108c4:	f3 0f 1e fb          	endbr32 
   108c8:	55                   	push   %ebp
   108c9:	89 e5                	mov    %esp,%ebp
   108cb:	83 ec 18             	sub    $0x18,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i ++ ) {
   108ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108d5:	eb 25                	jmp    108fc <irq_init+0x38>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   108d7:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   108dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108df:	c1 e0 03             	shl    $0x3,%eax
   108e2:	05 80 1e 01 00       	add    $0x11e80,%eax
   108e7:	68 00 8e 00 00       	push   $0x8e00
   108ec:	52                   	push   %edx
   108ed:	6a 08                	push   $0x8
   108ef:	50                   	push   %eax
   108f0:	e8 65 fa ff ff       	call   1035a <gate_desc_set>
   108f5:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i ++ ) {
   108f8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108fc:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10900:	76 d5                	jbe    108d7 <irq_init+0x13>
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
    }

    // 设置异常处理接口
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   10902:	83 ec 08             	sub    $0x8,%esp
   10905:	68 4a 00 01 00       	push   $0x1004a
   1090a:	6a 00                	push   $0x0
   1090c:	e8 65 01 00 00       	call   10a76 <irq_install>
   10911:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   10914:	83 ec 08             	sub    $0x8,%esp
   10917:	68 69 00 01 00       	push   $0x10069
   1091c:	6a 01                	push   $0x1
   1091e:	e8 53 01 00 00       	call   10a76 <irq_install>
   10923:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   10926:	83 ec 08             	sub    $0x8,%esp
   10929:	68 88 00 01 00       	push   $0x10088
   1092e:	6a 02                	push   $0x2
   10930:	e8 41 01 00 00       	call   10a76 <irq_install>
   10935:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   10938:	83 ec 08             	sub    $0x8,%esp
   1093b:	68 a7 00 01 00       	push   $0x100a7
   10940:	6a 03                	push   $0x3
   10942:	e8 2f 01 00 00       	call   10a76 <irq_install>
   10947:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   1094a:	83 ec 08             	sub    $0x8,%esp
   1094d:	68 c6 00 01 00       	push   $0x100c6
   10952:	6a 04                	push   $0x4
   10954:	e8 1d 01 00 00       	call   10a76 <irq_install>
   10959:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   1095c:	83 ec 08             	sub    $0x8,%esp
   1095f:	68 e5 00 01 00       	push   $0x100e5
   10964:	6a 05                	push   $0x5
   10966:	e8 0b 01 00 00       	call   10a76 <irq_install>
   1096b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   1096e:	83 ec 08             	sub    $0x8,%esp
   10971:	68 04 01 01 00       	push   $0x10104
   10976:	6a 06                	push   $0x6
   10978:	e8 f9 00 00 00       	call   10a76 <irq_install>
   1097d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   10980:	83 ec 08             	sub    $0x8,%esp
   10983:	68 23 01 01 00       	push   $0x10123
   10988:	6a 07                	push   $0x7
   1098a:	e8 e7 00 00 00       	call   10a76 <irq_install>
   1098f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   10992:	83 ec 08             	sub    $0x8,%esp
   10995:	68 42 01 01 00       	push   $0x10142
   1099a:	6a 08                	push   $0x8
   1099c:	e8 d5 00 00 00       	call   10a76 <irq_install>
   109a1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   109a4:	83 ec 08             	sub    $0x8,%esp
   109a7:	68 5f 01 01 00       	push   $0x1015f
   109ac:	6a 0a                	push   $0xa
   109ae:	e8 c3 00 00 00       	call   10a76 <irq_install>
   109b3:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   109b6:	83 ec 08             	sub    $0x8,%esp
   109b9:	68 7c 01 01 00       	push   $0x1017c
   109be:	6a 0b                	push   $0xb
   109c0:	e8 b1 00 00 00       	call   10a76 <irq_install>
   109c5:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   109c8:	83 ec 08             	sub    $0x8,%esp
   109cb:	68 99 01 01 00       	push   $0x10199
   109d0:	6a 0c                	push   $0xc
   109d2:	e8 9f 00 00 00       	call   10a76 <irq_install>
   109d7:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   109da:	83 ec 08             	sub    $0x8,%esp
   109dd:	68 b6 01 01 00       	push   $0x101b6
   109e2:	6a 0d                	push   $0xd
   109e4:	e8 8d 00 00 00       	call   10a76 <irq_install>
   109e9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   109ec:	83 ec 08             	sub    $0x8,%esp
   109ef:	68 d3 01 01 00       	push   $0x101d3
   109f4:	6a 0e                	push   $0xe
   109f6:	e8 7b 00 00 00       	call   10a76 <irq_install>
   109fb:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   109fe:	83 ec 08             	sub    $0x8,%esp
   10a01:	68 f0 01 01 00       	push   $0x101f0
   10a06:	6a 10                	push   $0x10
   10a08:	e8 69 00 00 00       	call   10a76 <irq_install>
   10a0d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   10a10:	83 ec 08             	sub    $0x8,%esp
   10a13:	68 0f 02 01 00       	push   $0x1020f
   10a18:	6a 11                	push   $0x11
   10a1a:	e8 57 00 00 00       	call   10a76 <irq_install>
   10a1f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   10a22:	83 ec 08             	sub    $0x8,%esp
   10a25:	68 2c 02 01 00       	push   $0x1022c
   10a2a:	6a 12                	push   $0x12
   10a2c:	e8 45 00 00 00       	call   10a76 <irq_install>
   10a31:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   10a34:	83 ec 08             	sub    $0x8,%esp
   10a37:	68 4b 02 01 00       	push   $0x1024b
   10a3c:	6a 13                	push   $0x13
   10a3e:	e8 33 00 00 00       	call   10a76 <irq_install>
   10a43:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   10a46:	83 ec 08             	sub    $0x8,%esp
   10a49:	68 6a 02 01 00       	push   $0x1026a
   10a4e:	6a 14                	push   $0x14
   10a50:	e8 21 00 00 00       	call   10a76 <irq_install>
   10a55:	83 c4 10             	add    $0x10,%esp


    lidt((uint32_t)idt_table, sizeof(idt_table));
   10a58:	b8 80 1e 01 00       	mov    $0x11e80,%eax
   10a5d:	83 ec 08             	sub    $0x8,%esp
   10a60:	68 00 04 00 00       	push   $0x400
   10a65:	50                   	push   %eax
   10a66:	e8 06 fa ff ff       	call   10471 <lidt>
   10a6b:	83 c4 10             	add    $0x10,%esp

	init_pic();
   10a6e:	e8 ba fd ff ff       	call   1082d <init_pic>
}
   10a73:	90                   	nop
   10a74:	c9                   	leave  
   10a75:	c3                   	ret    

00010a76 <irq_install>:

int irq_install (int irq_num, irq_handler_t handler) {
   10a76:	f3 0f 1e fb          	endbr32 
   10a7a:	55                   	push   %ebp
   10a7b:	89 e5                	mov    %esp,%ebp
   10a7d:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR) {
   10a80:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10a84:	7e 07                	jle    10a8d <irq_install+0x17>
        return -1;
   10a86:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10a8b:	eb 25                	jmp    10ab2 <irq_install+0x3c>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, 
   10a8d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a90:	8b 55 08             	mov    0x8(%ebp),%edx
   10a93:	c1 e2 03             	shl    $0x3,%edx
   10a96:	81 c2 80 1e 01 00    	add    $0x11e80,%edx
   10a9c:	68 00 8e 00 00       	push   $0x8e00
   10aa1:	50                   	push   %eax
   10aa2:	6a 08                	push   $0x8
   10aa4:	52                   	push   %edx
   10aa5:	e8 b0 f8 ff ff       	call   1035a <gate_desc_set>
   10aaa:	83 c4 10             	add    $0x10,%esp
     (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);

    return 0;
   10aad:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10ab2:	c9                   	leave  
   10ab3:	c3                   	ret    

00010ab4 <irq_enable>:

void irq_enable (int irq_num) {
   10ab4:	f3 0f 1e fb          	endbr32 
   10ab8:	55                   	push   %ebp
   10ab9:	89 e5                	mov    %esp,%ebp
   10abb:	53                   	push   %ebx
   10abc:	83 ec 10             	sub    $0x10,%esp
	if (irq_num < IRQ_PIC_START) {
   10abf:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ac3:	7e 78                	jle    10b3d <irq_enable+0x89>
		return;
	}

	irq_num -= IRQ_PIC_START;
   10ac5:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
	if (irq_num < 8) {
   10ac9:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10acd:	7f 32                	jg     10b01 <irq_enable+0x4d>
		uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10acf:	6a 21                	push   $0x21
   10ad1:	e8 4f f9 ff ff       	call   10425 <inb>
   10ad6:	83 c4 04             	add    $0x4,%esp
   10ad9:	89 c2                	mov    %eax,%edx
   10adb:	8b 45 08             	mov    0x8(%ebp),%eax
   10ade:	bb 01 00 00 00       	mov    $0x1,%ebx
   10ae3:	89 c1                	mov    %eax,%ecx
   10ae5:	d3 e3                	shl    %cl,%ebx
   10ae7:	89 d8                	mov    %ebx,%eax
   10ae9:	f7 d0                	not    %eax
   10aeb:	21 d0                	and    %edx,%eax
   10aed:	88 45 fa             	mov    %al,-0x6(%ebp)
		outb(PIC0_IMR, mask);
   10af0:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10af4:	50                   	push   %eax
   10af5:	6a 21                	push   $0x21
   10af7:	e8 46 f9 ff ff       	call   10442 <outb>
   10afc:	83 c4 08             	add    $0x8,%esp
   10aff:	eb 3d                	jmp    10b3e <irq_enable+0x8a>
	} else {
		irq_num -= 8;
   10b01:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
		uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10b05:	68 a1 00 00 00       	push   $0xa1
   10b0a:	e8 16 f9 ff ff       	call   10425 <inb>
   10b0f:	83 c4 04             	add    $0x4,%esp
   10b12:	89 c2                	mov    %eax,%edx
   10b14:	8b 45 08             	mov    0x8(%ebp),%eax
   10b17:	bb 01 00 00 00       	mov    $0x1,%ebx
   10b1c:	89 c1                	mov    %eax,%ecx
   10b1e:	d3 e3                	shl    %cl,%ebx
   10b20:	89 d8                	mov    %ebx,%eax
   10b22:	f7 d0                	not    %eax
   10b24:	21 d0                	and    %edx,%eax
   10b26:	88 45 fb             	mov    %al,-0x5(%ebp)
		outb(PIC1_IMR, mask);
   10b29:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10b2d:	50                   	push   %eax
   10b2e:	68 a1 00 00 00       	push   $0xa1
   10b33:	e8 0a f9 ff ff       	call   10442 <outb>
   10b38:	83 c4 08             	add    $0x8,%esp
   10b3b:	eb 01                	jmp    10b3e <irq_enable+0x8a>
		return;
   10b3d:	90                   	nop
	}

}
   10b3e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10b41:	c9                   	leave  
   10b42:	c3                   	ret    

00010b43 <irq_disable>:


void irq_disable (int irq_num) {
   10b43:	f3 0f 1e fb          	endbr32 
   10b47:	55                   	push   %ebp
   10b48:	89 e5                	mov    %esp,%ebp
   10b4a:	53                   	push   %ebx
   10b4b:	83 ec 10             	sub    $0x10,%esp
	if (irq_num < IRQ_PIC_START) {
   10b4e:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10b52:	7e 74                	jle    10bc8 <irq_disable+0x85>
		return;
	}

	irq_num -= IRQ_PIC_START;
   10b54:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
	if (irq_num < 8) {
   10b58:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10b5c:	7f 30                	jg     10b8e <irq_disable+0x4b>
		uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10b5e:	6a 21                	push   $0x21
   10b60:	e8 c0 f8 ff ff       	call   10425 <inb>
   10b65:	83 c4 04             	add    $0x4,%esp
   10b68:	89 c3                	mov    %eax,%ebx
   10b6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6d:	ba 01 00 00 00       	mov    $0x1,%edx
   10b72:	89 c1                	mov    %eax,%ecx
   10b74:	d3 e2                	shl    %cl,%edx
   10b76:	89 d0                	mov    %edx,%eax
   10b78:	09 d8                	or     %ebx,%eax
   10b7a:	88 45 fa             	mov    %al,-0x6(%ebp)
		outb(PIC0_IMR, mask);
   10b7d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10b81:	50                   	push   %eax
   10b82:	6a 21                	push   $0x21
   10b84:	e8 b9 f8 ff ff       	call   10442 <outb>
   10b89:	83 c4 08             	add    $0x8,%esp
   10b8c:	eb 3b                	jmp    10bc9 <irq_disable+0x86>
	} else {
		irq_num -= 8;
   10b8e:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
		uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10b92:	68 a1 00 00 00       	push   $0xa1
   10b97:	e8 89 f8 ff ff       	call   10425 <inb>
   10b9c:	83 c4 04             	add    $0x4,%esp
   10b9f:	89 c3                	mov    %eax,%ebx
   10ba1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba4:	ba 01 00 00 00       	mov    $0x1,%edx
   10ba9:	89 c1                	mov    %eax,%ecx
   10bab:	d3 e2                	shl    %cl,%edx
   10bad:	89 d0                	mov    %edx,%eax
   10baf:	09 d8                	or     %ebx,%eax
   10bb1:	88 45 fb             	mov    %al,-0x5(%ebp)
		outb(PIC1_IMR, mask);
   10bb4:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10bb8:	50                   	push   %eax
   10bb9:	68 a1 00 00 00       	push   $0xa1
   10bbe:	e8 7f f8 ff ff       	call   10442 <outb>
   10bc3:	83 c4 08             	add    $0x8,%esp
   10bc6:	eb 01                	jmp    10bc9 <irq_disable+0x86>
		return;
   10bc8:	90                   	nop
	}

}
   10bc9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10bcc:	c9                   	leave  
   10bcd:	c3                   	ret    

00010bce <irq_disable_global>:

// 全局中断关闭
void irq_disable_global (void) {
   10bce:	f3 0f 1e fb          	endbr32 
   10bd2:	55                   	push   %ebp
   10bd3:	89 e5                	mov    %esp,%ebp
	cli();
   10bd5:	e8 89 f8 ff ff       	call   10463 <cli>
}
   10bda:	90                   	nop
   10bdb:	5d                   	pop    %ebp
   10bdc:	c3                   	ret    

00010bdd <irq_enable_global>:

// 全局中断开启
void irq_enable_global (void) {
   10bdd:	f3 0f 1e fb          	endbr32 
   10be1:	55                   	push   %ebp
   10be2:	89 e5                	mov    %esp,%ebp
	sti();
   10be4:	e8 81 f8 ff ff       	call   1046a <sti>
}
   10be9:	90                   	nop
   10bea:	5d                   	pop    %ebp
   10beb:	c3                   	ret    

00010bec <pic_send_eoi>:

void pic_send_eoi (int irq_num) {
   10bec:	f3 0f 1e fb          	endbr32 
   10bf0:	55                   	push   %ebp
   10bf1:	89 e5                	mov    %esp,%ebp
	irq_num -= IRQ_PIC_START;
   10bf3:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
	if (irq_num >= 8) {
   10bf7:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10bfb:	7e 0f                	jle    10c0c <pic_send_eoi+0x20>
		outb(PIC1_OCW2, PIC_OCW2_EOI);
   10bfd:	6a 20                	push   $0x20
   10bff:	68 a0 00 00 00       	push   $0xa0
   10c04:	e8 39 f8 ff ff       	call   10442 <outb>
   10c09:	83 c4 08             	add    $0x8,%esp
	}

	outb(PIC0_OCW2, PIC_OCW2_EOI);
   10c0c:	6a 20                	push   $0x20
   10c0e:	6a 20                	push   $0x20
   10c10:	e8 2d f8 ff ff       	call   10442 <outb>
   10c15:	83 c4 08             	add    $0x8,%esp
}
   10c18:	90                   	nop
   10c19:	c9                   	leave  
   10c1a:	c3                   	ret    

00010c1b <outb>:
static inline void outb (uint16_t port, uint8_t data) {
   10c1b:	55                   	push   %ebp
   10c1c:	89 e5                	mov    %esp,%ebp
   10c1e:	83 ec 08             	sub    $0x8,%esp
   10c21:	8b 45 08             	mov    0x8(%ebp),%eax
   10c24:	8b 55 0c             	mov    0xc(%ebp),%edx
   10c27:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10c2b:	89 d0                	mov    %edx,%eax
   10c2d:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   10c30:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10c34:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10c38:	ee                   	out    %al,(%dx)
}
   10c39:	90                   	nop
   10c3a:	c9                   	leave  
   10c3b:	c3                   	ret    

00010c3c <do_handler_time>:
#include "os_cfg.h"

static uint32_t sys_tick;


void do_handler_time (exception_frame_t * frame) {
   10c3c:	f3 0f 1e fb          	endbr32 
   10c40:	55                   	push   %ebp
   10c41:	89 e5                	mov    %esp,%ebp
   10c43:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10c46:	a1 80 22 01 00       	mov    0x12280,%eax
   10c4b:	83 c0 01             	add    $0x1,%eax
   10c4e:	a3 80 22 01 00       	mov    %eax,0x12280

    pic_send_eoi(IRQ0_TIMER);
   10c53:	83 ec 0c             	sub    $0xc,%esp
   10c56:	6a 20                	push   $0x20
   10c58:	e8 8f ff ff ff       	call   10bec <pic_send_eoi>
   10c5d:	83 c4 10             	add    $0x10,%esp
}
   10c60:	90                   	nop
   10c61:	c9                   	leave  
   10c62:	c3                   	ret    

00010c63 <init_pit>:
static void init_pit (void) {
   10c63:	f3 0f 1e fb          	endbr32 
   10c67:	55                   	push   %ebp
   10c68:	89 e5                	mov    %esp,%ebp
   10c6a:	83 ec 18             	sub    $0x18,%esp

    uint32_t reload_count =  PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   10c6d:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   10c74:	6a 36                	push   $0x36
   10c76:	6a 43                	push   $0x43
   10c78:	e8 9e ff ff ff       	call   10c1b <outb>
   10c7d:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   10c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c83:	0f b6 c0             	movzbl %al,%eax
   10c86:	50                   	push   %eax
   10c87:	6a 40                	push   $0x40
   10c89:	e8 8d ff ff ff       	call   10c1b <outb>
   10c8e:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   10c91:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c94:	c1 e8 08             	shr    $0x8,%eax
   10c97:	0f b6 c0             	movzbl %al,%eax
   10c9a:	50                   	push   %eax
   10c9b:	6a 40                	push   $0x40
   10c9d:	e8 79 ff ff ff       	call   10c1b <outb>
   10ca2:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time);
   10ca5:	83 ec 08             	sub    $0x8,%esp
   10ca8:	68 89 02 01 00       	push   $0x10289
   10cad:	6a 20                	push   $0x20
   10caf:	e8 c2 fd ff ff       	call   10a76 <irq_install>
   10cb4:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10cb7:	83 ec 0c             	sub    $0xc,%esp
   10cba:	6a 20                	push   $0x20
   10cbc:	e8 f3 fd ff ff       	call   10ab4 <irq_enable>
   10cc1:	83 c4 10             	add    $0x10,%esp
}
   10cc4:	90                   	nop
   10cc5:	c9                   	leave  
   10cc6:	c3                   	ret    

00010cc7 <time_init>:

void time_init (void) {
   10cc7:	f3 0f 1e fb          	endbr32 
   10ccb:	55                   	push   %ebp
   10ccc:	89 e5                	mov    %esp,%ebp
   10cce:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10cd1:	c7 05 80 22 01 00 00 	movl   $0x0,0x12280
   10cd8:	00 00 00 
    init_pit();
   10cdb:	e8 83 ff ff ff       	call   10c63 <init_pit>
}
   10ce0:	90                   	nop
   10ce1:	c9                   	leave  
   10ce2:	c3                   	ret    

00010ce3 <kernel_init>:
#include "tools/log.h"


static boot_info_t * init_boot_info;

void kernel_init (boot_info_t * boot_info) {
   10ce3:	f3 0f 1e fb          	endbr32 
   10ce7:	55                   	push   %ebp
   10ce8:	89 e5                	mov    %esp,%ebp
   10cea:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   10ced:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf0:	a3 84 22 01 00       	mov    %eax,0x12284
    cpu_init();
   10cf5:	e8 1c f7 ff ff       	call   10416 <cpu_init>

    log_init();
   10cfa:	e8 7e 05 00 00       	call   1127d <log_init>
    irq_init();
   10cff:	e8 c0 fb ff ff       	call   108c4 <irq_init>
    time_init();
   10d04:	e8 be ff ff ff       	call   10cc7 <time_init>
}
   10d09:	90                   	nop
   10d0a:	c9                   	leave  
   10d0b:	c3                   	ret    

00010d0c <init_main>:

void init_main (void) {
   10d0c:	f3 0f 1e fb          	endbr32 
   10d10:	55                   	push   %ebp
   10d11:	89 e5                	mov    %esp,%ebp
   10d13:	83 ec 18             	sub    $0x18,%esp
    log_printf("Kernel is running....");
   10d16:	83 ec 0c             	sub    $0xc,%esp
   10d19:	68 19 16 01 00       	push   $0x11619
   10d1e:	e8 d3 05 00 00       	call   112f6 <log_printf>
   10d23:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s", OS_VERSION);
   10d26:	83 ec 08             	sub    $0x8,%esp
   10d29:	68 2f 16 01 00       	push   $0x1162f
   10d2e:	68 35 16 01 00       	push   $0x11635
   10d33:	e8 be 05 00 00       	call   112f6 <log_printf>
   10d38:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 1234, -12345, 0x123456, 'a');
   10d3b:	83 ec 0c             	sub    $0xc,%esp
   10d3e:	6a 61                	push   $0x61
   10d40:	68 56 34 12 00       	push   $0x123456
   10d45:	68 c7 cf ff ff       	push   $0xffffcfc7
   10d4a:	68 d2 04 00 00       	push   $0x4d2
   10d4f:	68 41 16 01 00       	push   $0x11641
   10d54:	e8 9d 05 00 00       	call   112f6 <log_printf>
   10d59:	83 c4 20             	add    $0x20,%esp
    

    int a = 3 / 0;
   10d5c:	b8 03 00 00 00       	mov    $0x3,%eax
   10d61:	b9 00 00 00 00       	mov    $0x0,%ecx
   10d66:	99                   	cltd   
   10d67:	f7 f9                	idiv   %ecx
   10d69:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // irq_enable_global();
    for (;;) {}
   10d6c:	eb fe                	jmp    10d6c <init_main+0x60>

00010d6e <kernel_strcpy>:
#include "comm/types.h"
#include "tools/klib.h"

// 字符串复制
void kernel_strcpy(char * dest, const char * src) {
   10d6e:	f3 0f 1e fb          	endbr32 
   10d72:	55                   	push   %ebp
   10d73:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   10d75:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d79:	74 3b                	je     10db6 <kernel_strcpy+0x48>
   10d7b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10d7f:	74 35                	je     10db6 <kernel_strcpy+0x48>
        return;
    }

    while (*dest && *src) {
   10d81:	eb 17                	jmp    10d9a <kernel_strcpy+0x2c>
        *dest++ = *src++;
   10d83:	8b 55 0c             	mov    0xc(%ebp),%edx
   10d86:	8d 42 01             	lea    0x1(%edx),%eax
   10d89:	89 45 0c             	mov    %eax,0xc(%ebp)
   10d8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d8f:	8d 48 01             	lea    0x1(%eax),%ecx
   10d92:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10d95:	0f b6 12             	movzbl (%edx),%edx
   10d98:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   10d9a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d9d:	0f b6 00             	movzbl (%eax),%eax
   10da0:	84 c0                	test   %al,%al
   10da2:	74 0a                	je     10dae <kernel_strcpy+0x40>
   10da4:	8b 45 0c             	mov    0xc(%ebp),%eax
   10da7:	0f b6 00             	movzbl (%eax),%eax
   10daa:	84 c0                	test   %al,%al
   10dac:	75 d5                	jne    10d83 <kernel_strcpy+0x15>
    }

    *dest = '\0';  // 结束字符
   10dae:	8b 45 08             	mov    0x8(%ebp),%eax
   10db1:	c6 00 00             	movb   $0x0,(%eax)
   10db4:	eb 01                	jmp    10db7 <kernel_strcpy+0x49>
        return;
   10db6:	90                   	nop
}
   10db7:	5d                   	pop    %ebp
   10db8:	c3                   	ret    

00010db9 <kernel_strncpy>:

// 字符串复制
void kernel_strncpy(char * dest, const char * src, int size) {
   10db9:	f3 0f 1e fb          	endbr32 
   10dbd:	55                   	push   %ebp
   10dbe:	89 e5                	mov    %esp,%ebp
   10dc0:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   10dc3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10dc7:	74 61                	je     10e2a <kernel_strncpy+0x71>
   10dc9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10dcd:	74 5b                	je     10e2a <kernel_strncpy+0x71>
   10dcf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10dd3:	74 55                	je     10e2a <kernel_strncpy+0x71>
        return;
    }

    char * d = dest;
   10dd5:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   10ddb:	8b 45 0c             	mov    0xc(%ebp),%eax
   10dde:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while((size-- > 0) && (*s)) {
   10de1:	eb 17                	jmp    10dfa <kernel_strncpy+0x41>
        *d++ = *s++;
   10de3:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10de6:	8d 42 01             	lea    0x1(%edx),%eax
   10de9:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10dec:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10def:	8d 48 01             	lea    0x1(%eax),%ecx
   10df2:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10df5:	0f b6 12             	movzbl (%edx),%edx
   10df8:	88 10                	mov    %dl,(%eax)
    while((size-- > 0) && (*s)) {
   10dfa:	8b 45 10             	mov    0x10(%ebp),%eax
   10dfd:	8d 50 ff             	lea    -0x1(%eax),%edx
   10e00:	89 55 10             	mov    %edx,0x10(%ebp)
   10e03:	85 c0                	test   %eax,%eax
   10e05:	7e 0a                	jle    10e11 <kernel_strncpy+0x58>
   10e07:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10e0a:	0f b6 00             	movzbl (%eax),%eax
   10e0d:	84 c0                	test   %al,%al
   10e0f:	75 d2                	jne    10de3 <kernel_strncpy+0x2a>
    }

    if (size == 0) {
   10e11:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10e15:	75 0b                	jne    10e22 <kernel_strncpy+0x69>
        *(d - 1) = '\0';
   10e17:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e1a:	83 e8 01             	sub    $0x1,%eax
   10e1d:	c6 00 00             	movb   $0x0,(%eax)
   10e20:	eb 09                	jmp    10e2b <kernel_strncpy+0x72>
    } else {
        *d = '\0';
   10e22:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e25:	c6 00 00             	movb   $0x0,(%eax)
   10e28:	eb 01                	jmp    10e2b <kernel_strncpy+0x72>
        return;
   10e2a:	90                   	nop
    }

}
   10e2b:	c9                   	leave  
   10e2c:	c3                   	ret    

00010e2d <kernel_strncmp>:

// 字符串比较
int kernel_strncmp(const char * s1, const char * s2, int size) {
   10e2d:	f3 0f 1e fb          	endbr32 
   10e31:	55                   	push   %ebp
   10e32:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   10e34:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e38:	74 06                	je     10e40 <kernel_strncmp+0x13>
   10e3a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e3e:	75 0f                	jne    10e4f <kernel_strncmp+0x22>
        return -1;
   10e40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10e45:	eb 62                	jmp    10ea9 <kernel_strncmp+0x7c>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   10e47:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   10e4b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   10e4f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e52:	0f b6 00             	movzbl (%eax),%eax
   10e55:	84 c0                	test   %al,%al
   10e57:	74 20                	je     10e79 <kernel_strncmp+0x4c>
   10e59:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e5c:	0f b6 00             	movzbl (%eax),%eax
   10e5f:	84 c0                	test   %al,%al
   10e61:	74 16                	je     10e79 <kernel_strncmp+0x4c>
   10e63:	8b 45 08             	mov    0x8(%ebp),%eax
   10e66:	0f b6 10             	movzbl (%eax),%edx
   10e69:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e6c:	0f b6 00             	movzbl (%eax),%eax
   10e6f:	38 c2                	cmp    %al,%dl
   10e71:	75 06                	jne    10e79 <kernel_strncmp+0x4c>
   10e73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10e77:	75 ce                	jne    10e47 <kernel_strncmp+0x1a>
    }

    // s1 = "abc"
    // s2 = "abcdef"  这样认为相同，比到长度最小的看想不相同，这里是这样实现的。

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   10e79:	8b 45 08             	mov    0x8(%ebp),%eax
   10e7c:	0f b6 00             	movzbl (%eax),%eax
   10e7f:	84 c0                	test   %al,%al
   10e81:	74 21                	je     10ea4 <kernel_strncmp+0x77>
   10e83:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e86:	0f b6 00             	movzbl (%eax),%eax
   10e89:	84 c0                	test   %al,%al
   10e8b:	74 17                	je     10ea4 <kernel_strncmp+0x77>
   10e8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e90:	0f b6 10             	movzbl (%eax),%edx
   10e93:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e96:	0f b6 00             	movzbl (%eax),%eax
   10e99:	38 c2                	cmp    %al,%dl
   10e9b:	74 07                	je     10ea4 <kernel_strncmp+0x77>
   10e9d:	b8 01 00 00 00       	mov    $0x1,%eax
   10ea2:	eb 05                	jmp    10ea9 <kernel_strncmp+0x7c>
   10ea4:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10ea9:	5d                   	pop    %ebp
   10eaa:	c3                   	ret    

00010eab <kernel_strlen>:

// 求字符串长度
int kernel_strlen(const char * str) {
   10eab:	f3 0f 1e fb          	endbr32 
   10eaf:	55                   	push   %ebp
   10eb0:	89 e5                	mov    %esp,%ebp
   10eb2:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   10eb5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10eb9:	75 07                	jne    10ec2 <kernel_strlen+0x17>
        return 0;
   10ebb:	b8 00 00 00 00       	mov    $0x0,%eax
   10ec0:	eb 26                	jmp    10ee8 <kernel_strlen+0x3d>
    }

    const char * c = str;
   10ec2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ec5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   10ec8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while(*c++) {
   10ecf:	eb 04                	jmp    10ed5 <kernel_strlen+0x2a>
        len++;
   10ed1:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(*c++) {
   10ed5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ed8:	8d 50 01             	lea    0x1(%eax),%edx
   10edb:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10ede:	0f b6 00             	movzbl (%eax),%eax
   10ee1:	84 c0                	test   %al,%al
   10ee3:	75 ec                	jne    10ed1 <kernel_strlen+0x26>
    }

    return len;
   10ee5:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   10ee8:	c9                   	leave  
   10ee9:	c3                   	ret    

00010eea <kernel_memcpy>:


void kernel_memcpy(void * dest, void * src, int size) {
   10eea:	f3 0f 1e fb          	endbr32 
   10eee:	55                   	push   %ebp
   10eef:	89 e5                	mov    %esp,%ebp
   10ef1:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   10ef4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ef8:	74 40                	je     10f3a <kernel_memcpy+0x50>
   10efa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10efe:	74 3a                	je     10f3a <kernel_memcpy+0x50>
   10f00:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f04:	74 34                	je     10f3a <kernel_memcpy+0x50>
        return;
    }

    uint8_t * s = (uint8_t *)src;
   10f06:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f09:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   10f0c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f0f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   10f12:	eb 17                	jmp    10f2b <kernel_memcpy+0x41>
        *d++ = *s++;
   10f14:	8b 55 fc             	mov    -0x4(%ebp),%edx
   10f17:	8d 42 01             	lea    0x1(%edx),%eax
   10f1a:	89 45 fc             	mov    %eax,-0x4(%ebp)
   10f1d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10f20:	8d 48 01             	lea    0x1(%eax),%ecx
   10f23:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   10f26:	0f b6 12             	movzbl (%edx),%edx
   10f29:	88 10                	mov    %dl,(%eax)
    while(size--) {
   10f2b:	8b 45 10             	mov    0x10(%ebp),%eax
   10f2e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f31:	89 55 10             	mov    %edx,0x10(%ebp)
   10f34:	85 c0                	test   %eax,%eax
   10f36:	75 dc                	jne    10f14 <kernel_memcpy+0x2a>
   10f38:	eb 01                	jmp    10f3b <kernel_memcpy+0x51>
        return;
   10f3a:	90                   	nop
    }
}
   10f3b:	c9                   	leave  
   10f3c:	c3                   	ret    

00010f3d <kernel_memset>:

void kernel_memset(void * dest, uint8_t v, int size) {
   10f3d:	f3 0f 1e fb          	endbr32 
   10f41:	55                   	push   %ebp
   10f42:	89 e5                	mov    %esp,%ebp
   10f44:	83 ec 14             	sub    $0x14,%esp
   10f47:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f4a:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   10f4d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f51:	74 2c                	je     10f7f <kernel_memset+0x42>
   10f53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f57:	74 26                	je     10f7f <kernel_memset+0x42>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   10f59:	8b 45 08             	mov    0x8(%ebp),%eax
   10f5c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size --) {
   10f5f:	eb 0f                	jmp    10f70 <kernel_memset+0x33>
        *d++ = v;
   10f61:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f64:	8d 50 01             	lea    0x1(%eax),%edx
   10f67:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10f6a:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   10f6e:	88 10                	mov    %dl,(%eax)
    while(size --) {
   10f70:	8b 45 10             	mov    0x10(%ebp),%eax
   10f73:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f76:	89 55 10             	mov    %edx,0x10(%ebp)
   10f79:	85 c0                	test   %eax,%eax
   10f7b:	75 e4                	jne    10f61 <kernel_memset+0x24>
   10f7d:	eb 01                	jmp    10f80 <kernel_memset+0x43>
        return;
   10f7f:	90                   	nop
    }

}
   10f80:	c9                   	leave  
   10f81:	c3                   	ret    

00010f82 <kernel_memcmp>:
int kernel_memcmp(void * d1, void * d2, int size) {
   10f82:	f3 0f 1e fb          	endbr32 
   10f86:	55                   	push   %ebp
   10f87:	89 e5                	mov    %esp,%ebp
   10f89:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   10f8c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f90:	74 0c                	je     10f9e <kernel_memcmp+0x1c>
   10f92:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f96:	74 06                	je     10f9e <kernel_memcmp+0x1c>
   10f98:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f9c:	75 07                	jne    10fa5 <kernel_memcmp+0x23>
        return 1;
   10f9e:	b8 01 00 00 00       	mov    $0x1,%eax
   10fa3:	eb 43                	jmp    10fe8 <kernel_memcmp+0x66>
    }

    uint8_t * p_d1 = (uint8_t *)d1;
   10fa5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * p_d2 = (uint8_t *)d2;
   10fab:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fae:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   10fb1:	eb 23                	jmp    10fd6 <kernel_memcmp+0x54>
        if (*p_d1++ != *p_d2++) {
   10fb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fb6:	8d 50 01             	lea    0x1(%eax),%edx
   10fb9:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10fbc:	0f b6 08             	movzbl (%eax),%ecx
   10fbf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10fc2:	8d 50 01             	lea    0x1(%eax),%edx
   10fc5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   10fc8:	0f b6 00             	movzbl (%eax),%eax
   10fcb:	38 c1                	cmp    %al,%cl
   10fcd:	74 07                	je     10fd6 <kernel_memcmp+0x54>
            return 1;
   10fcf:	b8 01 00 00 00       	mov    $0x1,%eax
   10fd4:	eb 12                	jmp    10fe8 <kernel_memcmp+0x66>
    while(size--) {
   10fd6:	8b 45 10             	mov    0x10(%ebp),%eax
   10fd9:	8d 50 ff             	lea    -0x1(%eax),%edx
   10fdc:	89 55 10             	mov    %edx,0x10(%ebp)
   10fdf:	85 c0                	test   %eax,%eax
   10fe1:	75 d0                	jne    10fb3 <kernel_memcmp+0x31>
        }
    }

    return 0;
   10fe3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10fe8:	c9                   	leave  
   10fe9:	c3                   	ret    

00010fea <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   10fea:	f3 0f 1e fb          	endbr32 
   10fee:	55                   	push   %ebp
   10fef:	89 e5                	mov    %esp,%ebp
   10ff1:	83 ec 10             	sub    $0x10,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   10ff4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   10ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ffd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   11000:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11004:	74 1d                	je     11023 <kernel_itoa+0x39>
   11006:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1100a:	74 17                	je     11023 <kernel_itoa+0x39>
   1100c:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11010:	74 11                	je     11023 <kernel_itoa+0x39>
   11012:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11016:	74 0b                	je     11023 <kernel_itoa+0x39>
        *p = '\0';
   11018:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1101b:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1101e:	e9 a2 00 00 00       	jmp    110c5 <kernel_itoa+0xdb>
    }

    if ((num < 0) && (base == 10)) {
   11023:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11027:	79 12                	jns    1103b <kernel_itoa+0x51>
   11029:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1102d:	75 0c                	jne    1103b <kernel_itoa+0x51>
        *p++ = '-';
   1102f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11032:	8d 50 01             	lea    0x1(%eax),%edx
   11035:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11038:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    // 一位一位的转换
    do {
        char ch = num2ch[num % base + 15];
   1103b:	8b 0d 70 16 01 00    	mov    0x11670,%ecx
   11041:	8b 45 0c             	mov    0xc(%ebp),%eax
   11044:	99                   	cltd   
   11045:	f7 7d 10             	idivl  0x10(%ebp)
   11048:	89 d0                	mov    %edx,%eax
   1104a:	83 c0 0f             	add    $0xf,%eax
   1104d:	01 c8                	add    %ecx,%eax
   1104f:	0f b6 00             	movzbl (%eax),%eax
   11052:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   11055:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11058:	8d 50 01             	lea    0x1(%eax),%edx
   1105b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1105e:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   11062:	88 10                	mov    %dl,(%eax)
        num /= base;
   11064:	8b 45 0c             	mov    0xc(%ebp),%eax
   11067:	99                   	cltd   
   11068:	f7 7d 10             	idivl  0x10(%ebp)
   1106b:	89 45 0c             	mov    %eax,0xc(%ebp)
    }while(num);
   1106e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11072:	75 c7                	jne    1103b <kernel_itoa+0x51>

    *p-- = '\0';
   11074:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11077:	8d 50 ff             	lea    -0x1(%eax),%edx
   1107a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1107d:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (old_num > 0) ? buf : buf + 1;
   11080:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11084:	7f 08                	jg     1108e <kernel_itoa+0xa4>
   11086:	8b 45 08             	mov    0x8(%ebp),%eax
   11089:	83 c0 01             	add    $0x1,%eax
   1108c:	eb 03                	jmp    11091 <kernel_itoa+0xa7>
   1108e:	8b 45 08             	mov    0x8(%ebp),%eax
   11091:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p) {
   11094:	eb 27                	jmp    110bd <kernel_itoa+0xd3>
        char ch = *start;
   11096:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11099:	0f b6 00             	movzbl (%eax),%eax
   1109c:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1109f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110a2:	0f b6 10             	movzbl (%eax),%edx
   110a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   110a8:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   110aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110ad:	8d 50 ff             	lea    -0x1(%eax),%edx
   110b0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   110b3:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   110b7:	88 10                	mov    %dl,(%eax)
        start++;
   110b9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p) {
   110bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   110c0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   110c3:	72 d1                	jb     11096 <kernel_itoa+0xac>
    }
}
   110c5:	c9                   	leave  
   110c6:	c3                   	ret    

000110c7 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buffer, const char * fmt, ...) {
   110c7:	f3 0f 1e fb          	endbr32 
   110cb:	55                   	push   %ebp
   110cc:	89 e5                	mov    %esp,%ebp
   110ce:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args, fmt);
   110d1:	8d 45 10             	lea    0x10(%ebp),%eax
   110d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buffer, fmt, args);
   110d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110da:	83 ec 04             	sub    $0x4,%esp
   110dd:	50                   	push   %eax
   110de:	ff 75 0c             	pushl  0xc(%ebp)
   110e1:	ff 75 08             	pushl  0x8(%ebp)
   110e4:	e8 06 00 00 00       	call   110ef <kernel_vsprintf>
   110e9:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   110ec:	90                   	nop
   110ed:	c9                   	leave  
   110ee:	c3                   	ret    

000110ef <kernel_vsprintf>:


/**
 * 格式化字符串
 */
void kernel_vsprintf(char * buffer, const char * fmt, va_list args) {
   110ef:	f3 0f 1e fb          	endbr32 
   110f3:	55                   	push   %ebp
   110f4:	89 e5                	mov    %esp,%ebp
   110f6:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   110f9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char * curr = buffer;
   11100:	8b 45 08             	mov    0x8(%ebp),%eax
   11103:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   11106:	e9 17 01 00 00       	jmp    11222 <kernel_vsprintf+0x133>
        switch (state) {
   1110b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1110f:	74 0b                	je     1111c <kernel_vsprintf+0x2d>
   11111:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   11115:	74 2b                	je     11142 <kernel_vsprintf+0x53>
   11117:	e9 06 01 00 00       	jmp    11222 <kernel_vsprintf+0x133>
            // 普通字符
            case NORMAL:
                if (ch == '%') {
   1111c:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11120:	75 0c                	jne    1112e <kernel_vsprintf+0x3f>
                    state = READ_FMT;
   11122:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11129:	e9 f4 00 00 00       	jmp    11222 <kernel_vsprintf+0x133>
                } else {
                    *curr++ = ch;
   1112e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11131:	8d 50 01             	lea    0x1(%eax),%edx
   11134:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11137:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1113b:	88 10                	mov    %dl,(%eax)
                }
                break;
   1113d:	e9 e0 00 00 00       	jmp    11222 <kernel_vsprintf+0x133>
            // 格式化控制字符，只支持部分
            case READ_FMT:
                if (ch == 'd') {
   11142:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11146:	75 31                	jne    11179 <kernel_vsprintf+0x8a>
                    int num = va_arg(args, int);
   11148:	8b 45 10             	mov    0x10(%ebp),%eax
   1114b:	8d 50 04             	lea    0x4(%eax),%edx
   1114e:	89 55 10             	mov    %edx,0x10(%ebp)
   11151:	8b 00                	mov    (%eax),%eax
   11153:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr, num, 10);
   11156:	6a 0a                	push   $0xa
   11158:	ff 75 e4             	pushl  -0x1c(%ebp)
   1115b:	ff 75 f8             	pushl  -0x8(%ebp)
   1115e:	e8 87 fe ff ff       	call   10fea <kernel_itoa>
   11163:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   11166:	ff 75 f8             	pushl  -0x8(%ebp)
   11169:	e8 3d fd ff ff       	call   10eab <kernel_strlen>
   1116e:	83 c4 04             	add    $0x4,%esp
   11171:	01 45 f8             	add    %eax,-0x8(%ebp)
   11174:	e9 a1 00 00 00       	jmp    1121a <kernel_vsprintf+0x12b>

                } else if (ch == 'x') {
   11179:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1117d:	75 2e                	jne    111ad <kernel_vsprintf+0xbe>
                    int num = va_arg(args, int);
   1117f:	8b 45 10             	mov    0x10(%ebp),%eax
   11182:	8d 50 04             	lea    0x4(%eax),%edx
   11185:	89 55 10             	mov    %edx,0x10(%ebp)
   11188:	8b 00                	mov    (%eax),%eax
   1118a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr, num, 16);
   1118d:	6a 10                	push   $0x10
   1118f:	ff 75 e8             	pushl  -0x18(%ebp)
   11192:	ff 75 f8             	pushl  -0x8(%ebp)
   11195:	e8 50 fe ff ff       	call   10fea <kernel_itoa>
   1119a:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   1119d:	ff 75 f8             	pushl  -0x8(%ebp)
   111a0:	e8 06 fd ff ff       	call   10eab <kernel_strlen>
   111a5:	83 c4 04             	add    $0x4,%esp
   111a8:	01 45 f8             	add    %eax,-0x8(%ebp)
   111ab:	eb 6d                	jmp    1121a <kernel_vsprintf+0x12b>

                } else if (ch == 'c') {
   111ad:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   111b1:	75 1f                	jne    111d2 <kernel_vsprintf+0xe3>
                    char c = va_arg(args, int);
   111b3:	8b 45 10             	mov    0x10(%ebp),%eax
   111b6:	8d 50 04             	lea    0x4(%eax),%edx
   111b9:	89 55 10             	mov    %edx,0x10(%ebp)
   111bc:	8b 00                	mov    (%eax),%eax
   111be:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   111c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111c4:	8d 50 01             	lea    0x1(%eax),%edx
   111c7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   111ca:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   111ce:	88 10                	mov    %dl,(%eax)
   111d0:	eb 48                	jmp    1121a <kernel_vsprintf+0x12b>
                    
                } else if (ch == 's') {
   111d2:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   111d6:	75 42                	jne    1121a <kernel_vsprintf+0x12b>
                    const char * str = va_arg(args, char *);
   111d8:	8b 45 10             	mov    0x10(%ebp),%eax
   111db:	8d 50 04             	lea    0x4(%eax),%edx
   111de:	89 55 10             	mov    %edx,0x10(%ebp)
   111e1:	8b 00                	mov    (%eax),%eax
   111e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   111e6:	ff 75 f4             	pushl  -0xc(%ebp)
   111e9:	e8 bd fc ff ff       	call   10eab <kernel_strlen>
   111ee:	83 c4 04             	add    $0x4,%esp
   111f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while (len--) {
   111f4:	eb 17                	jmp    1120d <kernel_vsprintf+0x11e>
                        *curr++ = *str++;
   111f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   111f9:	8d 42 01             	lea    0x1(%edx),%eax
   111fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
   111ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11202:	8d 48 01             	lea    0x1(%eax),%ecx
   11205:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11208:	0f b6 12             	movzbl (%edx),%edx
   1120b:	88 10                	mov    %dl,(%eax)
                    while (len--) {
   1120d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11210:	8d 50 ff             	lea    -0x1(%eax),%edx
   11213:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11216:	85 c0                	test   %eax,%eax
   11218:	75 dc                	jne    111f6 <kernel_vsprintf+0x107>
                    }
                }

                state = NORMAL;
   1121a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   11221:	90                   	nop
    while ((ch = *fmt++)) {
   11222:	8b 45 0c             	mov    0xc(%ebp),%eax
   11225:	8d 50 01             	lea    0x1(%eax),%edx
   11228:	89 55 0c             	mov    %edx,0xc(%ebp)
   1122b:	0f b6 00             	movzbl (%eax),%eax
   1122e:	88 45 ef             	mov    %al,-0x11(%ebp)
   11231:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11235:	0f 85 d0 fe ff ff    	jne    1110b <kernel_vsprintf+0x1c>
        }
    }
}
   1123b:	90                   	nop
   1123c:	90                   	nop
   1123d:	c9                   	leave  
   1123e:	c3                   	ret    

0001123f <inb>:
static inline uint8_t inb (uint16_t port) {
   1123f:	55                   	push   %ebp
   11240:	89 e5                	mov    %esp,%ebp
   11242:	83 ec 14             	sub    $0x14,%esp
   11245:	8b 45 08             	mov    0x8(%ebp),%eax
   11248:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   1124c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11250:	89 c2                	mov    %eax,%edx
   11252:	ec                   	in     (%dx),%al
   11253:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11256:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1125a:	c9                   	leave  
   1125b:	c3                   	ret    

0001125c <outb>:
static inline void outb (uint16_t port, uint8_t data) {
   1125c:	55                   	push   %ebp
   1125d:	89 e5                	mov    %esp,%ebp
   1125f:	83 ec 08             	sub    $0x8,%esp
   11262:	8b 45 08             	mov    0x8(%ebp),%eax
   11265:	8b 55 0c             	mov    0xc(%ebp),%edx
   11268:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1126c:	89 d0                	mov    %edx,%eax
   1126e:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11271:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11275:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11279:	ee                   	out    %al,(%dx)
}
   1127a:	90                   	nop
   1127b:	c9                   	leave  
   1127c:	c3                   	ret    

0001127d <log_init>:
#include "os_cfg.h"


#define COM1_PORT 0x3F8

void log_init(void) {
   1127d:	f3 0f 1e fb          	endbr32 
   11281:	55                   	push   %ebp
   11282:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   11284:	6a 00                	push   $0x0
   11286:	68 f9 03 00 00       	push   $0x3f9
   1128b:	e8 cc ff ff ff       	call   1125c <outb>
   11290:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11293:	68 80 00 00 00       	push   $0x80
   11298:	68 fb 03 00 00       	push   $0x3fb
   1129d:	e8 ba ff ff ff       	call   1125c <outb>
   112a2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   112a5:	6a 03                	push   $0x3
   112a7:	68 f8 03 00 00       	push   $0x3f8
   112ac:	e8 ab ff ff ff       	call   1125c <outb>
   112b1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   112b4:	6a 00                	push   $0x0
   112b6:	68 f9 03 00 00       	push   $0x3f9
   112bb:	e8 9c ff ff ff       	call   1125c <outb>
   112c0:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   112c3:	6a 03                	push   $0x3
   112c5:	68 fb 03 00 00       	push   $0x3fb
   112ca:	e8 8d ff ff ff       	call   1125c <outb>
   112cf:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0x0c7);
   112d2:	68 c7 00 00 00       	push   $0xc7
   112d7:	68 fa 03 00 00       	push   $0x3fa
   112dc:	e8 7b ff ff ff       	call   1125c <outb>
   112e1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   112e4:	6a 0f                	push   $0xf
   112e6:	68 fc 03 00 00       	push   $0x3fc
   112eb:	e8 6c ff ff ff       	call   1125c <outb>
   112f0:	83 c4 08             	add    $0x8,%esp

}
   112f3:	90                   	nop
   112f4:	c9                   	leave  
   112f5:	c3                   	ret    

000112f6 <log_printf>:


void log_printf(const char * fmt, ...) {
   112f6:	f3 0f 1e fb          	endbr32 
   112fa:	55                   	push   %ebp
   112fb:	89 e5                	mov    %esp,%ebp
   112fd:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;

    kernel_memset(str_buf, '\0', sizeof(str_buf));
   11303:	83 ec 04             	sub    $0x4,%esp
   11306:	68 80 00 00 00       	push   $0x80
   1130b:	6a 00                	push   $0x0
   1130d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11313:	50                   	push   %eax
   11314:	e8 24 fc ff ff       	call   10f3d <kernel_memset>
   11319:	83 c4 10             	add    $0x10,%esp

    va_start(args, fmt);
   1131c:	8d 45 0c             	lea    0xc(%ebp),%eax
   1131f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   11325:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1132b:	83 ec 04             	sub    $0x4,%esp
   1132e:	50                   	push   %eax
   1132f:	ff 75 08             	pushl  0x8(%ebp)
   11332:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11338:	50                   	push   %eax
   11339:	e8 b1 fd ff ff       	call   110ef <kernel_vsprintf>
   1133e:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char * p = str_buf;    
   11341:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11347:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   1134a:	eb 3b                	jmp    11387 <log_printf+0x91>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);   // 检查当前串口是否在忙
   1134c:	90                   	nop
   1134d:	83 ec 0c             	sub    $0xc,%esp
   11350:	68 fd 03 00 00       	push   $0x3fd
   11355:	e8 e5 fe ff ff       	call   1123f <inb>
   1135a:	83 c4 10             	add    $0x10,%esp
   1135d:	0f b6 c0             	movzbl %al,%eax
   11360:	83 e0 40             	and    $0x40,%eax
   11363:	85 c0                	test   %eax,%eax
   11365:	74 e6                	je     1134d <log_printf+0x57>
        outb(COM1_PORT, *p++);
   11367:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1136a:	8d 50 01             	lea    0x1(%eax),%edx
   1136d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11370:	0f b6 00             	movzbl (%eax),%eax
   11373:	0f b6 c0             	movzbl %al,%eax
   11376:	83 ec 08             	sub    $0x8,%esp
   11379:	50                   	push   %eax
   1137a:	68 f8 03 00 00       	push   $0x3f8
   1137f:	e8 d8 fe ff ff       	call   1125c <outb>
   11384:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   11387:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1138a:	0f b6 00             	movzbl (%eax),%eax
   1138d:	84 c0                	test   %al,%al
   1138f:	75 bb                	jne    1134c <log_printf+0x56>
    }

    outb(COM1_PORT, '\r');
   11391:	83 ec 08             	sub    $0x8,%esp
   11394:	6a 0d                	push   $0xd
   11396:	68 f8 03 00 00       	push   $0x3f8
   1139b:	e8 bc fe ff ff       	call   1125c <outb>
   113a0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   113a3:	83 ec 08             	sub    $0x8,%esp
   113a6:	6a 0a                	push   $0xa
   113a8:	68 f8 03 00 00       	push   $0x3f8
   113ad:	e8 aa fe ff ff       	call   1125c <outb>
   113b2:	83 c4 10             	add    $0x10,%esp
}
   113b5:	90                   	nop
   113b6:	c9                   	leave  
   113b7:	c3                   	ret    
