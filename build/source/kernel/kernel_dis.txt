
/home/rafael/Documents/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
/home/rafael/Documents/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003073 memsz 0x00003073 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006de0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001ade0 align 2**12
         filesz 0x0000003c memsz 0x0000003c flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b3a  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000537  00012b3c  00012b3c  00003b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005de0  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   0000003c  80000000  0001ade0  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   000025a3  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000043c7  00000000  00000000  000085df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000012c1  00000000  00000000  0000c9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001e0  00000000  00000000  0000dc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    0000122c  00000000  00000000  0000de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000f074  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001230  00000000  00000000  0000f0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012b3c l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102bd l     F .text	0000000d down2
000102ca l     F .text	00000017 up2
000102e1 l     F .text	0000000c write_cr3
000102ed l     F .text	00000014 pde_index
00010301 l     F .text	00000010 pte_index
00010311 l     F .text	00000010 pde_paddr
00010321 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010332 l     F .text	0000005c addr_alloc_init
0001038e l     F .text	0000006b addr_alloc_page
000103f9 l     F .text	00000066 addr_free_page
0001045f l     F .text	0000006a show_mem_info
00012c44 l     O .rodata	00000012 __func__.1956
00014000 l     O .data	00000040 kernel_map.1967
000106cd l     F .text	0000003b total_mem_size
00012c58 l     O .rodata	0000000c __func__.2004
00000000 l    df *ABS*	00000000 task.c
0001095c l     F .text	0000001b list_node_init
00010977 l     F .text	0000000b list_node_next
00010982 l     F .text	0000000b list_count
0001098d l     F .text	0000000a list_first
00010997 l     F .text	0000000c write_cr3
000109a3 l     F .text	00000007 hlt
000109aa l     F .text	00000017 write_tr
000109c1 l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00001000 idle_task_stack
00018000 l     O .bss	00000190 task_manager
000109d2 l     F .text	00000134 tss_init
00012d00 l     O .rodata	0000000a __func__.2009
00012d0c l     O .rodata	00000010 __func__.2027
00010ce5 l     F .text	0000000e idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
0001108a l     F .text	00000028 lgdt
000110b2 l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00011302 l     F .text	0000001d inb
0001131f l     F .text	00000021 outb
00011340 l     F .text	00000007 cli
00011347 l     F .text	00000007 sti
0001134e l     F .text	00000028 lidt
00011376 l     F .text	00000010 read_eflags
00011386 l     F .text	0000000b write_eflags
000189c0 l     O .bss	00000400 idt_table
00011391 l     F .text	000000d6 dump_core_regs
00011467 l     F .text	0000003e do_default_handler
00011725 l     F .text	00000097 init_pic
00000000 l    df *ABS*	00000000 time.c
00011b44 l     F .text	00000021 outb
00018dc0 l     O .bss	00000004 sys_tick
00011b91 l     F .text	00000064 init_pit
00000000 l    df *ABS*	00000000 init.c
00018dc4 l     O .bss	00000004 init_boot_info
00013008 l     O .rodata	00000013 __func__.1970
00000000 l    df *ABS*	00000000 mutex.c
00011ce7 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00011e7a l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00012231 l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1704
00000000 l    df *ABS*	00000000 list.c
0001276d l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012979 l     F .text	0000001d inb
00012996 l     F .text	00000021 outb
00018dc8 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
0001203f g     F .text	00000042 bitmap_get_bit
000123b4 g     F .text	00000053 kernel_memcpy
00010e08 g     F .text	0000000e task_current
00011ad5 g     F .text	0000000f irq_enable_global
0001280c g     F .text	00000067 list_insert_last
00011605 g     F .text	00000020 do_handler_segment_not_present
00010d5a g     F .text	00000038 task_set_ready
0001215b g     F .text	0000001f bitmap_is_set
00012407 g     F .text	00000045 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
000112c8 g     F .text	00000022 cpu_init
000129b7 g     F .text	000000a1 log_init
00011c8a g     F .text	0000005d init_main
0001020f g       .text	00000000 exception_handler_alignment_check
0001121a g     F .text	0000003d gdt_free_sel
00012238 g     F .text	0000004b kernel_strcpy
00014000 g       .data	00000000 s_data
000119ac g     F .text	0000008f irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
00011545 g     F .text	00000020 do_handler_overflow
000116a5 g     F .text	00000020 do_handler_alignment_check
0001057d g     F .text	00000088 memory_create_map
000101b6 g       .text	00000000 exception_handler_general_protection
00011645 g     F .text	00000020 do_handler_general_protection
00011fa1 g     F .text	0000002d sem_count
80000010 g     F .first_task	0000002c first_task_main
000114c5 g     F .text	00000020 do_handler_divider
00012081 g     F .text	000000da bitmap_set_bit
000115c5 g     F .text	00000020 do_handler_double_fault
00011665 g     F .text	00000020 do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00011ae4 g     F .text	0000002f pic_send_eoi
00010cd7 g     F .text	0000000e task_first_task
00010000 g       .text	00000000 s_text
00010708 g     F .text	00000089 memory_create_uvm
00011eac g     F .text	0000006f sem_wait
00010936 g     F .text	00000026 memory_alloc_page_for
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00011705 g     F .text	00000020 do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
00010289 g       .text	00000000 exception_handler_time
00018de0 g     O .bss	00002000 stack
0001102f g     F .text	0000005b sys_sleep
0001ade0 g       *ABS*	00000000 s_first_task
00010879 g     F .text	000000bd memory_alloc_for_page_dir
000100e5 g       .text	00000000 exception_handler_bound_range
00011f1b g     F .text	00000086 sem_notify
00011585 g     F .text	00000020 do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00011685 g     F .text	00000020 do_handler_fpu_error
00010c1d g     F .text	000000ba task_first_init
000116c5 g     F .text	00000020 do_handler_machine_check
000114e5 g     F .text	00000020 do_handler_Debug
000127a9 g     F .text	00000063 list_insert_first
0001100b g     F .text	00000024 task_set_wakeup
00011505 g     F .text	00000020 do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00012283 g     F .text	00000074 kernel_strncpy
00011ac6 g     F .text	0000000f irq_disable_global
00010e16 g     F .text	00000065 sys_sched_yield
0001ae1c g       *ABS*	00000000 mem_free_start
00011c11 g     F .text	00000034 kernel_init
00011e85 g     F .text	00000027 sem_init
00010000 g       .text	00000000 _start
000125b9 g     F .text	0000017a kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001ade0 g       .bss	00000000 e_data
00011d24 g     F .text	00000095 mutex_lock
0001022c g       .text	00000000 exception_handler_machine_check
000115e5 g     F .text	00000020 do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001ae1c g       *ABS*	00000000 e_first_task
00010fcd g     F .text	0000003e task_set_sleep
0001196e g     F .text	0000003e irq_install
00011257 g     F .text	00000071 init_gdt
00011b13 g     F .text	0000001c irq_enter_protection
00011cf2 g     F .text	00000032 mutex_init
00011a3b g     F .text	0000008b irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
00011fce g     F .text	0000001a bitmap_byte_count
000115a5 g     F .text	00000020 do_handler_device_unavailable
00010e7b g     F .text	0000005f task_dispatch
00011c45 g     F .text	00000045 move_to_first_task
000112ea g     F .text	00000018 switch_to_tss
00010dc1 g     F .text	00000047 task_next_run
0001244c g     F .text	00000068 kernel_memcmp
00010605 g     F .text	000000c8 create_kernel_table
00012780 g     F .text	00000029 list_init
000116e5 g     F .text	00000020 do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
00010d92 g     F .text	0000002f task_set_block
000114a5 g     F .text	00000020 do_handler_unknown
000101f0 g       .text	00000000 exception_handler_fpu_error
00010bfb g     F .text	00000022 task_switch_from_to
000117bc g     F .text	000001b2 irq_init
00011db9 g     F .text	000000c1 mutex_unlock
00011b2f g     F .text	00000015 irq_leave_protection
00012375 g     F .text	0000003f kernel_strlen
000110cc g     F .text	0000008a segment_desc_set
00011565 g     F .text	00000020 do_handler_bound_range
00012873 g     F .text	0000007d list_remove_first
00013073 g       .rodata	00000000 e_text
000122f7 g     F .text	0000007e kernel_strncmp
00011fe8 g     F .text	00000057 bitmap_init
0001017c g       .text	00000000 exception_handler_segment_not_present
00010088 g       .text	00000000 exception_handler_NMI
0001217a g     F .text	000000b7 bitmap_alloc_nbits
00010cf3 g     F .text	00000067 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
00010eda g     F .text	000000f3 task_time_tick
00010791 g     F .text	000000e8 memory_init
00012733 g     F .text	0000003a pannic
00011625 g     F .text	00000020 do_handler_stack_segment_fault
00011525 g     F .text	00000020 do_handler_breakpoint
00012a58 g     F .text	000000e2 log_printf
00010b06 g     F .text	000000f5 task_init
00012591 g     F .text	00000028 kernel_sprintf
000111a1 g     F .text	00000079 gdt_alloc_desc
000124b4 g     F .text	000000dd kernel_itoa
000128f0 g     F .text	00000089 list_remove
00011156 g     F .text	0000004b gate_desc_set
000104c9 g     F .text	000000b4 find_pte
00011b65 g     F .text	0000002c do_handler_time
00011bf5 g     F .text	0000001c time_init



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .global _start
    .extern init_main
    # void start (boot_info_t * boot_info)
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
    
    # mov 4(%ebp), %eax

    # kernel_init(boot_info)
    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 05 1c 00 00       	call   11c11 <kernel_init>

    // 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
    # 指定的选择子，会被加载到CS寄存器中
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc e0 ad 01 00       	mov    $0x1ade0,%esp
    jmp init_main
   10026:	e9 5f 1c 00 00       	jmp    11c8a <init_main>

0001002b <exception_handler_unknown>:
    add $(2*4), %esp

    iret
.endm

exception_handler unknown, -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 69 14 00 00       	call   114a5 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divider>:
exception_handler divider, 0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 6a 14 00 00       	call   114c5 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 6b 14 00 00       	call   114e5 <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 6c 14 00 00       	call   11505 <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 6d 14 00 00       	call   11525 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 6e 14 00 00       	call   11545 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 6f 14 00 00       	call   11565 <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 70 14 00 00       	call   11585 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 71 14 00 00       	call   115a5 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 74 14 00 00       	call   115c5 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 77 14 00 00       	call   115e5 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 7a 14 00 00       	call   11605 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha  
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 7d 14 00 00       	call   11625 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 80 14 00 00       	call   11645 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa   
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret   

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 83 14 00 00       	call   11665 <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa   
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret   

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha  
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 84 14 00 00       	call   11685 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa   
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret   

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha  
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 87 14 00 00       	call   116a5 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa   
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret   

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha  
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 88 14 00 00       	call   116c5 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa   
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret   

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha  
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 89 14 00 00       	call   116e5 <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa   
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret   

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha  
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 8a 14 00 00       	call   11705 <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa   
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret   

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 cb 18 00 00       	call   11b65 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <simple_switch>:

    // simple_switch(&from, to)
    .text
    .global simple_switch
simple_switch:
    mov 4(%esp), %eax
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102b0:	55                   	push   %ebp
    push %ebx
   102b1:	53                   	push   %ebx
    push %esi
   102b2:	56                   	push   %esi
    push %edi
   102b3:	57                   	push   %edi
    mov %esp, (%eax)
   102b4:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b6:	89 d4                	mov    %edx,%esp
    pop %edi
   102b8:	5f                   	pop    %edi
    pop %esi
   102b9:	5e                   	pop    %esi
    pop %ebx
   102ba:	5b                   	pop    %ebx
    pop %ebp
   102bb:	5d                   	pop    %ebp


    ret
   102bc:	c3                   	ret    

000102bd <down2>:

// size = 0x1010  bound=0x1000 
// bound = 0x0FFF
// ~(bound - 1) = 0xFFFF1000
// 0x1010 & 0xFFFF1000 = 0x1000
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102bd:	55                   	push   %ebp
   102be:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c3:	f7 d8                	neg    %eax
   102c5:	23 45 08             	and    0x8(%ebp),%eax
}
   102c8:	5d                   	pop    %ebp
   102c9:	c3                   	ret    

000102ca <up2>:

static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102ca:	55                   	push   %ebp
   102cb:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102cd:	8b 55 08             	mov    0x8(%ebp),%edx
   102d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102d3:	01 d0                	add    %edx,%eax
   102d5:	8d 50 ff             	lea    -0x1(%eax),%edx
   102d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   102db:	f7 d8                	neg    %eax
   102dd:	21 d0                	and    %edx,%eax
}
   102df:	5d                   	pop    %ebp
   102e0:	c3                   	ret    

000102e1 <write_cr3>:

    __asm__ __volatile__("mov %%cr3, %[v]":[v]"=r"(cr3));
    return cr3;
}

static inline void write_cr3 (uint32_t v) {
   102e1:	55                   	push   %ebp
   102e2:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   102e4:	8b 45 08             	mov    0x8(%ebp),%eax
   102e7:	0f 22 d8             	mov    %eax,%cr3
}
   102ea:	90                   	nop
   102eb:	5d                   	pop    %ebp
   102ec:	c3                   	ret    

000102ed <pde_index>:
        uint32_t phy_page_addr : 20;
    };
}pte_t;


static inline uint32_t pde_index (uint32_t vaddr) {
   102ed:	55                   	push   %ebp
   102ee:	89 e5                	mov    %esp,%ebp
   102f0:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22);
   102f3:	8b 45 08             	mov    0x8(%ebp),%eax
   102f6:	c1 e8 16             	shr    $0x16,%eax
   102f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   102fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   102ff:	c9                   	leave  
   10300:	c3                   	ret    

00010301 <pte_index>:

static inline uint32_t pte_index (uint32_t vaddr) {
   10301:	55                   	push   %ebp
   10302:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;
   10304:	8b 45 08             	mov    0x8(%ebp),%eax
   10307:	c1 e8 0c             	shr    $0xc,%eax
   1030a:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1030f:	5d                   	pop    %ebp
   10310:	c3                   	ret    

00010311 <pde_paddr>:

static inline uint32_t pde_paddr (pde_t * pde) {
   10311:	55                   	push   %ebp
   10312:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10314:	8b 45 08             	mov    0x8(%ebp),%eax
   10317:	8b 00                	mov    (%eax),%eax
   10319:	c1 e8 0c             	shr    $0xc,%eax
   1031c:	c1 e0 0c             	shl    $0xc,%eax
}
   1031f:	5d                   	pop    %ebp
   10320:	c3                   	ret    

00010321 <mmu_set_page_dir>:
static inline uint32_t pte_paddr (pte_t * pte) {
    return pte->phy_page_addr << 12;
}


static inline void mmu_set_page_dir(uint32_t paddr) {
   10321:	55                   	push   %ebp
   10322:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10324:	ff 75 08             	pushl  0x8(%ebp)
   10327:	e8 b5 ff ff ff       	call   102e1 <write_cr3>
   1032c:	83 c4 04             	add    $0x4,%esp
}
   1032f:	90                   	nop
   10330:	c9                   	leave  
   10331:	c3                   	ret    

00010332 <addr_alloc_init>:
static addr_alloc_t paddr_alloc;

static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE)));

static void addr_alloc_init (addr_alloc_t * alloc, uint8_t * bits,
    uint32_t start, uint32_t size, uint32_t page_size) {
   10332:	f3 0f 1e fb          	endbr32 
   10336:	55                   	push   %ebp
   10337:	89 e5                	mov    %esp,%ebp
   10339:	83 ec 08             	sub    $0x8,%esp
        mutex_init(&alloc->mutex);
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	83 ec 0c             	sub    $0xc,%esp
   10342:	50                   	push   %eax
   10343:	e8 aa 19 00 00       	call   11cf2 <mutex_init>
   10348:	83 c4 10             	add    $0x10,%esp
        alloc->start = start;
   1034b:	8b 45 08             	mov    0x8(%ebp),%eax
   1034e:	8b 55 10             	mov    0x10(%ebp),%edx
   10351:	89 50 20             	mov    %edx,0x20(%eax)
        alloc->size = size;
   10354:	8b 45 08             	mov    0x8(%ebp),%eax
   10357:	8b 55 14             	mov    0x14(%ebp),%edx
   1035a:	89 50 24             	mov    %edx,0x24(%eax)
        alloc->page_size = page_size;
   1035d:	8b 45 08             	mov    0x8(%ebp),%eax
   10360:	8b 55 18             	mov    0x18(%ebp),%edx
   10363:	89 50 1c             	mov    %edx,0x1c(%eax)
        bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10366:	8b 45 08             	mov    0x8(%ebp),%eax
   10369:	8b 40 24             	mov    0x24(%eax),%eax
   1036c:	ba 00 00 00 00       	mov    $0x0,%edx
   10371:	f7 75 18             	divl   0x18(%ebp)
   10374:	89 c2                	mov    %eax,%edx
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	83 c0 14             	add    $0x14,%eax
   1037c:	6a 00                	push   $0x0
   1037e:	52                   	push   %edx
   1037f:	ff 75 0c             	pushl  0xc(%ebp)
   10382:	50                   	push   %eax
   10383:	e8 60 1c 00 00       	call   11fe8 <bitmap_init>
   10388:	83 c4 10             	add    $0x10,%esp
}
   1038b:	90                   	nop
   1038c:	c9                   	leave  
   1038d:	c3                   	ret    

0001038e <addr_alloc_page>:

// 分配内存
static uint32_t addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   1038e:	f3 0f 1e fb          	endbr32 
   10392:	55                   	push   %ebp
   10393:	89 e5                	mov    %esp,%ebp
   10395:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10398:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   1039f:	8b 45 08             	mov    0x8(%ebp),%eax
   103a2:	83 ec 0c             	sub    $0xc,%esp
   103a5:	50                   	push   %eax
   103a6:	e8 79 19 00 00       	call   11d24 <mutex_lock>
   103ab:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103ae:	8b 45 08             	mov    0x8(%ebp),%eax
   103b1:	83 c0 14             	add    $0x14,%eax
   103b4:	83 ec 04             	sub    $0x4,%esp
   103b7:	ff 75 0c             	pushl  0xc(%ebp)
   103ba:	6a 00                	push   $0x0
   103bc:	50                   	push   %eax
   103bd:	e8 b8 1d 00 00       	call   1217a <bitmap_alloc_nbits>
   103c2:	83 c4 10             	add    $0x10,%esp
   103c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   103c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103cc:	78 17                	js     103e5 <addr_alloc_page+0x57>
        addr = alloc->start + page_index * alloc->page_size;
   103ce:	8b 45 08             	mov    0x8(%ebp),%eax
   103d1:	8b 50 20             	mov    0x20(%eax),%edx
   103d4:	8b 45 08             	mov    0x8(%ebp),%eax
   103d7:	8b 48 1c             	mov    0x1c(%eax),%ecx
   103da:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103dd:	0f af c1             	imul   %ecx,%eax
   103e0:	01 d0                	add    %edx,%eax
   103e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   103e5:	8b 45 08             	mov    0x8(%ebp),%eax
   103e8:	83 ec 0c             	sub    $0xc,%esp
   103eb:	50                   	push   %eax
   103ec:	e8 c8 19 00 00       	call   11db9 <mutex_unlock>
   103f1:	83 c4 10             	add    $0x10,%esp
    return addr;
   103f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   103f7:	c9                   	leave  
   103f8:	c3                   	ret    

000103f9 <addr_free_page>:


// 释放内存
static void addr_free_page (addr_alloc_t * alloc, uint32_t addr, int page_count) {
   103f9:	f3 0f 1e fb          	endbr32 
   103fd:	55                   	push   %ebp
   103fe:	89 e5                	mov    %esp,%ebp
   10400:	53                   	push   %ebx
   10401:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   10404:	8b 45 08             	mov    0x8(%ebp),%eax
   10407:	83 ec 0c             	sub    $0xc,%esp
   1040a:	50                   	push   %eax
   1040b:	e8 14 19 00 00       	call   11d24 <mutex_lock>
   10410:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_indx = (addr - alloc->start) / alloc->page_size;
   10413:	8b 45 08             	mov    0x8(%ebp),%eax
   10416:	8b 40 20             	mov    0x20(%eax),%eax
   10419:	8b 55 0c             	mov    0xc(%ebp),%edx
   1041c:	89 d1                	mov    %edx,%ecx
   1041e:	29 c1                	sub    %eax,%ecx
   10420:	8b 45 08             	mov    0x8(%ebp),%eax
   10423:	8b 58 1c             	mov    0x1c(%eax),%ebx
   10426:	89 c8                	mov    %ecx,%eax
   10428:	ba 00 00 00 00       	mov    $0x0,%edx
   1042d:	f7 f3                	div    %ebx
   1042f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_indx, page_count, 0);
   10432:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10435:	8b 55 08             	mov    0x8(%ebp),%edx
   10438:	83 c2 14             	add    $0x14,%edx
   1043b:	6a 00                	push   $0x0
   1043d:	ff 75 10             	pushl  0x10(%ebp)
   10440:	50                   	push   %eax
   10441:	52                   	push   %edx
   10442:	e8 3a 1c 00 00       	call   12081 <bitmap_set_bit>
   10447:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   1044a:	8b 45 08             	mov    0x8(%ebp),%eax
   1044d:	83 ec 0c             	sub    $0xc,%esp
   10450:	50                   	push   %eax
   10451:	e8 63 19 00 00       	call   11db9 <mutex_unlock>
   10456:	83 c4 10             	add    $0x10,%esp
}
   10459:	90                   	nop
   1045a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1045d:	c9                   	leave  
   1045e:	c3                   	ret    

0001045f <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   1045f:	f3 0f 1e fb          	endbr32 
   10463:	55                   	push   %ebp
   10464:	89 e5                	mov    %esp,%ebp
   10466:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10469:	83 ec 0c             	sub    $0xc,%esp
   1046c:	68 3c 2b 01 00       	push   $0x12b3c
   10471:	e8 e2 25 00 00       	call   12a58 <log_printf>
   10476:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i ++ ) {
   10479:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10480:	eb 29                	jmp    104ab <show_mem_info+0x4c>
        log_printf("[%d]: 0x%x - 0x%x", i,
   10482:	8b 45 08             	mov    0x8(%ebp),%eax
   10485:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10488:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1048c:	8b 45 08             	mov    0x8(%ebp),%eax
   1048f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10492:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10495:	52                   	push   %edx
   10496:	50                   	push   %eax
   10497:	ff 75 f4             	pushl  -0xc(%ebp)
   1049a:	68 48 2b 01 00       	push   $0x12b48
   1049f:	e8 b4 25 00 00       	call   12a58 <log_printf>
   104a4:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i ++ ) {
   104a7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104ab:	8b 45 08             	mov    0x8(%ebp),%eax
   104ae:	8b 40 50             	mov    0x50(%eax),%eax
   104b1:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104b4:	7c cc                	jl     10482 <show_mem_info+0x23>
        boot_info->ram_region_cfg[i].start,
        boot_info->ram_region_cfg[i].size);
    }

    log_printf("\n");
   104b6:	83 ec 0c             	sub    $0xc,%esp
   104b9:	68 5a 2b 01 00       	push   $0x12b5a
   104be:	e8 95 25 00 00       	call   12a58 <log_printf>
   104c3:	83 c4 10             	add    $0x10,%esp

}
   104c6:	90                   	nop
   104c7:	c9                   	leave  
   104c8:	c3                   	ret    

000104c9 <find_pte>:

pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   104c9:	f3 0f 1e fb          	endbr32 
   104cd:	55                   	push   %ebp
   104ce:	89 e5                	mov    %esp,%ebp
   104d0:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;
    pde_t * pde = page_dir + pde_index(vaddr);
   104d3:	ff 75 0c             	pushl  0xc(%ebp)
   104d6:	e8 12 fe ff ff       	call   102ed <pde_index>
   104db:	83 c4 04             	add    $0x4,%esp
   104de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   104e5:	8b 45 08             	mov    0x8(%ebp),%eax
   104e8:	01 d0                	add    %edx,%eax
   104ea:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (pde->present) {
   104ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
   104f0:	0f b6 00             	movzbl (%eax),%eax
   104f3:	83 e0 01             	and    $0x1,%eax
   104f6:	84 c0                	test   %al,%al
   104f8:	74 10                	je     1050a <find_pte+0x41>
        page_table = (pte_t *)pde_paddr(pde);
   104fa:	ff 75 f0             	pushl  -0x10(%ebp)
   104fd:	e8 0f fe ff ff       	call   10311 <pde_paddr>
   10502:	83 c4 04             	add    $0x4,%esp
   10505:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10508:	eb 57                	jmp    10561 <find_pte+0x98>
    } else {
        if (alloc == 0) {
   1050a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1050e:	75 07                	jne    10517 <find_pte+0x4e>
            return (pte_t *)0;
   10510:	b8 00 00 00 00       	mov    $0x0,%eax
   10515:	eb 64                	jmp    1057b <find_pte+0xb2>
        }
        
        // 如果没找到分配一个新的空间页
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10517:	83 ec 08             	sub    $0x8,%esp
   1051a:	6a 01                	push   $0x1
   1051c:	68 00 50 01 00       	push   $0x15000
   10521:	e8 68 fe ff ff       	call   1038e <addr_alloc_page>
   10526:	83 c4 10             	add    $0x10,%esp
   10529:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1052c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10530:	75 07                	jne    10539 <find_pte+0x70>
            // 如果分配失败
            return (pte_t *)0;
   10532:	b8 00 00 00 00       	mov    $0x0,%eax
   10537:	eb 42                	jmp    1057b <find_pte+0xb2>
        }

        pde->v = pg_paddr | PDE_P | PDE_W | PDE_U;
   10539:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1053c:	83 c8 07             	or     $0x7,%eax
   1053f:	89 c2                	mov    %eax,%edx
   10541:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10544:	89 10                	mov    %edx,(%eax)

        page_table = (pte_t *)(pg_paddr);
   10546:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10549:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);        // 将表项初始化为0
   1054c:	83 ec 04             	sub    $0x4,%esp
   1054f:	68 00 10 00 00       	push   $0x1000
   10554:	6a 00                	push   $0x0
   10556:	ff 75 f4             	pushl  -0xc(%ebp)
   10559:	e8 a9 1e 00 00       	call   12407 <kernel_memset>
   1055e:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   10561:	83 ec 0c             	sub    $0xc,%esp
   10564:	ff 75 0c             	pushl  0xc(%ebp)
   10567:	e8 95 fd ff ff       	call   10301 <pte_index>
   1056c:	83 c4 10             	add    $0x10,%esp
   1056f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10576:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10579:	01 d0                	add    %edx,%eax
}
   1057b:	c9                   	leave  
   1057c:	c3                   	ret    

0001057d <memory_create_map>:

int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   1057d:	f3 0f 1e fb          	endbr32 
   10581:	55                   	push   %ebp
   10582:	89 e5                	mov    %esp,%ebp
   10584:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++ ) {
   10587:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1058e:	eb 6b                	jmp    105fb <memory_create_map+0x7e>
        // log_printf("create map: v-0x%x, p-0x%x, perm:0x%x", vaddr, paddr, perm);
        pte_t * pte = find_pte(page_dir, vaddr, 1);
   10590:	83 ec 04             	sub    $0x4,%esp
   10593:	6a 01                	push   $0x1
   10595:	ff 75 0c             	pushl  0xc(%ebp)
   10598:	ff 75 08             	pushl  0x8(%ebp)
   1059b:	e8 29 ff ff ff       	call   104c9 <find_pte>
   105a0:	83 c4 10             	add    $0x10,%esp
   105a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   105a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105aa:	75 07                	jne    105b3 <memory_create_map+0x36>
            // log_printf("create pte failed.pte==0");
            return -1;
   105ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   105b1:	eb 50                	jmp    10603 <memory_create_map+0x86>
        }


        // log_printf("pte addr:0x%x", (uint32_t)pte);

        ASSERT(pte->present == 0);
   105b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105b6:	0f b6 00             	movzbl (%eax),%eax
   105b9:	83 e0 01             	and    $0x1,%eax
   105bc:	84 c0                	test   %al,%al
   105be:	74 19                	je     105d9 <memory_create_map+0x5c>
   105c0:	68 5c 2b 01 00       	push   $0x12b5c
   105c5:	68 44 2c 01 00       	push   $0x12c44
   105ca:	6a 61                	push   $0x61
   105cc:	68 70 2b 01 00       	push   $0x12b70
   105d1:	e8 5d 21 00 00       	call   12733 <pannic>
   105d6:	83 c4 10             	add    $0x10,%esp
        pte->v = paddr | perm | PTE_P;
   105d9:	8b 45 10             	mov    0x10(%ebp),%eax
   105dc:	0b 45 18             	or     0x18(%ebp),%eax
   105df:	83 c8 01             	or     $0x1,%eax
   105e2:	89 c2                	mov    %eax,%edx
   105e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105e7:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   105e9:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   105f0:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++ ) {
   105f7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105fe:	3b 45 14             	cmp    0x14(%ebp),%eax
   10601:	7c 8d                	jl     10590 <memory_create_map+0x13>

    }
}
   10603:	c9                   	leave  
   10604:	c3                   	ret    

00010605 <create_kernel_table>:

void create_kernel_table(void) {
   10605:	f3 0f 1e fb          	endbr32 
   10609:	55                   	push   %ebp
   1060a:	89 e5                	mov    %esp,%ebp
   1060c:	83 ec 28             	sub    $0x28,%esp
        {s_data, (void *)(MEM_EBDA_START - 1), s_data, PTE_W},
        {(void *)(MEM_EXT_START), (void *)MEM_EXT_END, (void *)MEM_EXT_START, PTE_W},
    };

    // 清空页目录表
    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   1060f:	83 ec 04             	sub    $0x4,%esp
   10612:	68 00 10 00 00       	push   $0x1000
   10617:	6a 00                	push   $0x0
   10619:	68 00 60 01 00       	push   $0x16000
   1061e:	e8 e4 1d 00 00       	call   12407 <kernel_memset>
   10623:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++ ) {
   10626:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1062d:	e9 8b 00 00 00       	jmp    106bd <create_kernel_table+0xb8>
        memory_map_t * map = kernel_map + i;
   10632:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10635:	c1 e0 04             	shl    $0x4,%eax
   10638:	05 00 40 01 00       	add    $0x14000,%eax
   1063d:	89 45 f0             	mov    %eax,-0x10(%ebp)

        uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10640:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10643:	8b 00                	mov    (%eax),%eax
   10645:	83 ec 08             	sub    $0x8,%esp
   10648:	68 00 10 00 00       	push   $0x1000
   1064d:	50                   	push   %eax
   1064e:	e8 6a fc ff ff       	call   102bd <down2>
   10653:	83 c4 10             	add    $0x10,%esp
   10656:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10659:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1065c:	8b 40 04             	mov    0x4(%eax),%eax
   1065f:	83 ec 08             	sub    $0x8,%esp
   10662:	68 00 10 00 00       	push   $0x1000
   10667:	50                   	push   %eax
   10668:	e8 5d fc ff ff       	call   102ca <up2>
   1066d:	83 c4 10             	add    $0x10,%esp
   10670:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10673:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10676:	8b 40 08             	mov    0x8(%eax),%eax
   10679:	83 ec 08             	sub    $0x8,%esp
   1067c:	68 00 10 00 00       	push   $0x1000
   10681:	50                   	push   %eax
   10682:	e8 36 fc ff ff       	call   102bd <down2>
   10687:	83 c4 10             	add    $0x10,%esp
   1068a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1068d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10690:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10693:	c1 e8 0c             	shr    $0xc,%eax
   10696:	89 45 e0             	mov    %eax,-0x20(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)paddr, page_count, map->perm);
   10699:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1069c:	8b 40 0c             	mov    0xc(%eax),%eax
   1069f:	83 ec 0c             	sub    $0xc,%esp
   106a2:	50                   	push   %eax
   106a3:	ff 75 e0             	pushl  -0x20(%ebp)
   106a6:	ff 75 e4             	pushl  -0x1c(%ebp)
   106a9:	ff 75 ec             	pushl  -0x14(%ebp)
   106ac:	68 00 60 01 00       	push   $0x16000
   106b1:	e8 c7 fe ff ff       	call   1057d <memory_create_map>
   106b6:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++ ) {
   106b9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106c0:	83 f8 03             	cmp    $0x3,%eax
   106c3:	0f 86 69 ff ff ff    	jbe    10632 <create_kernel_table+0x2d>

    }
}
   106c9:	90                   	nop
   106ca:	90                   	nop
   106cb:	c9                   	leave  
   106cc:	c3                   	ret    

000106cd <total_mem_size>:


static uint32_t total_mem_size (boot_info_t * boot_info) {
   106cd:	f3 0f 1e fb          	endbr32 
   106d1:	55                   	push   %ebp
   106d2:	89 e5                	mov    %esp,%ebp
   106d4:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   106d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   106de:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   106e5:	eb 11                	jmp    106f8 <total_mem_size+0x2b>
        mem_size += boot_info->ram_region_cfg[i].size;
   106e7:	8b 45 08             	mov    0x8(%ebp),%eax
   106ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
   106ed:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   106f1:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   106f4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   106f8:	8b 45 08             	mov    0x8(%ebp),%eax
   106fb:	8b 40 50             	mov    0x50(%eax),%eax
   106fe:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10701:	7c e4                	jl     106e7 <total_mem_size+0x1a>
    }
    return mem_size;
   10703:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10706:	c9                   	leave  
   10707:	c3                   	ret    

00010708 <memory_create_uvm>:

uint32_t memory_create_uvm (void) {
   10708:	f3 0f 1e fb          	endbr32 
   1070c:	55                   	push   %ebp
   1070d:	89 e5                	mov    %esp,%ebp
   1070f:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10712:	83 ec 08             	sub    $0x8,%esp
   10715:	6a 01                	push   $0x1
   10717:	68 00 50 01 00       	push   $0x15000
   1071c:	e8 6d fc ff ff       	call   1038e <addr_alloc_page>
   10721:	83 c4 10             	add    $0x10,%esp
   10724:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   10727:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1072b:	75 07                	jne    10734 <memory_create_uvm+0x2c>
        return 0;
   1072d:	b8 00 00 00 00       	mov    $0x0,%eax
   10732:	eb 5b                	jmp    1078f <memory_create_uvm+0x87>
    }

    // 操作系统和进程共享内存
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);      // 对第一级表进行清空
   10734:	83 ec 04             	sub    $0x4,%esp
   10737:	68 00 10 00 00       	push   $0x1000
   1073c:	6a 00                	push   $0x0
   1073e:	ff 75 f0             	pushl  -0x10(%ebp)
   10741:	e8 c1 1c 00 00       	call   12407 <kernel_memset>
   10746:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10749:	83 ec 0c             	sub    $0xc,%esp
   1074c:	68 00 00 00 80       	push   $0x80000000
   10751:	e8 97 fb ff ff       	call   102ed <pde_index>
   10756:	83 c4 10             	add    $0x10,%esp
   10759:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   1075c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10763:	eb 1f                	jmp    10784 <memory_create_uvm+0x7c>
        page_dir[i].v = kernel_page_dir[i].v;
   10765:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10768:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10772:	01 c2                	add    %eax,%edx
   10774:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10777:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   1077e:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   10780:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10784:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10787:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1078a:	77 d9                	ja     10765 <memory_create_uvm+0x5d>
    }

    return (uint32_t)page_dir;
   1078c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1078f:	c9                   	leave  
   10790:	c3                   	ret    

00010791 <memory_init>:


void memory_init (boot_info_t * boot_info) {
   10791:	f3 0f 1e fb          	endbr32 
   10795:	55                   	push   %ebp
   10796:	89 e5                	mov    %esp,%ebp
   10798:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t * mem_free_start;

    log_printf("mem init");
   1079b:	83 ec 0c             	sub    $0xc,%esp
   1079e:	68 b9 2b 01 00       	push   $0x12bb9
   107a3:	e8 b0 22 00 00       	call   12a58 <log_printf>
   107a8:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   107ab:	83 ec 0c             	sub    $0xc,%esp
   107ae:	ff 75 08             	pushl  0x8(%ebp)
   107b1:	e8 a9 fc ff ff       	call   1045f <show_mem_info>
   107b6:	83 c4 10             	add    $0x10,%esp

    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   107b9:	c7 45 f4 1c ae 01 00 	movl   $0x1ae1c,-0xc(%ebp)

    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   107c0:	83 ec 0c             	sub    $0xc,%esp
   107c3:	ff 75 08             	pushl  0x8(%ebp)
   107c6:	e8 02 ff ff ff       	call   106cd <total_mem_size>
   107cb:	83 c4 10             	add    $0x10,%esp
   107ce:	2d 00 00 10 00       	sub    $0x100000,%eax
   107d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 将 mem_up1MB_free 转换成 MEM_PAGE_SIZE 的整数倍 （即将整个内存分成相同MEM_PAGE_SIZE大小的页）
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   107d6:	83 ec 08             	sub    $0x8,%esp
   107d9:	68 00 10 00 00       	push   $0x1000
   107de:	ff 75 f0             	pushl  -0x10(%ebp)
   107e1:	e8 d7 fa ff ff       	call   102bd <down2>
   107e6:	83 c4 10             	add    $0x10,%esp
   107e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   107ec:	83 ec 04             	sub    $0x4,%esp
   107ef:	ff 75 f0             	pushl  -0x10(%ebp)
   107f2:	68 00 00 10 00       	push   $0x100000
   107f7:	68 c2 2b 01 00       	push   $0x12bc2
   107fc:	e8 57 22 00 00       	call   12a58 <log_printf>
   10801:	83 c4 10             	add    $0x10,%esp

    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10804:	83 ec 0c             	sub    $0xc,%esp
   10807:	68 00 10 00 00       	push   $0x1000
   1080c:	ff 75 f0             	pushl  -0x10(%ebp)
   1080f:	68 00 00 10 00       	push   $0x100000
   10814:	ff 75 f4             	pushl  -0xc(%ebp)
   10817:	68 00 50 01 00       	push   $0x15000
   1081c:	e8 11 fb ff ff       	call   10332 <addr_alloc_init>
   10821:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10824:	a1 24 50 01 00       	mov    0x15024,%eax
   10829:	c1 e8 0c             	shr    $0xc,%eax
   1082c:	83 ec 0c             	sub    $0xc,%esp
   1082f:	50                   	push   %eax
   10830:	e8 99 17 00 00       	call   11fce <bitmap_byte_count>
   10835:	83 c4 10             	add    $0x10,%esp
   10838:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   1083b:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10842:	76 1c                	jbe    10860 <memory_init+0xcf>
   10844:	68 e0 2b 01 00       	push   $0x12be0
   10849:	68 58 2c 01 00       	push   $0x12c58
   1084e:	68 b1 00 00 00       	push   $0xb1
   10853:	68 70 2b 01 00       	push   $0x12b70
   10858:	e8 d6 1e 00 00       	call   12733 <pannic>
   1085d:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10860:	e8 a0 fd ff ff       	call   10605 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10865:	b8 00 60 01 00       	mov    $0x16000,%eax
   1086a:	83 ec 0c             	sub    $0xc,%esp
   1086d:	50                   	push   %eax
   1086e:	e8 ae fa ff ff       	call   10321 <mmu_set_page_dir>
   10873:	83 c4 10             	add    $0x10,%esp
}
   10876:	90                   	nop
   10877:	c9                   	leave  
   10878:	c3                   	ret    

00010879 <memory_alloc_for_page_dir>:

int memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   10879:	f3 0f 1e fb          	endbr32 
   1087d:	55                   	push   %ebp
   1087e:	89 e5                	mov    %esp,%ebp
   10880:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;    // 记录当前分到哪个地址了
   10883:	8b 45 0c             	mov    0xc(%ebp),%eax
   10886:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;  // 计算有多少页
   10889:	68 00 10 00 00       	push   $0x1000
   1088e:	ff 75 10             	pushl  0x10(%ebp)
   10891:	e8 34 fa ff ff       	call   102ca <up2>
   10896:	83 c4 08             	add    $0x8,%esp
   10899:	c1 e8 0c             	shr    $0xc,%eax
   1089c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i ++ ) {
   1089f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   108a6:	eb 7b                	jmp    10923 <memory_alloc_for_page_dir+0xaa>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   108a8:	83 ec 08             	sub    $0x8,%esp
   108ab:	6a 01                	push   $0x1
   108ad:	68 00 50 01 00       	push   $0x15000
   108b2:	e8 d7 fa ff ff       	call   1038e <addr_alloc_page>
   108b7:	83 c4 10             	add    $0x10,%esp
   108ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   108bd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   108c1:	75 17                	jne    108da <memory_alloc_for_page_dir+0x61>
            log_printf("mem alloc failed. no memory");
   108c3:	83 ec 0c             	sub    $0xc,%esp
   108c6:	68 05 2c 01 00       	push   $0x12c05
   108cb:	e8 88 21 00 00       	call   12a58 <log_printf>
   108d0:	83 c4 10             	add    $0x10,%esp
            return 0;
   108d3:	b8 00 00 00 00       	mov    $0x0,%eax
   108d8:	eb 5a                	jmp    10934 <memory_alloc_for_page_dir+0xbb>
        }

        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   108da:	8b 55 14             	mov    0x14(%ebp),%edx
   108dd:	8b 45 08             	mov    0x8(%ebp),%eax
   108e0:	83 ec 0c             	sub    $0xc,%esp
   108e3:	52                   	push   %edx
   108e4:	6a 01                	push   $0x1
   108e6:	ff 75 e8             	pushl  -0x18(%ebp)
   108e9:	ff 75 f4             	pushl  -0xc(%ebp)
   108ec:	50                   	push   %eax
   108ed:	e8 8b fc ff ff       	call   1057d <memory_create_map>
   108f2:	83 c4 20             	add    $0x20,%esp
   108f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   108f8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   108fc:	79 1a                	jns    10918 <memory_alloc_for_page_dir+0x9f>
            log_printf("create memory failed. err = %d", err);
   108fe:	83 ec 08             	sub    $0x8,%esp
   10901:	ff 75 e4             	pushl  -0x1c(%ebp)
   10904:	68 24 2c 01 00       	push   $0x12c24
   10909:	e8 4a 21 00 00       	call   12a58 <log_printf>
   1090e:	83 c4 10             	add    $0x10,%esp
            return 0;
   10911:	b8 00 00 00 00       	mov    $0x0,%eax
   10916:	eb 1c                	jmp    10934 <memory_alloc_for_page_dir+0xbb>
        }


        curr_vaddr += MEM_PAGE_SIZE;
   10918:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i ++ ) {
   1091f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10923:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10926:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10929:	0f 8c 79 ff ff ff    	jl     108a8 <memory_alloc_for_page_dir+0x2f>

    }

    return 0;
   1092f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10934:	c9                   	leave  
   10935:	c3                   	ret    

00010936 <memory_alloc_page_for>:

int memory_alloc_page_for (uint32_t addr, uint32_t size, int perm) {
   10936:	f3 0f 1e fb          	endbr32 
   1093a:	55                   	push   %ebp
   1093b:	89 e5                	mov    %esp,%ebp
   1093d:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10940:	e8 c3 04 00 00       	call   10e08 <task_current>
   10945:	8b 40 64             	mov    0x64(%eax),%eax
   10948:	ff 75 10             	pushl  0x10(%ebp)
   1094b:	ff 75 0c             	pushl  0xc(%ebp)
   1094e:	ff 75 08             	pushl  0x8(%ebp)
   10951:	50                   	push   %eax
   10952:	e8 22 ff ff ff       	call   10879 <memory_alloc_for_page_dir>
   10957:	83 c4 10             	add    $0x10,%esp
   1095a:	c9                   	leave  
   1095b:	c3                   	ret    

0001095c <list_node_init>:
    struct _list_node_t * pre;
    struct _list_node_t * next;
}list_node_t;


static inline void list_node_init (list_node_t * node) {
   1095c:	55                   	push   %ebp
   1095d:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   1095f:	8b 45 08             	mov    0x8(%ebp),%eax
   10962:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10969:	8b 45 08             	mov    0x8(%ebp),%eax
   1096c:	8b 50 04             	mov    0x4(%eax),%edx
   1096f:	8b 45 08             	mov    0x8(%ebp),%eax
   10972:	89 10                	mov    %edx,(%eax)
}
   10974:	90                   	nop
   10975:	5d                   	pop    %ebp
   10976:	c3                   	ret    

00010977 <list_node_next>:
static inline list_node_t * list_node_pre (list_node_t * node) {
    return node->pre;
}


static inline list_node_t * list_node_next (list_node_t * node) {
   10977:	55                   	push   %ebp
   10978:	89 e5                	mov    %esp,%ebp
    return node->next;
   1097a:	8b 45 08             	mov    0x8(%ebp),%eax
   1097d:	8b 40 04             	mov    0x4(%eax),%eax
}
   10980:	5d                   	pop    %ebp
   10981:	c3                   	ret    

00010982 <list_count>:

static inline int list_is_empty (list_t * list) {
    return list->count == 0;
}

static inline int list_count (list_t * list) {
   10982:	55                   	push   %ebp
   10983:	89 e5                	mov    %esp,%ebp
    return list->count;
   10985:	8b 45 08             	mov    0x8(%ebp),%eax
   10988:	8b 40 08             	mov    0x8(%eax),%eax
}
   1098b:	5d                   	pop    %ebp
   1098c:	c3                   	ret    

0001098d <list_first>:

static inline list_node_t * list_first (list_t * list) {
   1098d:	55                   	push   %ebp
   1098e:	89 e5                	mov    %esp,%ebp
    return list->first;
   10990:	8b 45 08             	mov    0x8(%ebp),%eax
   10993:	8b 00                	mov    (%eax),%eax
}
   10995:	5d                   	pop    %ebp
   10996:	c3                   	ret    

00010997 <write_cr3>:
static inline void write_cr3 (uint32_t v) {
   10997:	55                   	push   %ebp
   10998:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1099a:	8b 45 08             	mov    0x8(%ebp),%eax
   1099d:	0f 22 d8             	mov    %eax,%cr3
}
   109a0:	90                   	nop
   109a1:	5d                   	pop    %ebp
   109a2:	c3                   	ret    

000109a3 <hlt>:
    uint32_t addr[] = {offset, selector};

    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}

static inline void hlt (void) {
   109a3:	55                   	push   %ebp
   109a4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   109a6:	f4                   	hlt    
}
   109a7:	90                   	nop
   109a8:	5d                   	pop    %ebp
   109a9:	c3                   	ret    

000109aa <write_tr>:


static inline void write_tr(uint16_t tss_sel) {
   109aa:	55                   	push   %ebp
   109ab:	89 e5                	mov    %esp,%ebp
   109ad:	83 ec 04             	sub    $0x4,%esp
   109b0:	8b 45 08             	mov    0x8(%ebp),%eax
   109b3:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   109b7:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   109bb:	0f 00 d8             	ltr    %ax
}
   109be:	90                   	nop
   109bf:	c9                   	leave  
   109c0:	c3                   	ret    

000109c1 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   109c1:	55                   	push   %ebp
   109c2:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   109c4:	ff 75 08             	pushl  0x8(%ebp)
   109c7:	e8 cb ff ff ff       	call   10997 <write_cr3>
   109cc:	83 c4 04             	add    $0x4,%esp
}
   109cf:	90                   	nop
   109d0:	c9                   	leave  
   109d1:	c3                   	ret    

000109d2 <tss_init>:
#include "core/memory.h"

static uint32_t idle_task_stack[IDLE_TASK_SIZE];
static task_manager_t task_manager;

static int tss_init (task_t * task, uint32_t entry, uint32_t esp) {
   109d2:	f3 0f 1e fb          	endbr32 
   109d6:	55                   	push   %ebp
   109d7:	89 e5                	mov    %esp,%ebp
   109d9:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   109dc:	e8 c0 07 00 00       	call   111a1 <gdt_alloc_desc>
   109e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0) {
   109e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109e8:	79 1a                	jns    10a04 <tss_init+0x32>
        log_printf("alloc tss failed.\n");
   109ea:	83 ec 0c             	sub    $0xc,%esp
   109ed:	68 64 2c 01 00       	push   $0x12c64
   109f2:	e8 61 20 00 00       	call   12a58 <log_printf>
   109f7:	83 c4 10             	add    $0x10,%esp
        return -1;
   109fa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   109ff:	e9 00 01 00 00       	jmp    10b04 <tss_init+0x132>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   10a04:	8b 45 08             	mov    0x8(%ebp),%eax
   10a07:	83 c0 48             	add    $0x48,%eax
   10a0a:	68 89 00 00 00       	push   $0x89
   10a0f:	6a 68                	push   $0x68
   10a11:	50                   	push   %eax
   10a12:	ff 75 f4             	pushl  -0xc(%ebp)
   10a15:	e8 b2 06 00 00       	call   110cc <segment_desc_set>
   10a1a:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS
    );
    
    

    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10a1d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a20:	83 c0 48             	add    $0x48,%eax
   10a23:	83 ec 04             	sub    $0x4,%esp
   10a26:	6a 68                	push   $0x68
   10a28:	6a 00                	push   $0x0
   10a2a:	50                   	push   %eax
   10a2b:	e8 d7 19 00 00       	call   12407 <kernel_memset>
   10a30:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10a33:	8b 45 08             	mov    0x8(%ebp),%eax
   10a36:	8b 55 0c             	mov    0xc(%ebp),%edx
   10a39:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10a3c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3f:	8b 55 10             	mov    0x10(%ebp),%edx
   10a42:	89 50 4c             	mov    %edx,0x4c(%eax)
   10a45:	8b 45 08             	mov    0x8(%ebp),%eax
   10a48:	8b 50 4c             	mov    0x4c(%eax),%edx
   10a4b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a4e:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10a54:	8b 45 08             	mov    0x8(%ebp),%eax
   10a57:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   10a5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10a61:	8b 50 50             	mov    0x50(%eax),%edx
   10a64:	8b 45 08             	mov    0x8(%ebp),%eax
   10a67:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10a6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a70:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   10a77:	00 00 00 
   10a7a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7d:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10a83:	8b 45 08             	mov    0x8(%ebp),%eax
   10a86:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10a8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a8f:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10a95:	8b 45 08             	mov    0x8(%ebp),%eax
   10a98:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10a9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa1:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10aa7:	8b 45 08             	mov    0x8(%ebp),%eax
   10aaa:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   10ab0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab3:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10aba:	00 00 00 
    task->tss.eflags = EFLGAGS_IF | EFLGAGS_DEFAULT;
   10abd:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac0:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)
    
    uint32_t page_dir = memory_create_uvm();
   10ac7:	e8 3c fc ff ff       	call   10708 <memory_create_uvm>
   10acc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   10acf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10ad3:	75 15                	jne    10aea <tss_init+0x118>
        // 如果创建页表失败
        gdt_free_sel(tss_sel);
   10ad5:	83 ec 0c             	sub    $0xc,%esp
   10ad8:	ff 75 f4             	pushl  -0xc(%ebp)
   10adb:	e8 3a 07 00 00       	call   1121a <gdt_free_sel>
   10ae0:	83 c4 10             	add    $0x10,%esp
        return -1;
   10ae3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ae8:	eb 1a                	jmp    10b04 <tss_init+0x132>
    }
    task->tss.cr3 = page_dir;
   10aea:	8b 45 08             	mov    0x8(%ebp),%eax
   10aed:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10af0:	89 50 64             	mov    %edx,0x64(%eax)
    
    task->tss_sel = tss_sel;
   10af3:	8b 45 08             	mov    0x8(%ebp),%eax
   10af6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10af9:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b04:	c9                   	leave  
   10b05:	c3                   	ret    

00010b06 <task_init>:

int task_init (task_t * task, const char * name, uint32_t entry, uint32_t esp) {
   10b06:	f3 0f 1e fb          	endbr32 
   10b0a:	55                   	push   %ebp
   10b0b:	89 e5                	mov    %esp,%ebp
   10b0d:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   10b10:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b14:	75 19                	jne    10b2f <task_init+0x29>
   10b16:	68 77 2c 01 00       	push   $0x12c77
   10b1b:	68 00 2d 01 00       	push   $0x12d00
   10b20:	6a 30                	push   $0x30
   10b22:	68 8c 2c 01 00       	push   $0x12c8c
   10b27:	e8 07 1c 00 00       	call   12733 <pannic>
   10b2c:	83 c4 10             	add    $0x10,%esp

    tss_init(task, entry, esp);
   10b2f:	83 ec 04             	sub    $0x4,%esp
   10b32:	ff 75 14             	pushl  0x14(%ebp)
   10b35:	ff 75 10             	pushl  0x10(%ebp)
   10b38:	ff 75 08             	pushl  0x8(%ebp)
   10b3b:	e8 92 fe ff ff       	call   109d2 <tss_init>
   10b40:	83 c4 10             	add    $0x10,%esp

    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10b43:	8b 45 08             	mov    0x8(%ebp),%eax
   10b46:	83 c0 10             	add    $0x10,%eax
   10b49:	83 ec 04             	sub    $0x4,%esp
   10b4c:	6a 20                	push   $0x20
   10b4e:	ff 75 0c             	pushl  0xc(%ebp)
   10b51:	50                   	push   %eax
   10b52:	e8 2c 17 00 00       	call   12283 <kernel_strncpy>
   10b57:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->slice_ticks = 0;
   10b63:	8b 45 08             	mov    0x8(%ebp),%eax
   10b66:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b70:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task->slice_ticks = task->time_ticks;
   10b77:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7a:	8b 50 08             	mov    0x8(%eax),%edx
   10b7d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b80:	89 50 0c             	mov    %edx,0xc(%eax)
    list_node_init(&task->all_node);
   10b83:	8b 45 08             	mov    0x8(%ebp),%eax
   10b86:	83 c0 40             	add    $0x40,%eax
   10b89:	83 ec 0c             	sub    $0xc,%esp
   10b8c:	50                   	push   %eax
   10b8d:	e8 ca fd ff ff       	call   1095c <list_node_init>
   10b92:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10b95:	8b 45 08             	mov    0x8(%ebp),%eax
   10b98:	83 c0 30             	add    $0x30,%eax
   10b9b:	83 ec 0c             	sub    $0xc,%esp
   10b9e:	50                   	push   %eax
   10b9f:	e8 b8 fd ff ff       	call   1095c <list_node_init>
   10ba4:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10ba7:	8b 45 08             	mov    0x8(%ebp),%eax
   10baa:	83 c0 38             	add    $0x38,%eax
   10bad:	83 ec 0c             	sub    $0xc,%esp
   10bb0:	50                   	push   %eax
   10bb1:	e8 a6 fd ff ff       	call   1095c <list_node_init>
   10bb6:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10bb9:	e8 55 0f 00 00       	call   11b13 <irq_enter_protection>
   10bbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   10bc1:	83 ec 0c             	sub    $0xc,%esp
   10bc4:	ff 75 08             	pushl  0x8(%ebp)
   10bc7:	e8 8e 01 00 00       	call   10d5a <task_set_ready>
   10bcc:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list, &task->all_node);
   10bcf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd2:	83 c0 40             	add    $0x40,%eax
   10bd5:	83 ec 08             	sub    $0x8,%esp
   10bd8:	50                   	push   %eax
   10bd9:	68 10 80 01 00       	push   $0x18010
   10bde:	e8 29 1c 00 00       	call   1280c <list_insert_last>
   10be3:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   10be6:	83 ec 0c             	sub    $0xc,%esp
   10be9:	ff 75 f4             	pushl  -0xc(%ebp)
   10bec:	e8 3e 0f 00 00       	call   11b2f <irq_leave_protection>
   10bf1:	83 c4 10             	add    $0x10,%esp
    //     task->stack = pesp;

    // }

    
    return 0;
   10bf4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10bf9:	c9                   	leave  
   10bfa:	c3                   	ret    

00010bfb <task_switch_from_to>:

void simple_switch (uint32_t **from, uint32_t * to);

// 简单的用jmp到对应的tss选择子进行任务切换
void task_switch_from_to (task_t * from, task_t * to) {
   10bfb:	f3 0f 1e fb          	endbr32 
   10bff:	55                   	push   %ebp
   10c00:	89 e5                	mov    %esp,%ebp
   10c02:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   10c05:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c08:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10c0e:	83 ec 0c             	sub    $0xc,%esp
   10c11:	50                   	push   %eax
   10c12:	e8 d3 06 00 00       	call   112ea <switch_to_tss>
   10c17:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10c1a:	90                   	nop
   10c1b:	c9                   	leave  
   10c1c:	c3                   	ret    

00010c1d <task_first_init>:

void task_first_init (void) {
   10c1d:	f3 0f 1e fb          	endbr32 
   10c21:	55                   	push   %ebp
   10c22:	89 e5                	mov    %esp,%ebp
   10c24:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry (void);
    extern uint8_t s_first_task[], e_first_task[];  // 拷贝代码区域起始和结束区域

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   10c27:	b8 1c ae 01 00       	mov    $0x1ae1c,%eax
   10c2c:	2d e0 ad 01 00       	sub    $0x1ade0,%eax
   10c31:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;       // 分配了十个物理页
   10c34:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c3e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   10c41:	72 19                	jb     10c5c <task_first_init+0x3f>
   10c43:	68 d3 2c 01 00       	push   $0x12cd3
   10c48:	68 0c 2d 01 00       	push   $0x12d0c
   10c4d:	6a 5e                	push   $0x5e
   10c4f:	68 8c 2c 01 00       	push   $0x12c8c
   10c54:	e8 da 1a 00 00       	call   12733 <pannic>
   10c59:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   10c5c:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    task_init(&task_manager.first_task, "fist task" , first_start, 0);  
   10c63:	6a 00                	push   $0x0
   10c65:	ff 75 ec             	pushl  -0x14(%ebp)
   10c68:	68 ea 2c 01 00       	push   $0x12cea
   10c6d:	68 28 80 01 00       	push   $0x18028
   10c72:	e8 8f fe ff ff       	call   10b06 <task_init>
   10c77:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   10c7a:	a1 d8 80 01 00       	mov    0x180d8,%eax
   10c7f:	0f b7 c0             	movzwl %ax,%eax
   10c82:	83 ec 0c             	sub    $0xc,%esp
   10c85:	50                   	push   %eax
   10c86:	e8 1f fd ff ff       	call   109aa <write_tr>
   10c8b:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task; 
   10c8e:	c7 05 00 80 01 00 28 	movl   $0x18028,0x18000
   10c95:	80 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10c98:	a1 8c 80 01 00       	mov    0x1808c,%eax
   10c9d:	83 ec 0c             	sub    $0xc,%esp
   10ca0:	50                   	push   %eax
   10ca1:	e8 1b fd ff ff       	call   109c1 <mmu_set_page_dir>
   10ca6:	83 c4 10             	add    $0x10,%esp


    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W);
   10ca9:	83 ec 04             	sub    $0x4,%esp
   10cac:	6a 03                	push   $0x3
   10cae:	ff 75 f0             	pushl  -0x10(%ebp)
   10cb1:	ff 75 ec             	pushl  -0x14(%ebp)
   10cb4:	e8 7d fc ff ff       	call   10936 <memory_alloc_page_for>
   10cb9:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start,s_first_task, copy_size);
   10cbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10cbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10cc2:	83 ec 04             	sub    $0x4,%esp
   10cc5:	52                   	push   %edx
   10cc6:	68 e0 ad 01 00       	push   $0x1ade0
   10ccb:	50                   	push   %eax
   10ccc:	e8 e3 16 00 00       	call   123b4 <kernel_memcpy>
   10cd1:	83 c4 10             	add    $0x10,%esp
}
   10cd4:	90                   	nop
   10cd5:	c9                   	leave  
   10cd6:	c3                   	ret    

00010cd7 <task_first_task>:

task_t * task_first_task (void) {
   10cd7:	f3 0f 1e fb          	endbr32 
   10cdb:	55                   	push   %ebp
   10cdc:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10cde:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   10ce3:	5d                   	pop    %ebp
   10ce4:	c3                   	ret    

00010ce5 <idle_task_entry>:

static void idle_task_entry (void) {
   10ce5:	f3 0f 1e fb          	endbr32 
   10ce9:	55                   	push   %ebp
   10cea:	89 e5                	mov    %esp,%ebp
    for (;;) {
        hlt();
   10cec:	e8 b2 fc ff ff       	call   109a3 <hlt>
   10cf1:	eb f9                	jmp    10cec <idle_task_entry+0x7>

00010cf3 <task_manager_init>:
    }
}

void task_manager_init (void) {
   10cf3:	f3 0f 1e fb          	endbr32 
   10cf7:	55                   	push   %ebp
   10cf8:	89 e5                	mov    %esp,%ebp
   10cfa:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10cfd:	83 ec 0c             	sub    $0xc,%esp
   10d00:	68 04 80 01 00       	push   $0x18004
   10d05:	e8 76 1a 00 00       	call   12780 <list_init>
   10d0a:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10d0d:	83 ec 0c             	sub    $0xc,%esp
   10d10:	68 10 80 01 00       	push   $0x18010
   10d15:	e8 66 1a 00 00       	call   12780 <list_init>
   10d1a:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10d1d:	83 ec 0c             	sub    $0xc,%esp
   10d20:	68 1c 80 01 00       	push   $0x1801c
   10d25:	e8 56 1a 00 00       	call   12780 <list_init>
   10d2a:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   10d2d:	c7 05 00 80 01 00 00 	movl   $0x0,0x18000
   10d34:	00 00 00 

    task_init(&task_manager.idle_task, 
        "idle_task",
        (uint32_t)idle_task_entry,
        (uint32_t)(idle_task_stack + IDLE_TASK_SIZE)
   10d37:	b8 00 80 01 00       	mov    $0x18000,%eax
    task_init(&task_manager.idle_task, 
   10d3c:	89 c2                	mov    %eax,%edx
   10d3e:	b8 e5 0c 01 00       	mov    $0x10ce5,%eax
   10d43:	52                   	push   %edx
   10d44:	50                   	push   %eax
   10d45:	68 f4 2c 01 00       	push   $0x12cf4
   10d4a:	68 dc 80 01 00       	push   $0x180dc
   10d4f:	e8 b2 fd ff ff       	call   10b06 <task_init>
   10d54:	83 c4 10             	add    $0x10,%esp
    );
}
   10d57:	90                   	nop
   10d58:	c9                   	leave  
   10d59:	c3                   	ret    

00010d5a <task_set_ready>:

void task_set_ready(task_t * task) {
   10d5a:	f3 0f 1e fb          	endbr32 
   10d5e:	55                   	push   %ebp
   10d5f:	89 e5                	mov    %esp,%ebp
   10d61:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10d64:	81 7d 08 dc 80 01 00 	cmpl   $0x180dc,0x8(%ebp)
   10d6b:	74 22                	je     10d8f <task_set_ready+0x35>
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   10d6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d70:	83 c0 30             	add    $0x30,%eax
   10d73:	83 ec 08             	sub    $0x8,%esp
   10d76:	50                   	push   %eax
   10d77:	68 04 80 01 00       	push   $0x18004
   10d7c:	e8 8b 1a 00 00       	call   1280c <list_insert_last>
   10d81:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10d84:	8b 45 08             	mov    0x8(%ebp),%eax
   10d87:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   10d8d:	eb 01                	jmp    10d90 <task_set_ready+0x36>
        return;
   10d8f:	90                   	nop
}
   10d90:	c9                   	leave  
   10d91:	c3                   	ret    

00010d92 <task_set_block>:


void task_set_block (task_t * task) {
   10d92:	f3 0f 1e fb          	endbr32 
   10d96:	55                   	push   %ebp
   10d97:	89 e5                	mov    %esp,%ebp
   10d99:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10d9c:	81 7d 08 dc 80 01 00 	cmpl   $0x180dc,0x8(%ebp)
   10da3:	74 19                	je     10dbe <task_set_block+0x2c>
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   10da5:	8b 45 08             	mov    0x8(%ebp),%eax
   10da8:	83 c0 30             	add    $0x30,%eax
   10dab:	83 ec 08             	sub    $0x8,%esp
   10dae:	50                   	push   %eax
   10daf:	68 04 80 01 00       	push   $0x18004
   10db4:	e8 37 1b 00 00       	call   128f0 <list_remove>
   10db9:	83 c4 10             	add    $0x10,%esp
   10dbc:	eb 01                	jmp    10dbf <task_set_block+0x2d>
        return;
   10dbe:	90                   	nop
}
   10dbf:	c9                   	leave  
   10dc0:	c3                   	ret    

00010dc1 <task_next_run>:


// 返回下一个的进程(就绪队列头部的进程)
task_t * task_next_run (void) {
   10dc1:	f3 0f 1e fb          	endbr32 
   10dc5:	55                   	push   %ebp
   10dc6:	89 e5                	mov    %esp,%ebp
   10dc8:	83 ec 10             	sub    $0x10,%esp
    // 如果没有进程就进入空闲进程
    if (list_count(&task_manager.ready_list) == 0) {
   10dcb:	68 04 80 01 00       	push   $0x18004
   10dd0:	e8 ad fb ff ff       	call   10982 <list_count>
   10dd5:	83 c4 04             	add    $0x4,%esp
   10dd8:	85 c0                	test   %eax,%eax
   10dda:	75 07                	jne    10de3 <task_next_run+0x22>
        return &task_manager.idle_task;
   10ddc:	b8 dc 80 01 00       	mov    $0x180dc,%eax
   10de1:	eb 23                	jmp    10e06 <task_next_run+0x45>
    }

    list_node_t * task_node = list_first(&task_manager.ready_list);
   10de3:	68 04 80 01 00       	push   $0x18004
   10de8:	e8 a0 fb ff ff       	call   1098d <list_first>
   10ded:	83 c4 04             	add    $0x4,%esp
   10df0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   10df3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10df7:	74 08                	je     10e01 <task_next_run+0x40>
   10df9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dfc:	83 e8 30             	sub    $0x30,%eax
   10dff:	eb 05                	jmp    10e06 <task_next_run+0x45>
   10e01:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e06:	c9                   	leave  
   10e07:	c3                   	ret    

00010e08 <task_current>:


task_t * task_current (void) {
   10e08:	f3 0f 1e fb          	endbr32 
   10e0c:	55                   	push   %ebp
   10e0d:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10e0f:	a1 00 80 01 00       	mov    0x18000,%eax
}
   10e14:	5d                   	pop    %ebp
   10e15:	c3                   	ret    

00010e16 <sys_sched_yield>:

// 让进程让出CPU
int sys_sched_yield() {
   10e16:	f3 0f 1e fb          	endbr32 
   10e1a:	55                   	push   %ebp
   10e1b:	89 e5                	mov    %esp,%ebp
   10e1d:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   10e20:	e8 ee 0c 00 00       	call   11b13 <irq_enter_protection>
   10e25:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&task_manager.ready_list) > 1) {
   10e28:	83 ec 0c             	sub    $0xc,%esp
   10e2b:	68 04 80 01 00       	push   $0x18004
   10e30:	e8 4d fb ff ff       	call   10982 <list_count>
   10e35:	83 c4 10             	add    $0x10,%esp
   10e38:	83 f8 01             	cmp    $0x1,%eax
   10e3b:	7e 29                	jle    10e66 <sys_sched_yield+0x50>
        task_t * curr_task = task_current();
   10e3d:	e8 c6 ff ff ff       	call   10e08 <task_current>
   10e42:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task);
   10e45:	83 ec 0c             	sub    $0xc,%esp
   10e48:	ff 75 f0             	pushl  -0x10(%ebp)
   10e4b:	e8 42 ff ff ff       	call   10d92 <task_set_block>
   10e50:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);    // 再加入的时候，是加入队列的尾部
   10e53:	83 ec 0c             	sub    $0xc,%esp
   10e56:	ff 75 f0             	pushl  -0x10(%ebp)
   10e59:	e8 fc fe ff ff       	call   10d5a <task_set_ready>
   10e5e:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10e61:	e8 15 00 00 00       	call   10e7b <task_dispatch>
    }

    irq_leave_protection(state);
   10e66:	83 ec 0c             	sub    $0xc,%esp
   10e69:	ff 75 f4             	pushl  -0xc(%ebp)
   10e6c:	e8 be 0c 00 00       	call   11b2f <irq_leave_protection>
   10e71:	83 c4 10             	add    $0x10,%esp
    // 如果就绪队列里面就1个进程。
    return 0;
   10e74:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e79:	c9                   	leave  
   10e7a:	c3                   	ret    

00010e7b <task_dispatch>:


void task_dispatch (void) {
   10e7b:	f3 0f 1e fb          	endbr32 
   10e7f:	55                   	push   %ebp
   10e80:	89 e5                	mov    %esp,%ebp
   10e82:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   10e85:	e8 89 0c 00 00       	call   11b13 <irq_enter_protection>
   10e8a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * to = task_next_run();
   10e8d:	e8 2f ff ff ff       	call   10dc1 <task_next_run>
   10e92:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task) {
   10e95:	a1 00 80 01 00       	mov    0x18000,%eax
   10e9a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10e9d:	74 2a                	je     10ec9 <task_dispatch+0x4e>
        task_t * from = task_current();
   10e9f:	e8 64 ff ff ff       	call   10e08 <task_current>
   10ea4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10ea7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10eaa:	a3 00 80 01 00       	mov    %eax,0x18000
        to->state = TASK_RUNNING;
   10eaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10eb2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   10eb8:	83 ec 08             	sub    $0x8,%esp
   10ebb:	ff 75 f0             	pushl  -0x10(%ebp)
   10ebe:	ff 75 ec             	pushl  -0x14(%ebp)
   10ec1:	e8 35 fd ff ff       	call   10bfb <task_switch_from_to>
   10ec6:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);
   10ec9:	83 ec 0c             	sub    $0xc,%esp
   10ecc:	ff 75 f4             	pushl  -0xc(%ebp)
   10ecf:	e8 5b 0c 00 00       	call   11b2f <irq_leave_protection>
   10ed4:	83 c4 10             	add    $0x10,%esp

}
   10ed7:	90                   	nop
   10ed8:	c9                   	leave  
   10ed9:	c3                   	ret    

00010eda <task_time_tick>:


// 实现进程时间切片
void task_time_tick(void) {
   10eda:	f3 0f 1e fb          	endbr32 
   10ede:	55                   	push   %ebp
   10edf:	89 e5                	mov    %esp,%ebp
   10ee1:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   10ee4:	e8 1f ff ff ff       	call   10e08 <task_current>
   10ee9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    irq_state_t state = irq_enter_protection();
   10eec:	e8 22 0c 00 00       	call   11b13 <irq_enter_protection>
   10ef1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0) {
   10ef4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ef7:	8b 40 0c             	mov    0xc(%eax),%eax
   10efa:	8d 50 ff             	lea    -0x1(%eax),%edx
   10efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f00:	89 50 0c             	mov    %edx,0xc(%eax)
   10f03:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f06:	8b 40 0c             	mov    0xc(%eax),%eax
   10f09:	85 c0                	test   %eax,%eax
   10f0b:	75 2d                	jne    10f3a <task_time_tick+0x60>

        curr_task->slice_ticks = curr_task->time_ticks;
   10f0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f10:	8b 50 08             	mov    0x8(%eax),%edx
   10f13:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f16:	89 50 0c             	mov    %edx,0xc(%eax)

        task_set_block(curr_task);
   10f19:	83 ec 0c             	sub    $0xc,%esp
   10f1c:	ff 75 f0             	pushl  -0x10(%ebp)
   10f1f:	e8 6e fe ff ff       	call   10d92 <task_set_block>
   10f24:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task); 
   10f27:	83 ec 0c             	sub    $0xc,%esp
   10f2a:	ff 75 f0             	pushl  -0x10(%ebp)
   10f2d:	e8 28 fe ff ff       	call   10d5a <task_set_ready>
   10f32:	83 c4 10             	add    $0x10,%esp


        task_dispatch();
   10f35:	e8 41 ff ff ff       	call   10e7b <task_dispatch>

    }


    list_node_t * curr = list_first(&task_manager.sleep_list);
   10f3a:	83 ec 0c             	sub    $0xc,%esp
   10f3d:	68 1c 80 01 00       	push   $0x1801c
   10f42:	e8 46 fa ff ff       	call   1098d <list_first>
   10f47:	83 c4 10             	add    $0x10,%esp
   10f4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr) {
   10f4d:	eb 62                	jmp    10fb1 <task_time_tick+0xd7>
        list_node_t * next = list_node_next(curr);
   10f4f:	83 ec 0c             	sub    $0xc,%esp
   10f52:	ff 75 f4             	pushl  -0xc(%ebp)
   10f55:	e8 1d fa ff ff       	call   10977 <list_node_next>
   10f5a:	83 c4 10             	add    $0x10,%esp
   10f5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        
        task_t * task = list_node_parent(curr, task_t, run_node);
   10f60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f64:	74 08                	je     10f6e <task_time_tick+0x94>
   10f66:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f69:	83 e8 30             	sub    $0x30,%eax
   10f6c:	eb 05                	jmp    10f73 <task_time_tick+0x99>
   10f6e:	b8 00 00 00 00       	mov    $0x0,%eax
   10f73:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0) {
   10f76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10f79:	8b 40 04             	mov    0x4(%eax),%eax
   10f7c:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10f82:	89 50 04             	mov    %edx,0x4(%eax)
   10f85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10f88:	8b 40 04             	mov    0x4(%eax),%eax
   10f8b:	85 c0                	test   %eax,%eax
   10f8d:	75 1c                	jne    10fab <task_time_tick+0xd1>
            task_set_wakeup(task);
   10f8f:	83 ec 0c             	sub    $0xc,%esp
   10f92:	ff 75 e4             	pushl  -0x1c(%ebp)
   10f95:	e8 71 00 00 00       	call   1100b <task_set_wakeup>
   10f9a:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   10f9d:	83 ec 0c             	sub    $0xc,%esp
   10fa0:	ff 75 e4             	pushl  -0x1c(%ebp)
   10fa3:	e8 b2 fd ff ff       	call   10d5a <task_set_ready>
   10fa8:	83 c4 10             	add    $0x10,%esp
        }

        curr = next;
   10fab:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10fae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr) {
   10fb1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10fb5:	75 98                	jne    10f4f <task_time_tick+0x75>

    }

    task_dispatch();
   10fb7:	e8 bf fe ff ff       	call   10e7b <task_dispatch>
    irq_leave_protection(state);
   10fbc:	83 ec 0c             	sub    $0xc,%esp
   10fbf:	ff 75 ec             	pushl  -0x14(%ebp)
   10fc2:	e8 68 0b 00 00       	call   11b2f <irq_leave_protection>
   10fc7:	83 c4 10             	add    $0x10,%esp

}
   10fca:	90                   	nop
   10fcb:	c9                   	leave  
   10fcc:	c3                   	ret    

00010fcd <task_set_sleep>:


void task_set_sleep (task_t * task, uint32_t ticks) {
   10fcd:	f3 0f 1e fb          	endbr32 
   10fd1:	55                   	push   %ebp
   10fd2:	89 e5                	mov    %esp,%ebp
   10fd4:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   10fd7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fdb:	74 2b                	je     11008 <task_set_sleep+0x3b>
        return;
    }

    task->sleep_ticks = ticks;
   10fdd:	8b 55 0c             	mov    0xc(%ebp),%edx
   10fe0:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe3:	89 50 04             	mov    %edx,0x4(%eax)
    task->state = TASK_SLEEP;
   10fe6:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe9:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   10fef:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff2:	83 c0 30             	add    $0x30,%eax
   10ff5:	83 ec 08             	sub    $0x8,%esp
   10ff8:	50                   	push   %eax
   10ff9:	68 1c 80 01 00       	push   $0x1801c
   10ffe:	e8 09 18 00 00       	call   1280c <list_insert_last>
   11003:	83 c4 10             	add    $0x10,%esp
   11006:	eb 01                	jmp    11009 <task_set_sleep+0x3c>
        return;
   11008:	90                   	nop

}
   11009:	c9                   	leave  
   1100a:	c3                   	ret    

0001100b <task_set_wakeup>:

void task_set_wakeup (task_t * task) {
   1100b:	f3 0f 1e fb          	endbr32 
   1100f:	55                   	push   %ebp
   11010:	89 e5                	mov    %esp,%ebp
   11012:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   11015:	8b 45 08             	mov    0x8(%ebp),%eax
   11018:	83 c0 30             	add    $0x30,%eax
   1101b:	83 ec 08             	sub    $0x8,%esp
   1101e:	50                   	push   %eax
   1101f:	68 1c 80 01 00       	push   $0x1801c
   11024:	e8 c7 18 00 00       	call   128f0 <list_remove>
   11029:	83 c4 10             	add    $0x10,%esp
}
   1102c:	90                   	nop
   1102d:	c9                   	leave  
   1102e:	c3                   	ret    

0001102f <sys_sleep>:

void sys_sleep (uint32_t ms) {
   1102f:	f3 0f 1e fb          	endbr32 
   11033:	55                   	push   %ebp
   11034:	89 e5                	mov    %esp,%ebp
   11036:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11039:	e8 d5 0a 00 00       	call   11b13 <irq_enter_protection>
   1103e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_block(task_manager.curr_task);
   11041:	a1 00 80 01 00       	mov    0x18000,%eax
   11046:	83 ec 0c             	sub    $0xc,%esp
   11049:	50                   	push   %eax
   1104a:	e8 43 fd ff ff       	call   10d92 <task_set_block>
   1104f:	83 c4 10             	add    $0x10,%esp

    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1))/ OS_TICKS_MS);
   11052:	8b 45 08             	mov    0x8(%ebp),%eax
   11055:	83 c0 09             	add    $0x9,%eax
   11058:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   1105d:	f7 e2                	mul    %edx
   1105f:	c1 ea 03             	shr    $0x3,%edx
   11062:	a1 00 80 01 00       	mov    0x18000,%eax
   11067:	83 ec 08             	sub    $0x8,%esp
   1106a:	52                   	push   %edx
   1106b:	50                   	push   %eax
   1106c:	e8 5c ff ff ff       	call   10fcd <task_set_sleep>
   11071:	83 c4 10             	add    $0x10,%esp

    task_dispatch();
   11074:	e8 02 fe ff ff       	call   10e7b <task_dispatch>

    irq_leave_protection(state);
   11079:	83 ec 0c             	sub    $0xc,%esp
   1107c:	ff 75 f4             	pushl  -0xc(%ebp)
   1107f:	e8 ab 0a 00 00       	call   11b2f <irq_leave_protection>
   11084:	83 c4 10             	add    $0x10,%esp

}
   11087:	90                   	nop
   11088:	c9                   	leave  
   11089:	c3                   	ret    

0001108a <lgdt>:
static inline void lgdt (uint32_t start, uint32_t size) {
   1108a:	55                   	push   %ebp
   1108b:	89 e5                	mov    %esp,%ebp
   1108d:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   11090:	8b 45 08             	mov    0x8(%ebp),%eax
   11093:	c1 e8 10             	shr    $0x10,%eax
   11096:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   1109a:	8b 45 08             	mov    0x8(%ebp),%eax
   1109d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   110a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   110a4:	83 e8 01             	sub    $0x1,%eax
   110a7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   110ab:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   110af:	90                   	nop
   110b0:	c9                   	leave  
   110b1:	c3                   	ret    

000110b2 <far_jump>:
static inline void far_jump (uint32_t selector, uint32_t offset) {
   110b2:	55                   	push   %ebp
   110b3:	89 e5                	mov    %esp,%ebp
   110b5:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   110b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   110bb:	89 45 f8             	mov    %eax,-0x8(%ebp)
   110be:	8b 45 08             	mov    0x8(%ebp),%eax
   110c1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   110c4:	8d 45 f8             	lea    -0x8(%ebp),%eax
   110c7:	ff 28                	ljmp   *(%eax)
}
   110c9:	90                   	nop
   110ca:	c9                   	leave  
   110cb:	c3                   	ret    

000110cc <segment_desc_set>:

static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;


void segment_desc_set (int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   110cc:	f3 0f 1e fb          	endbr32 
   110d0:	55                   	push   %ebp
   110d1:	89 e5                	mov    %esp,%ebp
   110d3:	83 ec 14             	sub    $0x14,%esp
   110d6:	8b 45 14             	mov    0x14(%ebp),%eax
   110d9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   110dd:	8b 45 08             	mov    0x8(%ebp),%eax
   110e0:	c1 f8 03             	sar    $0x3,%eax
   110e3:	c1 e0 03             	shl    $0x3,%eax
   110e6:	05 a0 81 01 00       	add    $0x181a0,%eax
   110eb:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (limit > 0xFFFFF) {
   110ee:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   110f5:	76 0f                	jbe    11106 <segment_desc_set+0x3a>
        // 如果limit太大，就把G位置1
        attr |= 0x8000;
   110f7:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   110fd:	8b 45 10             	mov    0x10(%ebp),%eax
   11100:	c1 e8 0c             	shr    $0xc,%eax
   11103:	89 45 10             	mov    %eax,0x10(%ebp)
    }

    desc->limit15_0 = limit & 0xFFFF;
   11106:	8b 45 10             	mov    0x10(%ebp),%eax
   11109:	89 c2                	mov    %eax,%edx
   1110b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1110e:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   11111:	8b 45 0c             	mov    0xc(%ebp),%eax
   11114:	89 c2                	mov    %eax,%edx
   11116:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11119:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   1111d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11120:	c1 e8 10             	shr    $0x10,%eax
   11123:	89 c2                	mov    %eax,%edx
   11125:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11128:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   1112b:	8b 45 10             	mov    0x10(%ebp),%eax
   1112e:	c1 e8 10             	shr    $0x10,%eax
   11131:	c1 e0 08             	shl    $0x8,%eax
   11134:	66 25 00 0f          	and    $0xf00,%ax
   11138:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1113c:	89 c2                	mov    %eax,%edx
   1113e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11141:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   11145:	8b 45 0c             	mov    0xc(%ebp),%eax
   11148:	c1 e8 18             	shr    $0x18,%eax
   1114b:	89 c2                	mov    %eax,%edx
   1114d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11150:	88 50 07             	mov    %dl,0x7(%eax)
}
   11153:	90                   	nop
   11154:	c9                   	leave  
   11155:	c3                   	ret    

00011156 <gate_desc_set>:


void gate_desc_set (gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   11156:	f3 0f 1e fb          	endbr32 
   1115a:	55                   	push   %ebp
   1115b:	89 e5                	mov    %esp,%ebp
   1115d:	83 ec 08             	sub    $0x8,%esp
   11160:	8b 55 0c             	mov    0xc(%ebp),%edx
   11163:	8b 45 14             	mov    0x14(%ebp),%eax
   11166:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1116a:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   1116e:	8b 45 10             	mov    0x10(%ebp),%eax
   11171:	89 c2                	mov    %eax,%edx
   11173:	8b 45 08             	mov    0x8(%ebp),%eax
   11176:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   11179:	8b 45 08             	mov    0x8(%ebp),%eax
   1117c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11180:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   11184:	8b 45 08             	mov    0x8(%ebp),%eax
   11187:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1118b:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   1118f:	8b 45 10             	mov    0x10(%ebp),%eax
   11192:	c1 e8 10             	shr    $0x10,%eax
   11195:	89 c2                	mov    %eax,%edx
   11197:	8b 45 08             	mov    0x8(%ebp),%eax
   1119a:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   1119e:	90                   	nop
   1119f:	c9                   	leave  
   111a0:	c3                   	ret    

000111a1 <gdt_alloc_desc>:

int gdt_alloc_desc() {
   111a1:	f3 0f 1e fb          	endbr32 
   111a5:	55                   	push   %ebp
   111a6:	89 e5                	mov    %esp,%ebp
   111a8:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&mutex);
   111ab:	83 ec 0c             	sub    $0xc,%esp
   111ae:	68 a0 89 01 00       	push   $0x189a0
   111b3:	e8 6c 0b 00 00       	call   11d24 <mutex_lock>
   111b8:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i ++ ) {
   111bb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   111c2:	eb 36                	jmp    111fa <gdt_alloc_desc+0x59>
        segment_desc_t * desc = gdt_table + i;
   111c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111c7:	c1 e0 03             	shl    $0x3,%eax
   111ca:	05 a0 81 01 00       	add    $0x181a0,%eax
   111cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   111d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111d5:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   111d9:	66 85 c0             	test   %ax,%ax
   111dc:	75 18                	jne    111f6 <gdt_alloc_desc+0x55>
            mutex_unlock(&mutex);
   111de:	83 ec 0c             	sub    $0xc,%esp
   111e1:	68 a0 89 01 00       	push   $0x189a0
   111e6:	e8 ce 0b 00 00       	call   11db9 <mutex_unlock>
   111eb:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   111ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111f1:	c1 e0 03             	shl    $0x3,%eax
   111f4:	eb 22                	jmp    11218 <gdt_alloc_desc+0x77>
    for (int i = 1; i < GDT_TABLE_SIZE; i ++ ) {
   111f6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   111fa:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11201:	7e c1                	jle    111c4 <gdt_alloc_desc+0x23>
        }
    }

    mutex_unlock(&mutex);
   11203:	83 ec 0c             	sub    $0xc,%esp
   11206:	68 a0 89 01 00       	push   $0x189a0
   1120b:	e8 a9 0b 00 00       	call   11db9 <mutex_unlock>
   11210:	83 c4 10             	add    $0x10,%esp

    return -1;
   11213:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11218:	c9                   	leave  
   11219:	c3                   	ret    

0001121a <gdt_free_sel>:


void gdt_free_sel(int sel) {
   1121a:	f3 0f 1e fb          	endbr32 
   1121e:	55                   	push   %ebp
   1121f:	89 e5                	mov    %esp,%ebp
   11221:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   11224:	83 ec 0c             	sub    $0xc,%esp
   11227:	68 a0 89 01 00       	push   $0x189a0
   1122c:	e8 f3 0a 00 00       	call   11d24 <mutex_lock>
   11231:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel/sizeof(segment_desc_t)].attr = 0;
   11234:	8b 45 08             	mov    0x8(%ebp),%eax
   11237:	c1 e8 03             	shr    $0x3,%eax
   1123a:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   11241:	00 00 00 
    mutex_unlock(&mutex);
   11244:	83 ec 0c             	sub    $0xc,%esp
   11247:	68 a0 89 01 00       	push   $0x189a0
   1124c:	e8 68 0b 00 00       	call   11db9 <mutex_unlock>
   11251:	83 c4 10             	add    $0x10,%esp
}
   11254:	90                   	nop
   11255:	c9                   	leave  
   11256:	c3                   	ret    

00011257 <init_gdt>:


void init_gdt (void) {
   11257:	f3 0f 1e fb          	endbr32 
   1125b:	55                   	push   %ebp
   1125c:	89 e5                	mov    %esp,%ebp
   1125e:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i ++ ) {
   11261:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11268:	eb 19                	jmp    11283 <init_gdt+0x2c>
        segment_desc_set(i << 3, 0, 0, 0);
   1126a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1126d:	c1 e0 03             	shl    $0x3,%eax
   11270:	6a 00                	push   $0x0
   11272:	6a 00                	push   $0x0
   11274:	6a 00                	push   $0x0
   11276:	50                   	push   %eax
   11277:	e8 50 fe ff ff       	call   110cc <segment_desc_set>
   1127c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i ++ ) {
   1127f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11283:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1128a:	7e de                	jle    1126a <init_gdt+0x13>
    }


    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1128c:	68 92 c0 00 00       	push   $0xc092
   11291:	6a ff                	push   $0xffffffff
   11293:	6a 00                	push   $0x0
   11295:	6a 10                	push   $0x10
   11297:	e8 30 fe ff ff       	call   110cc <segment_desc_set>
   1129c:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1129f:	68 9a c0 00 00       	push   $0xc09a
   112a4:	6a ff                	push   $0xffffffff
   112a6:	6a 00                	push   $0x0
   112a8:	6a 08                	push   $0x8
   112aa:	e8 1d fe ff ff       	call   110cc <segment_desc_set>
   112af:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   112b2:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   112b7:	68 00 08 00 00       	push   $0x800
   112bc:	50                   	push   %eax
   112bd:	e8 c8 fd ff ff       	call   1108a <lgdt>
   112c2:	83 c4 08             	add    $0x8,%esp


}
   112c5:	90                   	nop
   112c6:	c9                   	leave  
   112c7:	c3                   	ret    

000112c8 <cpu_init>:
void cpu_init (void) {
   112c8:	f3 0f 1e fb          	endbr32 
   112cc:	55                   	push   %ebp
   112cd:	89 e5                	mov    %esp,%ebp
   112cf:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   112d2:	83 ec 0c             	sub    $0xc,%esp
   112d5:	68 a0 89 01 00       	push   $0x189a0
   112da:	e8 13 0a 00 00       	call   11cf2 <mutex_init>
   112df:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   112e2:	e8 70 ff ff ff       	call   11257 <init_gdt>
}
   112e7:	90                   	nop
   112e8:	c9                   	leave  
   112e9:	c3                   	ret    

000112ea <switch_to_tss>:


void switch_to_tss (int tss_sel) {
   112ea:	f3 0f 1e fb          	endbr32 
   112ee:	55                   	push   %ebp
   112ef:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   112f1:	8b 45 08             	mov    0x8(%ebp),%eax
   112f4:	6a 00                	push   $0x0
   112f6:	50                   	push   %eax
   112f7:	e8 b6 fd ff ff       	call   110b2 <far_jump>
   112fc:	83 c4 08             	add    $0x8,%esp
   112ff:	90                   	nop
   11300:	c9                   	leave  
   11301:	c3                   	ret    

00011302 <inb>:
static inline uint8_t inb (uint16_t port) {
   11302:	55                   	push   %ebp
   11303:	89 e5                	mov    %esp,%ebp
   11305:	83 ec 14             	sub    $0x14,%esp
   11308:	8b 45 08             	mov    0x8(%ebp),%eax
   1130b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   1130f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11313:	89 c2                	mov    %eax,%edx
   11315:	ec                   	in     (%dx),%al
   11316:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11319:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1131d:	c9                   	leave  
   1131e:	c3                   	ret    

0001131f <outb>:
static inline void outb (uint16_t port, uint8_t data) {
   1131f:	55                   	push   %ebp
   11320:	89 e5                	mov    %esp,%ebp
   11322:	83 ec 08             	sub    $0x8,%esp
   11325:	8b 45 08             	mov    0x8(%ebp),%eax
   11328:	8b 55 0c             	mov    0xc(%ebp),%edx
   1132b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1132f:	89 d0                	mov    %edx,%eax
   11331:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11334:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11338:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1133c:	ee                   	out    %al,(%dx)
}
   1133d:	90                   	nop
   1133e:	c9                   	leave  
   1133f:	c3                   	ret    

00011340 <cli>:
static inline void cli () {
   11340:	55                   	push   %ebp
   11341:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   11343:	fa                   	cli    
}
   11344:	90                   	nop
   11345:	5d                   	pop    %ebp
   11346:	c3                   	ret    

00011347 <sti>:
static inline void sti () {
   11347:	55                   	push   %ebp
   11348:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   1134a:	fb                   	sti    
}
   1134b:	90                   	nop
   1134c:	5d                   	pop    %ebp
   1134d:	c3                   	ret    

0001134e <lidt>:
static inline void lidt (uint32_t start, uint32_t size) {
   1134e:	55                   	push   %ebp
   1134f:	89 e5                	mov    %esp,%ebp
   11351:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   11354:	8b 45 08             	mov    0x8(%ebp),%eax
   11357:	c1 e8 10             	shr    $0x10,%eax
   1135a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   1135e:	8b 45 08             	mov    0x8(%ebp),%eax
   11361:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   11365:	8b 45 0c             	mov    0xc(%ebp),%eax
   11368:	83 e8 01             	sub    $0x1,%eax
   1136b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %0"::"m"(idt));
   1136f:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11373:	90                   	nop
   11374:	c9                   	leave  
   11375:	c3                   	ret    

00011376 <read_eflags>:


static inline uint32_t read_eflags (void) {
   11376:	55                   	push   %ebp
   11377:	89 e5                	mov    %esp,%ebp
   11379:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   1137c:	9c                   	pushf  
   1137d:	58                   	pop    %eax
   1137e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   11381:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11384:	c9                   	leave  
   11385:	c3                   	ret    

00011386 <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   11386:	55                   	push   %ebp
   11387:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   11389:	8b 45 08             	mov    0x8(%ebp),%eax
   1138c:	50                   	push   %eax
   1138d:	9d                   	popf   

}
   1138e:	90                   	nop
   1138f:	5d                   	pop    %ebp
   11390:	c3                   	ret    

00011391 <dump_core_regs>:

void exception_handler_unknown (void);

static gate_desc_t idt_table[IDT_TABLE_NR];

static void dump_core_regs (exception_frame_t * frame) {
   11391:	f3 0f 1e fb          	endbr32 
   11395:	55                   	push   %ebp
   11396:	89 e5                	mov    %esp,%ebp
   11398:	57                   	push   %edi
   11399:	56                   	push   %esi
   1139a:	53                   	push   %ebx
   1139b:	83 ec 1c             	sub    $0x1c,%esp
	log_printf("IRQ: %d, error code: %d", frame->num, frame->error_code);
   1139e:	8b 45 08             	mov    0x8(%ebp),%eax
   113a1:	8b 50 34             	mov    0x34(%eax),%edx
   113a4:	8b 45 08             	mov    0x8(%ebp),%eax
   113a7:	8b 40 30             	mov    0x30(%eax),%eax
   113aa:	83 ec 04             	sub    $0x4,%esp
   113ad:	52                   	push   %edx
   113ae:	50                   	push   %eax
   113af:	68 1c 2d 01 00       	push   $0x12d1c
   113b4:	e8 9f 16 00 00       	call   12a58 <log_printf>
   113b9:	83 c4 10             	add    $0x10,%esp
	log_printf("CS: %d\n\rDS: %d\n\rES: %d\n\rFS: %d\n\rGS:%d",
   113bc:	8b 45 08             	mov    0x8(%ebp),%eax
   113bf:	8b 30                	mov    (%eax),%esi
   113c1:	8b 45 08             	mov    0x8(%ebp),%eax
   113c4:	8b 58 04             	mov    0x4(%eax),%ebx
   113c7:	8b 45 08             	mov    0x8(%ebp),%eax
   113ca:	8b 48 08             	mov    0x8(%eax),%ecx
   113cd:	8b 45 08             	mov    0x8(%ebp),%eax
   113d0:	8b 50 0c             	mov    0xc(%eax),%edx
   113d3:	8b 45 08             	mov    0x8(%ebp),%eax
   113d6:	8b 40 3c             	mov    0x3c(%eax),%eax
   113d9:	83 ec 08             	sub    $0x8,%esp
   113dc:	56                   	push   %esi
   113dd:	53                   	push   %ebx
   113de:	51                   	push   %ecx
   113df:	52                   	push   %edx
   113e0:	50                   	push   %eax
   113e1:	68 34 2d 01 00       	push   $0x12d34
   113e6:	e8 6d 16 00 00       	call   12a58 <log_printf>
   113eb:	83 c4 20             	add    $0x20,%esp
		frame->cs, frame->ds, frame->es, frame->fs, frame->gs
	);
	log_printf("EAX: 0x%x\n\r"
   113ee:	8b 45 08             	mov    0x8(%ebp),%eax
   113f1:	8b 48 1c             	mov    0x1c(%eax),%ecx
   113f4:	8b 45 08             	mov    0x8(%ebp),%eax
   113f7:	8b 40 18             	mov    0x18(%eax),%eax
   113fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   113fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11400:	8b 78 14             	mov    0x14(%eax),%edi
   11403:	89 7d e0             	mov    %edi,-0x20(%ebp)
   11406:	8b 45 08             	mov    0x8(%ebp),%eax
   11409:	8b 78 10             	mov    0x10(%eax),%edi
   1140c:	8b 45 08             	mov    0x8(%ebp),%eax
   1140f:	8b 70 24             	mov    0x24(%eax),%esi
   11412:	8b 45 08             	mov    0x8(%ebp),%eax
   11415:	8b 58 28             	mov    0x28(%eax),%ebx
   11418:	8b 45 08             	mov    0x8(%ebp),%eax
   1141b:	8b 50 20             	mov    0x20(%eax),%edx
   1141e:	8b 45 08             	mov    0x8(%ebp),%eax
   11421:	8b 40 2c             	mov    0x2c(%eax),%eax
   11424:	83 ec 0c             	sub    $0xc,%esp
   11427:	51                   	push   %ecx
   11428:	ff 75 e4             	pushl  -0x1c(%ebp)
   1142b:	ff 75 e0             	pushl  -0x20(%ebp)
   1142e:	57                   	push   %edi
   1142f:	56                   	push   %esi
   11430:	53                   	push   %ebx
   11431:	52                   	push   %edx
   11432:	50                   	push   %eax
   11433:	68 5c 2d 01 00       	push   $0x12d5c
   11438:	e8 1b 16 00 00       	call   12a58 <log_printf>
   1143d:	83 c4 30             	add    $0x30,%esp
		"EBP: 0x%x\n\r"
		"ESP: 0x%x\n\r",
		frame->eax, frame->ebx, frame->ecx, frame->edx,
		frame->edi, frame->esi, frame->ebp, frame->esp);

	log_printf("EIP: 0x%x\n\rEFLAGS:0x%x\n\r", frame->eip, frame->eflags);
   11440:	8b 45 08             	mov    0x8(%ebp),%eax
   11443:	8b 50 40             	mov    0x40(%eax),%edx
   11446:	8b 45 08             	mov    0x8(%ebp),%eax
   11449:	8b 40 38             	mov    0x38(%eax),%eax
   1144c:	83 ec 04             	sub    $0x4,%esp
   1144f:	52                   	push   %edx
   11450:	50                   	push   %eax
   11451:	68 b5 2d 01 00       	push   $0x12db5
   11456:	e8 fd 15 00 00       	call   12a58 <log_printf>
   1145b:	83 c4 10             	add    $0x10,%esp


}
   1145e:	90                   	nop
   1145f:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11462:	5b                   	pop    %ebx
   11463:	5e                   	pop    %esi
   11464:	5f                   	pop    %edi
   11465:	5d                   	pop    %ebp
   11466:	c3                   	ret    

00011467 <do_default_handler>:

static void do_default_handler (exception_frame_t * frame, char * message) {
   11467:	f3 0f 1e fb          	endbr32 
   1146b:	55                   	push   %ebp
   1146c:	89 e5                	mov    %esp,%ebp
   1146e:	83 ec 08             	sub    $0x8,%esp
	log_printf("---------------------------------");
   11471:	83 ec 0c             	sub    $0xc,%esp
   11474:	68 d0 2d 01 00       	push   $0x12dd0
   11479:	e8 da 15 00 00       	call   12a58 <log_printf>
   1147e:	83 c4 10             	add    $0x10,%esp
	log_printf("IRQ/Exception happend: %s", message);
   11481:	83 ec 08             	sub    $0x8,%esp
   11484:	ff 75 0c             	pushl  0xc(%ebp)
   11487:	68 f2 2d 01 00       	push   $0x12df2
   1148c:	e8 c7 15 00 00       	call   12a58 <log_printf>
   11491:	83 c4 10             	add    $0x10,%esp
	dump_core_regs(frame);
   11494:	83 ec 0c             	sub    $0xc,%esp
   11497:	ff 75 08             	pushl  0x8(%ebp)
   1149a:	e8 f2 fe ff ff       	call   11391 <dump_core_regs>
   1149f:	83 c4 10             	add    $0x10,%esp

}
   114a2:	90                   	nop
   114a3:	c9                   	leave  
   114a4:	c3                   	ret    

000114a5 <do_handler_unknown>:
void do_handler_unknown (exception_frame_t * frame) {
   114a5:	f3 0f 1e fb          	endbr32 
   114a9:	55                   	push   %ebp
   114aa:	89 e5                	mov    %esp,%ebp
   114ac:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");        // 默认值放到最后面
   114af:	83 ec 08             	sub    $0x8,%esp
   114b2:	68 0c 2e 01 00       	push   $0x12e0c
   114b7:	ff 75 08             	pushl  0x8(%ebp)
   114ba:	e8 a8 ff ff ff       	call   11467 <do_default_handler>
   114bf:	83 c4 10             	add    $0x10,%esp
}
   114c2:	90                   	nop
   114c3:	c9                   	leave  
   114c4:	c3                   	ret    

000114c5 <do_handler_divider>:

void do_handler_divider (exception_frame_t * frame) {
   114c5:	f3 0f 1e fb          	endbr32 
   114c9:	55                   	push   %ebp
   114ca:	89 e5                	mov    %esp,%ebp
   114cc:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Divider exception");
   114cf:	83 ec 08             	sub    $0x8,%esp
   114d2:	68 1e 2e 01 00       	push   $0x12e1e
   114d7:	ff 75 08             	pushl  0x8(%ebp)
   114da:	e8 88 ff ff ff       	call   11467 <do_default_handler>
   114df:	83 c4 10             	add    $0x10,%esp
}
   114e2:	90                   	nop
   114e3:	c9                   	leave  
   114e4:	c3                   	ret    

000114e5 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t * frame) {
   114e5:	f3 0f 1e fb          	endbr32 
   114e9:	55                   	push   %ebp
   114ea:	89 e5                	mov    %esp,%ebp
   114ec:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   114ef:	83 ec 08             	sub    $0x8,%esp
   114f2:	68 30 2e 01 00       	push   $0x12e30
   114f7:	ff 75 08             	pushl  0x8(%ebp)
   114fa:	e8 68 ff ff ff       	call   11467 <do_default_handler>
   114ff:	83 c4 10             	add    $0x10,%esp
}
   11502:	90                   	nop
   11503:	c9                   	leave  
   11504:	c3                   	ret    

00011505 <do_handler_NMI>:

void do_handler_NMI(exception_frame_t * frame) {
   11505:	f3 0f 1e fb          	endbr32 
   11509:	55                   	push   %ebp
   1150a:	89 e5                	mov    %esp,%ebp
   1150c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   1150f:	83 ec 08             	sub    $0x8,%esp
   11512:	68 40 2e 01 00       	push   $0x12e40
   11517:	ff 75 08             	pushl  0x8(%ebp)
   1151a:	e8 48 ff ff ff       	call   11467 <do_default_handler>
   1151f:	83 c4 10             	add    $0x10,%esp
}
   11522:	90                   	nop
   11523:	c9                   	leave  
   11524:	c3                   	ret    

00011525 <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t * frame) {
   11525:	f3 0f 1e fb          	endbr32 
   11529:	55                   	push   %ebp
   1152a:	89 e5                	mov    %esp,%ebp
   1152c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   1152f:	83 ec 08             	sub    $0x8,%esp
   11532:	68 4f 2e 01 00       	push   $0x12e4f
   11537:	ff 75 08             	pushl  0x8(%ebp)
   1153a:	e8 28 ff ff ff       	call   11467 <do_default_handler>
   1153f:	83 c4 10             	add    $0x10,%esp
}
   11542:	90                   	nop
   11543:	c9                   	leave  
   11544:	c3                   	ret    

00011545 <do_handler_overflow>:

void do_handler_overflow(exception_frame_t * frame) {
   11545:	f3 0f 1e fb          	endbr32 
   11549:	55                   	push   %ebp
   1154a:	89 e5                	mov    %esp,%ebp
   1154c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   1154f:	83 ec 08             	sub    $0x8,%esp
   11552:	68 5b 2e 01 00       	push   $0x12e5b
   11557:	ff 75 08             	pushl  0x8(%ebp)
   1155a:	e8 08 ff ff ff       	call   11467 <do_default_handler>
   1155f:	83 c4 10             	add    $0x10,%esp
}
   11562:	90                   	nop
   11563:	c9                   	leave  
   11564:	c3                   	ret    

00011565 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t * frame) {
   11565:	f3 0f 1e fb          	endbr32 
   11569:	55                   	push   %ebp
   1156a:	89 e5                	mov    %esp,%ebp
   1156c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   1156f:	83 ec 08             	sub    $0x8,%esp
   11572:	68 65 2e 01 00       	push   $0x12e65
   11577:	ff 75 08             	pushl  0x8(%ebp)
   1157a:	e8 e8 fe ff ff       	call   11467 <do_default_handler>
   1157f:	83 c4 10             	add    $0x10,%esp
}
   11582:	90                   	nop
   11583:	c9                   	leave  
   11584:	c3                   	ret    

00011585 <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t * frame) {
   11585:	f3 0f 1e fb          	endbr32 
   11589:	55                   	push   %ebp
   1158a:	89 e5                	mov    %esp,%ebp
   1158c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   1158f:	83 ec 08             	sub    $0x8,%esp
   11592:	68 7b 2e 01 00       	push   $0x12e7b
   11597:	ff 75 08             	pushl  0x8(%ebp)
   1159a:	e8 c8 fe ff ff       	call   11467 <do_default_handler>
   1159f:	83 c4 10             	add    $0x10,%esp
}
   115a2:	90                   	nop
   115a3:	c9                   	leave  
   115a4:	c3                   	ret    

000115a5 <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t * frame) {
   115a5:	f3 0f 1e fb          	endbr32 
   115a9:	55                   	push   %ebp
   115aa:	89 e5                	mov    %esp,%ebp
   115ac:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   115af:	83 ec 08             	sub    $0x8,%esp
   115b2:	68 8b 2e 01 00       	push   $0x12e8b
   115b7:	ff 75 08             	pushl  0x8(%ebp)
   115ba:	e8 a8 fe ff ff       	call   11467 <do_default_handler>
   115bf:	83 c4 10             	add    $0x10,%esp
}
   115c2:	90                   	nop
   115c3:	c9                   	leave  
   115c4:	c3                   	ret    

000115c5 <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t * frame) {
   115c5:	f3 0f 1e fb          	endbr32 
   115c9:	55                   	push   %ebp
   115ca:	89 e5                	mov    %esp,%ebp
   115cc:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   115cf:	83 ec 08             	sub    $0x8,%esp
   115d2:	68 a1 2e 01 00       	push   $0x12ea1
   115d7:	ff 75 08             	pushl  0x8(%ebp)
   115da:	e8 88 fe ff ff       	call   11467 <do_default_handler>
   115df:	83 c4 10             	add    $0x10,%esp
}
   115e2:	90                   	nop
   115e3:	c9                   	leave  
   115e4:	c3                   	ret    

000115e5 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t * frame) {
   115e5:	f3 0f 1e fb          	endbr32 
   115e9:	55                   	push   %ebp
   115ea:	89 e5                	mov    %esp,%ebp
   115ec:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   115ef:	83 ec 08             	sub    $0x8,%esp
   115f2:	68 af 2e 01 00       	push   $0x12eaf
   115f7:	ff 75 08             	pushl  0x8(%ebp)
   115fa:	e8 68 fe ff ff       	call   11467 <do_default_handler>
   115ff:	83 c4 10             	add    $0x10,%esp
}
   11602:	90                   	nop
   11603:	c9                   	leave  
   11604:	c3                   	ret    

00011605 <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t * frame) {
   11605:	f3 0f 1e fb          	endbr32 
   11609:	55                   	push   %ebp
   1160a:	89 e5                	mov    %esp,%ebp
   1160c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   1160f:	83 ec 08             	sub    $0x8,%esp
   11612:	68 bb 2e 01 00       	push   $0x12ebb
   11617:	ff 75 08             	pushl  0x8(%ebp)
   1161a:	e8 48 fe ff ff       	call   11467 <do_default_handler>
   1161f:	83 c4 10             	add    $0x10,%esp
}
   11622:	90                   	nop
   11623:	c9                   	leave  
   11624:	c3                   	ret    

00011625 <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t * frame) {
   11625:	f3 0f 1e fb          	endbr32 
   11629:	55                   	push   %ebp
   1162a:	89 e5                	mov    %esp,%ebp
   1162c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   1162f:	83 ec 08             	sub    $0x8,%esp
   11632:	68 d0 2e 01 00       	push   $0x12ed0
   11637:	ff 75 08             	pushl  0x8(%ebp)
   1163a:	e8 28 fe ff ff       	call   11467 <do_default_handler>
   1163f:	83 c4 10             	add    $0x10,%esp
}
   11642:	90                   	nop
   11643:	c9                   	leave  
   11644:	c3                   	ret    

00011645 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t * frame) {
   11645:	f3 0f 1e fb          	endbr32 
   11649:	55                   	push   %ebp
   1164a:	89 e5                	mov    %esp,%ebp
   1164c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "general-protection");
   1164f:	83 ec 08             	sub    $0x8,%esp
   11652:	68 e5 2e 01 00       	push   $0x12ee5
   11657:	ff 75 08             	pushl  0x8(%ebp)
   1165a:	e8 08 fe ff ff       	call   11467 <do_default_handler>
   1165f:	83 c4 10             	add    $0x10,%esp
}
   11662:	90                   	nop
   11663:	c9                   	leave  
   11664:	c3                   	ret    

00011665 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t * frame) {
   11665:	f3 0f 1e fb          	endbr32 
   11669:	55                   	push   %ebp
   1166a:	89 e5                	mov    %esp,%ebp
   1166c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "page-fault");
   1166f:	83 ec 08             	sub    $0x8,%esp
   11672:	68 f8 2e 01 00       	push   $0x12ef8
   11677:	ff 75 08             	pushl  0x8(%ebp)
   1167a:	e8 e8 fd ff ff       	call   11467 <do_default_handler>
   1167f:	83 c4 10             	add    $0x10,%esp
}
   11682:	90                   	nop
   11683:	c9                   	leave  
   11684:	c3                   	ret    

00011685 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t * frame) {
   11685:	f3 0f 1e fb          	endbr32 
   11689:	55                   	push   %ebp
   1168a:	89 e5                	mov    %esp,%ebp
   1168c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   1168f:	83 ec 08             	sub    $0x8,%esp
   11692:	68 03 2f 01 00       	push   $0x12f03
   11697:	ff 75 08             	pushl  0x8(%ebp)
   1169a:	e8 c8 fd ff ff       	call   11467 <do_default_handler>
   1169f:	83 c4 10             	add    $0x10,%esp
}
   116a2:	90                   	nop
   116a3:	c9                   	leave  
   116a4:	c3                   	ret    

000116a5 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t * frame) {
   116a5:	f3 0f 1e fb          	endbr32 
   116a9:	55                   	push   %ebp
   116aa:	89 e5                	mov    %esp,%ebp
   116ac:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   116af:	83 ec 08             	sub    $0x8,%esp
   116b2:	68 21 2f 01 00       	push   $0x12f21
   116b7:	ff 75 08             	pushl  0x8(%ebp)
   116ba:	e8 a8 fd ff ff       	call   11467 <do_default_handler>
   116bf:	83 c4 10             	add    $0x10,%esp
}
   116c2:	90                   	nop
   116c3:	c9                   	leave  
   116c4:	c3                   	ret    

000116c5 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t * frame) {
   116c5:	f3 0f 1e fb          	endbr32 
   116c9:	55                   	push   %ebp
   116ca:	89 e5                	mov    %esp,%ebp
   116cc:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   116cf:	83 ec 08             	sub    $0x8,%esp
   116d2:	68 32 2f 01 00       	push   $0x12f32
   116d7:	ff 75 08             	pushl  0x8(%ebp)
   116da:	e8 88 fd ff ff       	call   11467 <do_default_handler>
   116df:	83 c4 10             	add    $0x10,%esp
}
   116e2:	90                   	nop
   116e3:	c9                   	leave  
   116e4:	c3                   	ret    

000116e5 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t * frame) {
   116e5:	f3 0f 1e fb          	endbr32 
   116e9:	55                   	push   %ebp
   116ea:	89 e5                	mov    %esp,%ebp
   116ec:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   116ef:	83 ec 08             	sub    $0x8,%esp
   116f2:	68 44 2f 01 00       	push   $0x12f44
   116f7:	ff 75 08             	pushl  0x8(%ebp)
   116fa:	e8 68 fd ff ff       	call   11467 <do_default_handler>
   116ff:	83 c4 10             	add    $0x10,%esp
}
   11702:	90                   	nop
   11703:	c9                   	leave  
   11704:	c3                   	ret    

00011705 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t * frame) {
   11705:	f3 0f 1e fb          	endbr32 
   11709:	55                   	push   %ebp
   1170a:	89 e5                	mov    %esp,%ebp
   1170c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   1170f:	83 ec 08             	sub    $0x8,%esp
   11712:	68 63 2f 01 00       	push   $0x12f63
   11717:	ff 75 08             	pushl  0x8(%ebp)
   1171a:	e8 48 fd ff ff       	call   11467 <do_default_handler>
   1171f:	83 c4 10             	add    $0x10,%esp
}
   11722:	90                   	nop
   11723:	c9                   	leave  
   11724:	c3                   	ret    

00011725 <init_pic>:


static void init_pic (void) {
   11725:	f3 0f 1e fb          	endbr32 
   11729:	55                   	push   %ebp
   1172a:	89 e5                	mov    %esp,%ebp
	outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1172c:	6a 11                	push   $0x11
   1172e:	6a 20                	push   $0x20
   11730:	e8 ea fb ff ff       	call   1131f <outb>
   11735:	83 c4 08             	add    $0x8,%esp
	outb(PIC0_ICW2, IRQ_PIC_START);
   11738:	6a 20                	push   $0x20
   1173a:	6a 21                	push   $0x21
   1173c:	e8 de fb ff ff       	call   1131f <outb>
   11741:	83 c4 08             	add    $0x8,%esp
	outb(PIC0_ICW3, 1 << 2);
   11744:	6a 04                	push   $0x4
   11746:	6a 21                	push   $0x21
   11748:	e8 d2 fb ff ff       	call   1131f <outb>
   1174d:	83 c4 08             	add    $0x8,%esp
	outb(PIC0_ICW4, PIC_ICW4_8086);
   11750:	6a 01                	push   $0x1
   11752:	6a 21                	push   $0x21
   11754:	e8 c6 fb ff ff       	call   1131f <outb>
   11759:	83 c4 08             	add    $0x8,%esp


	outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1175c:	6a 11                	push   $0x11
   1175e:	68 a0 00 00 00       	push   $0xa0
   11763:	e8 b7 fb ff ff       	call   1131f <outb>
   11768:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_ICW2, IRQ_PIC_START + 8);
   1176b:	6a 28                	push   $0x28
   1176d:	68 a1 00 00 00       	push   $0xa1
   11772:	e8 a8 fb ff ff       	call   1131f <outb>
   11777:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_ICW3, 2);
   1177a:	6a 02                	push   $0x2
   1177c:	68 a1 00 00 00       	push   $0xa1
   11781:	e8 99 fb ff ff       	call   1131f <outb>
   11786:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_ICW4, PIC_ICW4_8086);
   11789:	6a 01                	push   $0x1
   1178b:	68 a1 00 00 00       	push   $0xa1
   11790:	e8 8a fb ff ff       	call   1131f <outb>
   11795:	83 c4 08             	add    $0x8,%esp

	outb(PIC0_IMR, 0xFF & ~(1 << 2));  // 不禁止来自第二芯片的中断信号
   11798:	68 fb 00 00 00       	push   $0xfb
   1179d:	6a 21                	push   $0x21
   1179f:	e8 7b fb ff ff       	call   1131f <outb>
   117a4:	83 c4 08             	add    $0x8,%esp
	outb(PIC1_IMR, 0xff); 
   117a7:	68 ff 00 00 00       	push   $0xff
   117ac:	68 a1 00 00 00       	push   $0xa1
   117b1:	e8 69 fb ff ff       	call   1131f <outb>
   117b6:	83 c4 08             	add    $0x8,%esp

}
   117b9:	90                   	nop
   117ba:	c9                   	leave  
   117bb:	c3                   	ret    

000117bc <irq_init>:

void irq_init (void) {
   117bc:	f3 0f 1e fb          	endbr32 
   117c0:	55                   	push   %ebp
   117c1:	89 e5                	mov    %esp,%ebp
   117c3:	83 ec 18             	sub    $0x18,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i ++ ) {
   117c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   117cd:	eb 25                	jmp    117f4 <irq_init+0x38>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   117cf:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   117d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   117d7:	c1 e0 03             	shl    $0x3,%eax
   117da:	05 c0 89 01 00       	add    $0x189c0,%eax
   117df:	68 00 8e 00 00       	push   $0x8e00
   117e4:	52                   	push   %edx
   117e5:	6a 08                	push   $0x8
   117e7:	50                   	push   %eax
   117e8:	e8 69 f9 ff ff       	call   11156 <gate_desc_set>
   117ed:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i ++ ) {
   117f0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   117f4:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   117f8:	76 d5                	jbe    117cf <irq_init+0x13>
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
    }

    // 设置异常处理接口
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   117fa:	83 ec 08             	sub    $0x8,%esp
   117fd:	68 4a 00 01 00       	push   $0x1004a
   11802:	6a 00                	push   $0x0
   11804:	e8 65 01 00 00       	call   1196e <irq_install>
   11809:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   1180c:	83 ec 08             	sub    $0x8,%esp
   1180f:	68 69 00 01 00       	push   $0x10069
   11814:	6a 01                	push   $0x1
   11816:	e8 53 01 00 00       	call   1196e <irq_install>
   1181b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   1181e:	83 ec 08             	sub    $0x8,%esp
   11821:	68 88 00 01 00       	push   $0x10088
   11826:	6a 02                	push   $0x2
   11828:	e8 41 01 00 00       	call   1196e <irq_install>
   1182d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   11830:	83 ec 08             	sub    $0x8,%esp
   11833:	68 a7 00 01 00       	push   $0x100a7
   11838:	6a 03                	push   $0x3
   1183a:	e8 2f 01 00 00       	call   1196e <irq_install>
   1183f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   11842:	83 ec 08             	sub    $0x8,%esp
   11845:	68 c6 00 01 00       	push   $0x100c6
   1184a:	6a 04                	push   $0x4
   1184c:	e8 1d 01 00 00       	call   1196e <irq_install>
   11851:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   11854:	83 ec 08             	sub    $0x8,%esp
   11857:	68 e5 00 01 00       	push   $0x100e5
   1185c:	6a 05                	push   $0x5
   1185e:	e8 0b 01 00 00       	call   1196e <irq_install>
   11863:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   11866:	83 ec 08             	sub    $0x8,%esp
   11869:	68 04 01 01 00       	push   $0x10104
   1186e:	6a 06                	push   $0x6
   11870:	e8 f9 00 00 00       	call   1196e <irq_install>
   11875:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   11878:	83 ec 08             	sub    $0x8,%esp
   1187b:	68 23 01 01 00       	push   $0x10123
   11880:	6a 07                	push   $0x7
   11882:	e8 e7 00 00 00       	call   1196e <irq_install>
   11887:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   1188a:	83 ec 08             	sub    $0x8,%esp
   1188d:	68 42 01 01 00       	push   $0x10142
   11892:	6a 08                	push   $0x8
   11894:	e8 d5 00 00 00       	call   1196e <irq_install>
   11899:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   1189c:	83 ec 08             	sub    $0x8,%esp
   1189f:	68 5f 01 01 00       	push   $0x1015f
   118a4:	6a 0a                	push   $0xa
   118a6:	e8 c3 00 00 00       	call   1196e <irq_install>
   118ab:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   118ae:	83 ec 08             	sub    $0x8,%esp
   118b1:	68 7c 01 01 00       	push   $0x1017c
   118b6:	6a 0b                	push   $0xb
   118b8:	e8 b1 00 00 00       	call   1196e <irq_install>
   118bd:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   118c0:	83 ec 08             	sub    $0x8,%esp
   118c3:	68 99 01 01 00       	push   $0x10199
   118c8:	6a 0c                	push   $0xc
   118ca:	e8 9f 00 00 00       	call   1196e <irq_install>
   118cf:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   118d2:	83 ec 08             	sub    $0x8,%esp
   118d5:	68 b6 01 01 00       	push   $0x101b6
   118da:	6a 0d                	push   $0xd
   118dc:	e8 8d 00 00 00       	call   1196e <irq_install>
   118e1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   118e4:	83 ec 08             	sub    $0x8,%esp
   118e7:	68 d3 01 01 00       	push   $0x101d3
   118ec:	6a 0e                	push   $0xe
   118ee:	e8 7b 00 00 00       	call   1196e <irq_install>
   118f3:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   118f6:	83 ec 08             	sub    $0x8,%esp
   118f9:	68 f0 01 01 00       	push   $0x101f0
   118fe:	6a 10                	push   $0x10
   11900:	e8 69 00 00 00       	call   1196e <irq_install>
   11905:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   11908:	83 ec 08             	sub    $0x8,%esp
   1190b:	68 0f 02 01 00       	push   $0x1020f
   11910:	6a 11                	push   $0x11
   11912:	e8 57 00 00 00       	call   1196e <irq_install>
   11917:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   1191a:	83 ec 08             	sub    $0x8,%esp
   1191d:	68 2c 02 01 00       	push   $0x1022c
   11922:	6a 12                	push   $0x12
   11924:	e8 45 00 00 00       	call   1196e <irq_install>
   11929:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   1192c:	83 ec 08             	sub    $0x8,%esp
   1192f:	68 4b 02 01 00       	push   $0x1024b
   11934:	6a 13                	push   $0x13
   11936:	e8 33 00 00 00       	call   1196e <irq_install>
   1193b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   1193e:	83 ec 08             	sub    $0x8,%esp
   11941:	68 6a 02 01 00       	push   $0x1026a
   11946:	6a 14                	push   $0x14
   11948:	e8 21 00 00 00       	call   1196e <irq_install>
   1194d:	83 c4 10             	add    $0x10,%esp


    lidt((uint32_t)idt_table, sizeof(idt_table));
   11950:	b8 c0 89 01 00       	mov    $0x189c0,%eax
   11955:	83 ec 08             	sub    $0x8,%esp
   11958:	68 00 04 00 00       	push   $0x400
   1195d:	50                   	push   %eax
   1195e:	e8 eb f9 ff ff       	call   1134e <lidt>
   11963:	83 c4 10             	add    $0x10,%esp

	init_pic();
   11966:	e8 ba fd ff ff       	call   11725 <init_pic>
}
   1196b:	90                   	nop
   1196c:	c9                   	leave  
   1196d:	c3                   	ret    

0001196e <irq_install>:

int irq_install (int irq_num, irq_handler_t handler) {
   1196e:	f3 0f 1e fb          	endbr32 
   11972:	55                   	push   %ebp
   11973:	89 e5                	mov    %esp,%ebp
   11975:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR) {
   11978:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1197c:	7e 07                	jle    11985 <irq_install+0x17>
        return -1;
   1197e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11983:	eb 25                	jmp    119aa <irq_install+0x3c>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, 
   11985:	8b 45 0c             	mov    0xc(%ebp),%eax
   11988:	8b 55 08             	mov    0x8(%ebp),%edx
   1198b:	c1 e2 03             	shl    $0x3,%edx
   1198e:	81 c2 c0 89 01 00    	add    $0x189c0,%edx
   11994:	68 00 8e 00 00       	push   $0x8e00
   11999:	50                   	push   %eax
   1199a:	6a 08                	push   $0x8
   1199c:	52                   	push   %edx
   1199d:	e8 b4 f7 ff ff       	call   11156 <gate_desc_set>
   119a2:	83 c4 10             	add    $0x10,%esp
     (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);

    return 0;
   119a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   119aa:	c9                   	leave  
   119ab:	c3                   	ret    

000119ac <irq_enable>:

void irq_enable (int irq_num) {
   119ac:	f3 0f 1e fb          	endbr32 
   119b0:	55                   	push   %ebp
   119b1:	89 e5                	mov    %esp,%ebp
   119b3:	53                   	push   %ebx
   119b4:	83 ec 10             	sub    $0x10,%esp
	if (irq_num < IRQ_PIC_START) {
   119b7:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   119bb:	7e 78                	jle    11a35 <irq_enable+0x89>
		return;
	}

	irq_num -= IRQ_PIC_START;
   119bd:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
	if (irq_num < 8) {
   119c1:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   119c5:	7f 32                	jg     119f9 <irq_enable+0x4d>
		uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   119c7:	6a 21                	push   $0x21
   119c9:	e8 34 f9 ff ff       	call   11302 <inb>
   119ce:	83 c4 04             	add    $0x4,%esp
   119d1:	89 c2                	mov    %eax,%edx
   119d3:	8b 45 08             	mov    0x8(%ebp),%eax
   119d6:	bb 01 00 00 00       	mov    $0x1,%ebx
   119db:	89 c1                	mov    %eax,%ecx
   119dd:	d3 e3                	shl    %cl,%ebx
   119df:	89 d8                	mov    %ebx,%eax
   119e1:	f7 d0                	not    %eax
   119e3:	21 d0                	and    %edx,%eax
   119e5:	88 45 fa             	mov    %al,-0x6(%ebp)
		outb(PIC0_IMR, mask);
   119e8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   119ec:	50                   	push   %eax
   119ed:	6a 21                	push   $0x21
   119ef:	e8 2b f9 ff ff       	call   1131f <outb>
   119f4:	83 c4 08             	add    $0x8,%esp
   119f7:	eb 3d                	jmp    11a36 <irq_enable+0x8a>
	} else {
		irq_num -= 8;
   119f9:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
		uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   119fd:	68 a1 00 00 00       	push   $0xa1
   11a02:	e8 fb f8 ff ff       	call   11302 <inb>
   11a07:	83 c4 04             	add    $0x4,%esp
   11a0a:	89 c2                	mov    %eax,%edx
   11a0c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0f:	bb 01 00 00 00       	mov    $0x1,%ebx
   11a14:	89 c1                	mov    %eax,%ecx
   11a16:	d3 e3                	shl    %cl,%ebx
   11a18:	89 d8                	mov    %ebx,%eax
   11a1a:	f7 d0                	not    %eax
   11a1c:	21 d0                	and    %edx,%eax
   11a1e:	88 45 fb             	mov    %al,-0x5(%ebp)
		outb(PIC1_IMR, mask);
   11a21:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11a25:	50                   	push   %eax
   11a26:	68 a1 00 00 00       	push   $0xa1
   11a2b:	e8 ef f8 ff ff       	call   1131f <outb>
   11a30:	83 c4 08             	add    $0x8,%esp
   11a33:	eb 01                	jmp    11a36 <irq_enable+0x8a>
		return;
   11a35:	90                   	nop
	}

}
   11a36:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11a39:	c9                   	leave  
   11a3a:	c3                   	ret    

00011a3b <irq_disable>:


void irq_disable (int irq_num) {
   11a3b:	f3 0f 1e fb          	endbr32 
   11a3f:	55                   	push   %ebp
   11a40:	89 e5                	mov    %esp,%ebp
   11a42:	53                   	push   %ebx
   11a43:	83 ec 10             	sub    $0x10,%esp
	if (irq_num < IRQ_PIC_START) {
   11a46:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11a4a:	7e 74                	jle    11ac0 <irq_disable+0x85>
		return;
	}

	irq_num -= IRQ_PIC_START;
   11a4c:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
	if (irq_num < 8) {
   11a50:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11a54:	7f 30                	jg     11a86 <irq_disable+0x4b>
		uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11a56:	6a 21                	push   $0x21
   11a58:	e8 a5 f8 ff ff       	call   11302 <inb>
   11a5d:	83 c4 04             	add    $0x4,%esp
   11a60:	89 c3                	mov    %eax,%ebx
   11a62:	8b 45 08             	mov    0x8(%ebp),%eax
   11a65:	ba 01 00 00 00       	mov    $0x1,%edx
   11a6a:	89 c1                	mov    %eax,%ecx
   11a6c:	d3 e2                	shl    %cl,%edx
   11a6e:	89 d0                	mov    %edx,%eax
   11a70:	09 d8                	or     %ebx,%eax
   11a72:	88 45 fa             	mov    %al,-0x6(%ebp)
		outb(PIC0_IMR, mask);
   11a75:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11a79:	50                   	push   %eax
   11a7a:	6a 21                	push   $0x21
   11a7c:	e8 9e f8 ff ff       	call   1131f <outb>
   11a81:	83 c4 08             	add    $0x8,%esp
   11a84:	eb 3b                	jmp    11ac1 <irq_disable+0x86>
	} else {
		irq_num -= 8;
   11a86:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
		uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   11a8a:	68 a1 00 00 00       	push   $0xa1
   11a8f:	e8 6e f8 ff ff       	call   11302 <inb>
   11a94:	83 c4 04             	add    $0x4,%esp
   11a97:	89 c3                	mov    %eax,%ebx
   11a99:	8b 45 08             	mov    0x8(%ebp),%eax
   11a9c:	ba 01 00 00 00       	mov    $0x1,%edx
   11aa1:	89 c1                	mov    %eax,%ecx
   11aa3:	d3 e2                	shl    %cl,%edx
   11aa5:	89 d0                	mov    %edx,%eax
   11aa7:	09 d8                	or     %ebx,%eax
   11aa9:	88 45 fb             	mov    %al,-0x5(%ebp)
		outb(PIC1_IMR, mask);
   11aac:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11ab0:	50                   	push   %eax
   11ab1:	68 a1 00 00 00       	push   $0xa1
   11ab6:	e8 64 f8 ff ff       	call   1131f <outb>
   11abb:	83 c4 08             	add    $0x8,%esp
   11abe:	eb 01                	jmp    11ac1 <irq_disable+0x86>
		return;
   11ac0:	90                   	nop
	}

}
   11ac1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11ac4:	c9                   	leave  
   11ac5:	c3                   	ret    

00011ac6 <irq_disable_global>:

// 全局中断关闭
void irq_disable_global (void) {
   11ac6:	f3 0f 1e fb          	endbr32 
   11aca:	55                   	push   %ebp
   11acb:	89 e5                	mov    %esp,%ebp
	cli();
   11acd:	e8 6e f8 ff ff       	call   11340 <cli>
}
   11ad2:	90                   	nop
   11ad3:	5d                   	pop    %ebp
   11ad4:	c3                   	ret    

00011ad5 <irq_enable_global>:

// 全局中断开启
void irq_enable_global (void) {
   11ad5:	f3 0f 1e fb          	endbr32 
   11ad9:	55                   	push   %ebp
   11ada:	89 e5                	mov    %esp,%ebp
	sti();
   11adc:	e8 66 f8 ff ff       	call   11347 <sti>
}
   11ae1:	90                   	nop
   11ae2:	5d                   	pop    %ebp
   11ae3:	c3                   	ret    

00011ae4 <pic_send_eoi>:

void pic_send_eoi (int irq_num) {
   11ae4:	f3 0f 1e fb          	endbr32 
   11ae8:	55                   	push   %ebp
   11ae9:	89 e5                	mov    %esp,%ebp
	irq_num -= IRQ_PIC_START;
   11aeb:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
	if (irq_num >= 8) {
   11aef:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11af3:	7e 0f                	jle    11b04 <pic_send_eoi+0x20>
		outb(PIC1_OCW2, PIC_OCW2_EOI);
   11af5:	6a 20                	push   $0x20
   11af7:	68 a0 00 00 00       	push   $0xa0
   11afc:	e8 1e f8 ff ff       	call   1131f <outb>
   11b01:	83 c4 08             	add    $0x8,%esp
	}

	outb(PIC0_OCW2, PIC_OCW2_EOI);
   11b04:	6a 20                	push   $0x20
   11b06:	6a 20                	push   $0x20
   11b08:	e8 12 f8 ff ff       	call   1131f <outb>
   11b0d:	83 c4 08             	add    $0x8,%esp
}
   11b10:	90                   	nop
   11b11:	c9                   	leave  
   11b12:	c3                   	ret    

00011b13 <irq_enter_protection>:


// 进入临界区保护
irq_state_t irq_enter_protection (void) {
   11b13:	f3 0f 1e fb          	endbr32 
   11b17:	55                   	push   %ebp
   11b18:	89 e5                	mov    %esp,%ebp
   11b1a:	83 ec 10             	sub    $0x10,%esp
	irq_state_t state = read_eflags();
   11b1d:	e8 54 f8 ff ff       	call   11376 <read_eflags>
   11b22:	89 45 fc             	mov    %eax,-0x4(%ebp)
	irq_disable_global();
   11b25:	e8 9c ff ff ff       	call   11ac6 <irq_disable_global>
	return state;
   11b2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11b2d:	c9                   	leave  
   11b2e:	c3                   	ret    

00011b2f <irq_leave_protection>:

// 退出临界区保护
void irq_leave_protection (irq_state_t state) {
   11b2f:	f3 0f 1e fb          	endbr32 
   11b33:	55                   	push   %ebp
   11b34:	89 e5                	mov    %esp,%ebp
	write_eflags(state);
   11b36:	ff 75 08             	pushl  0x8(%ebp)
   11b39:	e8 48 f8 ff ff       	call   11386 <write_eflags>
   11b3e:	83 c4 04             	add    $0x4,%esp
   11b41:	90                   	nop
   11b42:	c9                   	leave  
   11b43:	c3                   	ret    

00011b44 <outb>:
static inline void outb (uint16_t port, uint8_t data) {
   11b44:	55                   	push   %ebp
   11b45:	89 e5                	mov    %esp,%ebp
   11b47:	83 ec 08             	sub    $0x8,%esp
   11b4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11b4d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b50:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11b54:	89 d0                	mov    %edx,%eax
   11b56:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11b59:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11b5d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11b61:	ee                   	out    %al,(%dx)
}
   11b62:	90                   	nop
   11b63:	c9                   	leave  
   11b64:	c3                   	ret    

00011b65 <do_handler_time>:
#include "os_cfg.h"

static uint32_t sys_tick;


void do_handler_time (exception_frame_t * frame) {
   11b65:	f3 0f 1e fb          	endbr32 
   11b69:	55                   	push   %ebp
   11b6a:	89 e5                	mov    %esp,%ebp
   11b6c:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11b6f:	a1 c0 8d 01 00       	mov    0x18dc0,%eax
   11b74:	83 c0 01             	add    $0x1,%eax
   11b77:	a3 c0 8d 01 00       	mov    %eax,0x18dc0

    pic_send_eoi(IRQ0_TIMER);    // 告诉系统可以进行下一个进程了
   11b7c:	83 ec 0c             	sub    $0xc,%esp
   11b7f:	6a 20                	push   $0x20
   11b81:	e8 5e ff ff ff       	call   11ae4 <pic_send_eoi>
   11b86:	83 c4 10             	add    $0x10,%esp
    task_time_tick();       // 做有关任务定时方面的处理
   11b89:	e8 4c f3 ff ff       	call   10eda <task_time_tick>

}
   11b8e:	90                   	nop
   11b8f:	c9                   	leave  
   11b90:	c3                   	ret    

00011b91 <init_pit>:
static void init_pit (void) {
   11b91:	f3 0f 1e fb          	endbr32 
   11b95:	55                   	push   %ebp
   11b96:	89 e5                	mov    %esp,%ebp
   11b98:	83 ec 18             	sub    $0x18,%esp

    uint32_t reload_count =  PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11b9b:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11ba2:	6a 36                	push   $0x36
   11ba4:	6a 43                	push   $0x43
   11ba6:	e8 99 ff ff ff       	call   11b44 <outb>
   11bab:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   11bae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bb1:	0f b6 c0             	movzbl %al,%eax
   11bb4:	50                   	push   %eax
   11bb5:	6a 40                	push   $0x40
   11bb7:	e8 88 ff ff ff       	call   11b44 <outb>
   11bbc:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   11bbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bc2:	c1 e8 08             	shr    $0x8,%eax
   11bc5:	0f b6 c0             	movzbl %al,%eax
   11bc8:	50                   	push   %eax
   11bc9:	6a 40                	push   $0x40
   11bcb:	e8 74 ff ff ff       	call   11b44 <outb>
   11bd0:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time);
   11bd3:	83 ec 08             	sub    $0x8,%esp
   11bd6:	68 89 02 01 00       	push   $0x10289
   11bdb:	6a 20                	push   $0x20
   11bdd:	e8 8c fd ff ff       	call   1196e <irq_install>
   11be2:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11be5:	83 ec 0c             	sub    $0xc,%esp
   11be8:	6a 20                	push   $0x20
   11bea:	e8 bd fd ff ff       	call   119ac <irq_enable>
   11bef:	83 c4 10             	add    $0x10,%esp
}
   11bf2:	90                   	nop
   11bf3:	c9                   	leave  
   11bf4:	c3                   	ret    

00011bf5 <time_init>:

void time_init (void) {
   11bf5:	f3 0f 1e fb          	endbr32 
   11bf9:	55                   	push   %ebp
   11bfa:	89 e5                	mov    %esp,%ebp
   11bfc:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11bff:	c7 05 c0 8d 01 00 00 	movl   $0x0,0x18dc0
   11c06:	00 00 00 
    init_pit();
   11c09:	e8 83 ff ff ff       	call   11b91 <init_pit>
}
   11c0e:	90                   	nop
   11c0f:	c9                   	leave  
   11c10:	c3                   	ret    

00011c11 <kernel_init>:


static boot_info_t * init_boot_info;


void kernel_init (boot_info_t * boot_info) {
   11c11:	f3 0f 1e fb          	endbr32 
   11c15:	55                   	push   %ebp
   11c16:	89 e5                	mov    %esp,%ebp
   11c18:	83 ec 08             	sub    $0x8,%esp

    cpu_init();
   11c1b:	e8 a8 f6 ff ff       	call   112c8 <cpu_init>
    log_init();
   11c20:	e8 92 0d 00 00       	call   129b7 <log_init>

    
    memory_init(boot_info);
   11c25:	83 ec 0c             	sub    $0xc,%esp
   11c28:	ff 75 08             	pushl  0x8(%ebp)
   11c2b:	e8 61 eb ff ff       	call   10791 <memory_init>
   11c30:	83 c4 10             	add    $0x10,%esp


    irq_init();
   11c33:	e8 84 fb ff ff       	call   117bc <irq_init>
    time_init();
   11c38:	e8 b8 ff ff ff       	call   11bf5 <time_init>
    task_manager_init();
   11c3d:	e8 b1 f0 ff ff       	call   10cf3 <task_manager_init>

}
   11c42:	90                   	nop
   11c43:	c9                   	leave  
   11c44:	c3                   	ret    

00011c45 <move_to_first_task>:

void move_to_first_task (void) {
   11c45:	f3 0f 1e fb          	endbr32 
   11c49:	55                   	push   %ebp
   11c4a:	89 e5                	mov    %esp,%ebp
   11c4c:	83 ec 18             	sub    $0x18,%esp
    task_t * curr = task_current();
   11c4f:	e8 b4 f1 ff ff       	call   10e08 <task_current>
   11c54:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   11c57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11c5b:	75 19                	jne    11c76 <move_to_first_task+0x31>
   11c5d:	68 80 2f 01 00       	push   $0x12f80
   11c62:	68 08 30 01 00       	push   $0x13008
   11c67:	6a 24                	push   $0x24
   11c69:	68 8c 2f 01 00       	push   $0x12f8c
   11c6e:	e8 c0 0a 00 00       	call   12733 <pannic>
   11c73:	83 c4 10             	add    $0x10,%esp

    tss_t * tss = &(curr->tss);
   11c76:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c79:	83 c0 48             	add    $0x48,%eax
   11c7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    __asm__ __volatile__(
        "jmp *%[ip]"::[ip]"r"(tss->eip)
   11c7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c82:	8b 40 20             	mov    0x20(%eax),%eax
    __asm__ __volatile__(
   11c85:	ff e0                	jmp    *%eax
    );
}
   11c87:	90                   	nop
   11c88:	c9                   	leave  
   11c89:	c3                   	ret    

00011c8a <init_main>:

void init_main (void) {
   11c8a:	f3 0f 1e fb          	endbr32 
   11c8e:	55                   	push   %ebp
   11c8f:	89 e5                	mov    %esp,%ebp
   11c91:	83 ec 08             	sub    $0x8,%esp
    // list_test();

    log_printf("Kernel is running....");
   11c94:	83 ec 0c             	sub    $0xc,%esp
   11c97:	68 d3 2f 01 00       	push   $0x12fd3
   11c9c:	e8 b7 0d 00 00       	call   12a58 <log_printf>
   11ca1:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s", OS_VERSION);
   11ca4:	83 ec 08             	sub    $0x8,%esp
   11ca7:	68 e9 2f 01 00       	push   $0x12fe9
   11cac:	68 ef 2f 01 00       	push   $0x12fef
   11cb1:	e8 a2 0d 00 00       	call   12a58 <log_printf>
   11cb6:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 1234, -12345, 0x123456, 'a');
   11cb9:	83 ec 0c             	sub    $0xc,%esp
   11cbc:	6a 61                	push   $0x61
   11cbe:	68 56 34 12 00       	push   $0x123456
   11cc3:	68 c7 cf ff ff       	push   $0xffffcfc7
   11cc8:	68 d2 04 00 00       	push   $0x4d2
   11ccd:	68 fb 2f 01 00       	push   $0x12ffb
   11cd2:	e8 81 0d 00 00       	call   12a58 <log_printf>
   11cd7:	83 c4 20             	add    $0x20,%esp

    task_first_init();
   11cda:	e8 3e ef ff ff       	call   10c1d <task_first_init>
    move_to_first_task();
   11cdf:	e8 61 ff ff ff       	call   11c45 <move_to_first_task>

   11ce4:	90                   	nop
   11ce5:	c9                   	leave  
   11ce6:	c3                   	ret    

00011ce7 <list_count>:
static inline int list_count (list_t * list) {
   11ce7:	55                   	push   %ebp
   11ce8:	89 e5                	mov    %esp,%ebp
    return list->count;
   11cea:	8b 45 08             	mov    0x8(%ebp),%eax
   11ced:	8b 40 08             	mov    0x8(%eax),%eax
}
   11cf0:	5d                   	pop    %ebp
   11cf1:	c3                   	ret    

00011cf2 <mutex_init>:
#include "cpu/irq.h"
#include "ipc/mutex.h"



void mutex_init (mutex_t * mutex) {
   11cf2:	f3 0f 1e fb          	endbr32 
   11cf6:	55                   	push   %ebp
   11cf7:	89 e5                	mov    %esp,%ebp
   11cf9:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   11cfc:	8b 45 08             	mov    0x8(%ebp),%eax
   11cff:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   11d06:	8b 45 08             	mov    0x8(%ebp),%eax
   11d09:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   11d0f:	8b 45 08             	mov    0x8(%ebp),%eax
   11d12:	83 c0 08             	add    $0x8,%eax
   11d15:	83 ec 0c             	sub    $0xc,%esp
   11d18:	50                   	push   %eax
   11d19:	e8 62 0a 00 00       	call   12780 <list_init>
   11d1e:	83 c4 10             	add    $0x10,%esp
}
   11d21:	90                   	nop
   11d22:	c9                   	leave  
   11d23:	c3                   	ret    

00011d24 <mutex_lock>:

// 对互斥锁进行上锁
void mutex_lock (mutex_t * mutex) {
   11d24:	f3 0f 1e fb          	endbr32 
   11d28:	55                   	push   %ebp
   11d29:	89 e5                	mov    %esp,%ebp
   11d2b:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11d2e:	e8 e0 fd ff ff       	call   11b13 <irq_enter_protection>
   11d33:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   11d36:	e8 cd f0 ff ff       	call   10e08 <task_current>
   11d3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11d3e:	8b 45 08             	mov    0x8(%ebp),%eax
   11d41:	8b 40 04             	mov    0x4(%eax),%eax
   11d44:	85 c0                	test   %eax,%eax
   11d46:	75 19                	jne    11d61 <mutex_lock+0x3d>
        mutex->locked_count++;
   11d48:	8b 45 08             	mov    0x8(%ebp),%eax
   11d4b:	8b 40 04             	mov    0x4(%eax),%eax
   11d4e:	8d 50 01             	lea    0x1(%eax),%edx
   11d51:	8b 45 08             	mov    0x8(%ebp),%eax
   11d54:	89 50 04             	mov    %edx,0x4(%eax)
        mutex->owner = curr;
   11d57:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11d5d:	89 10                	mov    %edx,(%eax)
   11d5f:	eb 47                	jmp    11da8 <mutex_lock+0x84>
    } else if (mutex->owner == curr) {
   11d61:	8b 45 08             	mov    0x8(%ebp),%eax
   11d64:	8b 00                	mov    (%eax),%eax
   11d66:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11d69:	75 11                	jne    11d7c <mutex_lock+0x58>
        mutex->locked_count++;
   11d6b:	8b 45 08             	mov    0x8(%ebp),%eax
   11d6e:	8b 40 04             	mov    0x4(%eax),%eax
   11d71:	8d 50 01             	lea    0x1(%eax),%edx
   11d74:	8b 45 08             	mov    0x8(%ebp),%eax
   11d77:	89 50 04             	mov    %edx,0x4(%eax)
   11d7a:	eb 2c                	jmp    11da8 <mutex_lock+0x84>
    } else {
        task_set_block(curr);
   11d7c:	83 ec 0c             	sub    $0xc,%esp
   11d7f:	ff 75 f0             	pushl  -0x10(%ebp)
   11d82:	e8 0b f0 ff ff       	call   10d92 <task_set_block>
   11d87:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   11d8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d8d:	8d 50 38             	lea    0x38(%eax),%edx
   11d90:	8b 45 08             	mov    0x8(%ebp),%eax
   11d93:	83 c0 08             	add    $0x8,%eax
   11d96:	83 ec 08             	sub    $0x8,%esp
   11d99:	52                   	push   %edx
   11d9a:	50                   	push   %eax
   11d9b:	e8 6c 0a 00 00       	call   1280c <list_insert_last>
   11da0:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11da3:	e8 d3 f0 ff ff       	call   10e7b <task_dispatch>
    }

    irq_leave_protection(state);
   11da8:	83 ec 0c             	sub    $0xc,%esp
   11dab:	ff 75 f4             	pushl  -0xc(%ebp)
   11dae:	e8 7c fd ff ff       	call   11b2f <irq_leave_protection>
   11db3:	83 c4 10             	add    $0x10,%esp
}
   11db6:	90                   	nop
   11db7:	c9                   	leave  
   11db8:	c3                   	ret    

00011db9 <mutex_unlock>:

// 对互斥锁解锁
void mutex_unlock (mutex_t * mutex) {
   11db9:	f3 0f 1e fb          	endbr32 
   11dbd:	55                   	push   %ebp
   11dbe:	89 e5                	mov    %esp,%ebp
   11dc0:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11dc3:	e8 4b fd ff ff       	call   11b13 <irq_enter_protection>
   11dc8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   11dcb:	e8 38 f0 ff ff       	call   10e08 <task_current>
   11dd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   11dd3:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd6:	8b 00                	mov    (%eax),%eax
   11dd8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11ddb:	0f 85 88 00 00 00    	jne    11e69 <mutex_unlock+0xb0>
        if (--mutex->locked_count == 0) {
   11de1:	8b 45 08             	mov    0x8(%ebp),%eax
   11de4:	8b 40 04             	mov    0x4(%eax),%eax
   11de7:	8d 50 ff             	lea    -0x1(%eax),%edx
   11dea:	8b 45 08             	mov    0x8(%ebp),%eax
   11ded:	89 50 04             	mov    %edx,0x4(%eax)
   11df0:	8b 45 08             	mov    0x8(%ebp),%eax
   11df3:	8b 40 04             	mov    0x4(%eax),%eax
   11df6:	85 c0                	test   %eax,%eax
   11df8:	75 6f                	jne    11e69 <mutex_unlock+0xb0>
            mutex->owner = (task_t *)0;
   11dfa:	8b 45 08             	mov    0x8(%ebp),%eax
   11dfd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   11e03:	8b 45 08             	mov    0x8(%ebp),%eax
   11e06:	83 c0 08             	add    $0x8,%eax
   11e09:	83 ec 0c             	sub    $0xc,%esp
   11e0c:	50                   	push   %eax
   11e0d:	e8 d5 fe ff ff       	call   11ce7 <list_count>
   11e12:	83 c4 10             	add    $0x10,%esp
   11e15:	85 c0                	test   %eax,%eax
   11e17:	74 50                	je     11e69 <mutex_unlock+0xb0>
                list_node_t * node = list_remove_first(&mutex->wait_list);
   11e19:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1c:	83 c0 08             	add    $0x8,%eax
   11e1f:	83 ec 0c             	sub    $0xc,%esp
   11e22:	50                   	push   %eax
   11e23:	e8 4b 0a 00 00       	call   12873 <list_remove_first>
   11e28:	83 c4 10             	add    $0x10,%esp
   11e2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(node, task_t, wait_node);
   11e2e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11e32:	74 08                	je     11e3c <mutex_unlock+0x83>
   11e34:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e37:	83 e8 38             	sub    $0x38,%eax
   11e3a:	eb 05                	jmp    11e41 <mutex_unlock+0x88>
   11e3c:	b8 00 00 00 00       	mov    $0x0,%eax
   11e41:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   11e44:	83 ec 0c             	sub    $0xc,%esp
   11e47:	ff 75 e8             	pushl  -0x18(%ebp)
   11e4a:	e8 0b ef ff ff       	call   10d5a <task_set_ready>
   11e4f:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   11e52:	8b 45 08             	mov    0x8(%ebp),%eax
   11e55:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   11e5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e5f:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11e62:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   11e64:	e8 12 f0 ff ff       	call   10e7b <task_dispatch>
            }
        }
    }


    irq_leave_protection(state);
   11e69:	83 ec 0c             	sub    $0xc,%esp
   11e6c:	ff 75 f4             	pushl  -0xc(%ebp)
   11e6f:	e8 bb fc ff ff       	call   11b2f <irq_leave_protection>
   11e74:	83 c4 10             	add    $0x10,%esp

   11e77:	90                   	nop
   11e78:	c9                   	leave  
   11e79:	c3                   	ret    

00011e7a <list_count>:
static inline int list_count (list_t * list) {
   11e7a:	55                   	push   %ebp
   11e7b:	89 e5                	mov    %esp,%ebp
    return list->count;
   11e7d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e80:	8b 40 08             	mov    0x8(%eax),%eax
}
   11e83:	5d                   	pop    %ebp
   11e84:	c3                   	ret    

00011e85 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init (sem_t * sem, int init_count) {
   11e85:	f3 0f 1e fb          	endbr32 
   11e89:	55                   	push   %ebp
   11e8a:	89 e5                	mov    %esp,%ebp
   11e8c:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   11e8f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e92:	8b 55 0c             	mov    0xc(%ebp),%edx
   11e95:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   11e97:	8b 45 08             	mov    0x8(%ebp),%eax
   11e9a:	83 c0 04             	add    $0x4,%eax
   11e9d:	83 ec 0c             	sub    $0xc,%esp
   11ea0:	50                   	push   %eax
   11ea1:	e8 da 08 00 00       	call   12780 <list_init>
   11ea6:	83 c4 10             	add    $0x10,%esp
}
   11ea9:	90                   	nop
   11eaa:	c9                   	leave  
   11eab:	c3                   	ret    

00011eac <sem_wait>:

// 等信号
void sem_wait (sem_t * sem) {
   11eac:	f3 0f 1e fb          	endbr32 
   11eb0:	55                   	push   %ebp
   11eb1:	89 e5                	mov    %esp,%ebp
   11eb3:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11eb6:	e8 58 fc ff ff       	call   11b13 <irq_enter_protection>
   11ebb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   11ebe:	8b 45 08             	mov    0x8(%ebp),%eax
   11ec1:	8b 00                	mov    (%eax),%eax
   11ec3:	85 c0                	test   %eax,%eax
   11ec5:	7e 0f                	jle    11ed6 <sem_wait+0x2a>
        sem->count--;
   11ec7:	8b 45 08             	mov    0x8(%ebp),%eax
   11eca:	8b 00                	mov    (%eax),%eax
   11ecc:	8d 50 ff             	lea    -0x1(%eax),%edx
   11ecf:	8b 45 08             	mov    0x8(%ebp),%eax
   11ed2:	89 10                	mov    %edx,(%eax)
   11ed4:	eb 34                	jmp    11f0a <sem_wait+0x5e>
    } else {
        task_t * curr = task_current();
   11ed6:	e8 2d ef ff ff       	call   10e08 <task_current>
   11edb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   11ede:	83 ec 0c             	sub    $0xc,%esp
   11ee1:	ff 75 f0             	pushl  -0x10(%ebp)
   11ee4:	e8 a9 ee ff ff       	call   10d92 <task_set_block>
   11ee9:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   11eec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11eef:	8d 50 38             	lea    0x38(%eax),%edx
   11ef2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef5:	83 c0 04             	add    $0x4,%eax
   11ef8:	83 ec 08             	sub    $0x8,%esp
   11efb:	52                   	push   %edx
   11efc:	50                   	push   %eax
   11efd:	e8 0a 09 00 00       	call   1280c <list_insert_last>
   11f02:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11f05:	e8 71 ef ff ff       	call   10e7b <task_dispatch>
    }

    irq_leave_protection(state);
   11f0a:	83 ec 0c             	sub    $0xc,%esp
   11f0d:	ff 75 f4             	pushl  -0xc(%ebp)
   11f10:	e8 1a fc ff ff       	call   11b2f <irq_leave_protection>
   11f15:	83 c4 10             	add    $0x10,%esp
}
   11f18:	90                   	nop
   11f19:	c9                   	leave  
   11f1a:	c3                   	ret    

00011f1b <sem_notify>:

// 发信号
void sem_notify (sem_t * sem) {
   11f1b:	f3 0f 1e fb          	endbr32 
   11f1f:	55                   	push   %ebp
   11f20:	89 e5                	mov    %esp,%ebp
   11f22:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   11f25:	e8 e9 fb ff ff       	call   11b13 <irq_enter_protection>
   11f2a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list)) {
   11f2d:	8b 45 08             	mov    0x8(%ebp),%eax
   11f30:	83 c0 04             	add    $0x4,%eax
   11f33:	83 ec 0c             	sub    $0xc,%esp
   11f36:	50                   	push   %eax
   11f37:	e8 3e ff ff ff       	call   11e7a <list_count>
   11f3c:	83 c4 10             	add    $0x10,%esp
   11f3f:	85 c0                	test   %eax,%eax
   11f41:	74 40                	je     11f83 <sem_notify+0x68>
        list_node_t * node = list_remove_first(&sem->wait_list);
   11f43:	8b 45 08             	mov    0x8(%ebp),%eax
   11f46:	83 c0 04             	add    $0x4,%eax
   11f49:	83 ec 0c             	sub    $0xc,%esp
   11f4c:	50                   	push   %eax
   11f4d:	e8 21 09 00 00       	call   12873 <list_remove_first>
   11f52:	83 c4 10             	add    $0x10,%esp
   11f55:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent(node, task_t, wait_node);
   11f58:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11f5c:	74 08                	je     11f66 <sem_notify+0x4b>
   11f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f61:	83 e8 38             	sub    $0x38,%eax
   11f64:	eb 05                	jmp    11f6b <sem_notify+0x50>
   11f66:	b8 00 00 00 00       	mov    $0x0,%eax
   11f6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11f6e:	83 ec 0c             	sub    $0xc,%esp
   11f71:	ff 75 ec             	pushl  -0x14(%ebp)
   11f74:	e8 e1 ed ff ff       	call   10d5a <task_set_ready>
   11f79:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11f7c:	e8 fa ee ff ff       	call   10e7b <task_dispatch>
   11f81:	eb 0d                	jmp    11f90 <sem_notify+0x75>
    } else {
        sem->count++;
   11f83:	8b 45 08             	mov    0x8(%ebp),%eax
   11f86:	8b 00                	mov    (%eax),%eax
   11f88:	8d 50 01             	lea    0x1(%eax),%edx
   11f8b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f8e:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   11f90:	83 ec 0c             	sub    $0xc,%esp
   11f93:	ff 75 f4             	pushl  -0xc(%ebp)
   11f96:	e8 94 fb ff ff       	call   11b2f <irq_leave_protection>
   11f9b:	83 c4 10             	add    $0x10,%esp
}
   11f9e:	90                   	nop
   11f9f:	c9                   	leave  
   11fa0:	c3                   	ret    

00011fa1 <sem_count>:

int sem_count (sem_t * sem) {
   11fa1:	f3 0f 1e fb          	endbr32 
   11fa5:	55                   	push   %ebp
   11fa6:	89 e5                	mov    %esp,%ebp
   11fa8:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   11fab:	e8 63 fb ff ff       	call   11b13 <irq_enter_protection>
   11fb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11fb3:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb6:	8b 00                	mov    (%eax),%eax
   11fb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   11fbb:	83 ec 0c             	sub    $0xc,%esp
   11fbe:	ff 75 f4             	pushl  -0xc(%ebp)
   11fc1:	e8 69 fb ff ff       	call   11b2f <irq_leave_protection>
   11fc6:	83 c4 10             	add    $0x10,%esp

    return count;
   11fc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fcc:	c9                   	leave  
   11fcd:	c3                   	ret    

00011fce <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"


int bitmap_byte_count(int bit_count) {
   11fce:	f3 0f 1e fb          	endbr32 
   11fd2:	55                   	push   %ebp
   11fd3:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   11fd5:	8b 45 08             	mov    0x8(%ebp),%eax
   11fd8:	83 c0 07             	add    $0x7,%eax
   11fdb:	8d 50 07             	lea    0x7(%eax),%edx
   11fde:	85 c0                	test   %eax,%eax
   11fe0:	0f 48 c2             	cmovs  %edx,%eax
   11fe3:	c1 f8 03             	sar    $0x3,%eax
}
   11fe6:	5d                   	pop    %ebp
   11fe7:	c3                   	ret    

00011fe8 <bitmap_init>:

void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   11fe8:	f3 0f 1e fb          	endbr32 
   11fec:	55                   	push   %ebp
   11fed:	89 e5                	mov    %esp,%ebp
   11fef:	83 ec 18             	sub    $0x18,%esp

    bitmap->bit_count = count;
   11ff2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff5:	8b 55 10             	mov    0x10(%ebp),%edx
   11ff8:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   11ffa:	8b 45 08             	mov    0x8(%ebp),%eax
   11ffd:	8b 55 0c             	mov    0xc(%ebp),%edx
   12000:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);    // 计算位图需要多少字节表示
   12003:	8b 45 08             	mov    0x8(%ebp),%eax
   12006:	8b 00                	mov    (%eax),%eax
   12008:	50                   	push   %eax
   12009:	e8 c0 ff ff ff       	call   11fce <bitmap_byte_count>
   1200e:	83 c4 04             	add    $0x4,%esp
   12011:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF : 0, bytes);
   12014:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12018:	74 07                	je     12021 <bitmap_init+0x39>
   1201a:	ba ff 00 00 00       	mov    $0xff,%edx
   1201f:	eb 05                	jmp    12026 <bitmap_init+0x3e>
   12021:	ba 00 00 00 00       	mov    $0x0,%edx
   12026:	8b 45 08             	mov    0x8(%ebp),%eax
   12029:	8b 40 04             	mov    0x4(%eax),%eax
   1202c:	83 ec 04             	sub    $0x4,%esp
   1202f:	ff 75 f4             	pushl  -0xc(%ebp)
   12032:	52                   	push   %edx
   12033:	50                   	push   %eax
   12034:	e8 ce 03 00 00       	call   12407 <kernel_memset>
   12039:	83 c4 10             	add    $0x10,%esp

}
   1203c:	90                   	nop
   1203d:	c9                   	leave  
   1203e:	c3                   	ret    

0001203f <bitmap_get_bit>:

int bitmap_get_bit (bitmap_t * bitmap, int index) {
   1203f:	f3 0f 1e fb          	endbr32 
   12043:	55                   	push   %ebp
   12044:	89 e5                	mov    %esp,%ebp
   12046:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   12047:	8b 45 08             	mov    0x8(%ebp),%eax
   1204a:	8b 50 04             	mov    0x4(%eax),%edx
   1204d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12050:	8d 48 07             	lea    0x7(%eax),%ecx
   12053:	85 c0                	test   %eax,%eax
   12055:	0f 48 c1             	cmovs  %ecx,%eax
   12058:	c1 f8 03             	sar    $0x3,%eax
   1205b:	01 d0                	add    %edx,%eax
   1205d:	0f b6 00             	movzbl (%eax),%eax
   12060:	0f b6 d8             	movzbl %al,%ebx
   12063:	8b 45 0c             	mov    0xc(%ebp),%eax
   12066:	99                   	cltd   
   12067:	c1 ea 1d             	shr    $0x1d,%edx
   1206a:	01 d0                	add    %edx,%eax
   1206c:	83 e0 07             	and    $0x7,%eax
   1206f:	29 d0                	sub    %edx,%eax
   12071:	ba 01 00 00 00       	mov    $0x1,%edx
   12076:	89 c1                	mov    %eax,%ecx
   12078:	d3 e2                	shl    %cl,%edx
   1207a:	89 d0                	mov    %edx,%eax
   1207c:	21 d8                	and    %ebx,%eax
}
   1207e:	5b                   	pop    %ebx
   1207f:	5d                   	pop    %ebp
   12080:	c3                   	ret    

00012081 <bitmap_set_bit>:

void bitmap_set_bit (bitmap_t * bitmap, int index, int count,int bit) {
   12081:	f3 0f 1e fb          	endbr32 
   12085:	55                   	push   %ebp
   12086:	89 e5                	mov    %esp,%ebp
   12088:	56                   	push   %esi
   12089:	53                   	push   %ebx
   1208a:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i ++ , index++) {
   1208d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12094:	e9 a4 00 00 00       	jmp    1213d <bitmap_set_bit+0xbc>
        if (bit) {
   12099:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1209d:	74 4c                	je     120eb <bitmap_set_bit+0x6a>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   1209f:	8b 45 08             	mov    0x8(%ebp),%eax
   120a2:	8b 50 04             	mov    0x4(%eax),%edx
   120a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   120a8:	8d 48 07             	lea    0x7(%eax),%ecx
   120ab:	85 c0                	test   %eax,%eax
   120ad:	0f 48 c1             	cmovs  %ecx,%eax
   120b0:	c1 f8 03             	sar    $0x3,%eax
   120b3:	89 c3                	mov    %eax,%ebx
   120b5:	89 d8                	mov    %ebx,%eax
   120b7:	01 d0                	add    %edx,%eax
   120b9:	0f b6 00             	movzbl (%eax),%eax
   120bc:	89 c6                	mov    %eax,%esi
   120be:	8b 45 0c             	mov    0xc(%ebp),%eax
   120c1:	99                   	cltd   
   120c2:	c1 ea 1d             	shr    $0x1d,%edx
   120c5:	01 d0                	add    %edx,%eax
   120c7:	83 e0 07             	and    $0x7,%eax
   120ca:	29 d0                	sub    %edx,%eax
   120cc:	ba 01 00 00 00       	mov    $0x1,%edx
   120d1:	89 c1                	mov    %eax,%ecx
   120d3:	d3 e2                	shl    %cl,%edx
   120d5:	89 d0                	mov    %edx,%eax
   120d7:	89 f1                	mov    %esi,%ecx
   120d9:	09 c1                	or     %eax,%ecx
   120db:	8b 45 08             	mov    0x8(%ebp),%eax
   120de:	8b 40 04             	mov    0x4(%eax),%eax
   120e1:	89 da                	mov    %ebx,%edx
   120e3:	01 d0                	add    %edx,%eax
   120e5:	89 ca                	mov    %ecx,%edx
   120e7:	88 10                	mov    %dl,(%eax)
   120e9:	eb 4a                	jmp    12135 <bitmap_set_bit+0xb4>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   120eb:	8b 45 08             	mov    0x8(%ebp),%eax
   120ee:	8b 50 04             	mov    0x4(%eax),%edx
   120f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   120f4:	8d 48 07             	lea    0x7(%eax),%ecx
   120f7:	85 c0                	test   %eax,%eax
   120f9:	0f 48 c1             	cmovs  %ecx,%eax
   120fc:	c1 f8 03             	sar    $0x3,%eax
   120ff:	89 c3                	mov    %eax,%ebx
   12101:	89 d8                	mov    %ebx,%eax
   12103:	01 d0                	add    %edx,%eax
   12105:	0f b6 00             	movzbl (%eax),%eax
   12108:	89 c6                	mov    %eax,%esi
   1210a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1210d:	99                   	cltd   
   1210e:	c1 ea 1d             	shr    $0x1d,%edx
   12111:	01 d0                	add    %edx,%eax
   12113:	83 e0 07             	and    $0x7,%eax
   12116:	29 d0                	sub    %edx,%eax
   12118:	ba 01 00 00 00       	mov    $0x1,%edx
   1211d:	89 c1                	mov    %eax,%ecx
   1211f:	d3 e2                	shl    %cl,%edx
   12121:	89 d0                	mov    %edx,%eax
   12123:	f7 d0                	not    %eax
   12125:	89 f2                	mov    %esi,%edx
   12127:	21 c2                	and    %eax,%edx
   12129:	8b 45 08             	mov    0x8(%ebp),%eax
   1212c:	8b 40 04             	mov    0x4(%eax),%eax
   1212f:	89 d9                	mov    %ebx,%ecx
   12131:	01 c8                	add    %ecx,%eax
   12133:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i ++ , index++) {
   12135:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12139:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1213d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12140:	3b 45 10             	cmp    0x10(%ebp),%eax
   12143:	7d 0e                	jge    12153 <bitmap_set_bit+0xd2>
   12145:	8b 45 08             	mov    0x8(%ebp),%eax
   12148:	8b 00                	mov    (%eax),%eax
   1214a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1214d:	0f 8c 46 ff ff ff    	jl     12099 <bitmap_set_bit+0x18>
        }
    }
}
   12153:	90                   	nop
   12154:	83 c4 10             	add    $0x10,%esp
   12157:	5b                   	pop    %ebx
   12158:	5e                   	pop    %esi
   12159:	5d                   	pop    %ebp
   1215a:	c3                   	ret    

0001215b <bitmap_is_set>:

int bitmap_is_set (bitmap_t * bitmap, int index) {
   1215b:	f3 0f 1e fb          	endbr32 
   1215f:	55                   	push   %ebp
   12160:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12162:	ff 75 0c             	pushl  0xc(%ebp)
   12165:	ff 75 08             	pushl  0x8(%ebp)
   12168:	e8 d2 fe ff ff       	call   1203f <bitmap_get_bit>
   1216d:	83 c4 08             	add    $0x8,%esp
   12170:	85 c0                	test   %eax,%eax
   12172:	0f 95 c0             	setne  %al
   12175:	0f b6 c0             	movzbl %al,%eax
}
   12178:	c9                   	leave  
   12179:	c3                   	ret    

0001217a <bitmap_alloc_nbits>:

int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   1217a:	f3 0f 1e fb          	endbr32 
   1217e:	55                   	push   %ebp
   1217f:	89 e5                	mov    %esp,%ebp
   12181:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   12184:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   1218b:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   12192:	e9 85 00 00 00       	jmp    1221c <bitmap_alloc_nbits+0xa2>
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   12197:	ff 75 fc             	pushl  -0x4(%ebp)
   1219a:	ff 75 08             	pushl  0x8(%ebp)
   1219d:	e8 9d fe ff ff       	call   1203f <bitmap_get_bit>
   121a2:	83 c4 08             	add    $0x8,%esp
   121a5:	39 45 0c             	cmp    %eax,0xc(%ebp)
   121a8:	74 06                	je     121b0 <bitmap_alloc_nbits+0x36>
            search_idx++;
   121aa:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   121ae:	eb 6c                	jmp    1221c <bitmap_alloc_nbits+0xa2>
        }

        ok_index = search_idx;
   121b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121b3:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++ ) {
   121b6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   121bd:	eb 27                	jmp    121e6 <bitmap_alloc_nbits+0x6c>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   121bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121c2:	8d 50 01             	lea    0x1(%eax),%edx
   121c5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   121c8:	50                   	push   %eax
   121c9:	ff 75 08             	pushl  0x8(%ebp)
   121cc:	e8 6e fe ff ff       	call   1203f <bitmap_get_bit>
   121d1:	83 c4 08             	add    $0x8,%esp
   121d4:	39 45 0c             	cmp    %eax,0xc(%ebp)
   121d7:	74 09                	je     121e2 <bitmap_alloc_nbits+0x68>
                ok_index = -1;
   121d9:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   121e0:	eb 16                	jmp    121f8 <bitmap_alloc_nbits+0x7e>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++ ) {
   121e2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   121e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121e9:	3b 45 10             	cmp    0x10(%ebp),%eax
   121ec:	7d 0a                	jge    121f8 <bitmap_alloc_nbits+0x7e>
   121ee:	8b 45 08             	mov    0x8(%ebp),%eax
   121f1:	8b 00                	mov    (%eax),%eax
   121f3:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   121f6:	7c c7                	jl     121bf <bitmap_alloc_nbits+0x45>
            }
        }

        if (i >= count) {
   121f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121fb:	3b 45 10             	cmp    0x10(%ebp),%eax
   121fe:	7c 1c                	jl     1221c <bitmap_alloc_nbits+0xa2>
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12200:	8b 45 0c             	mov    0xc(%ebp),%eax
   12203:	f7 d0                	not    %eax
   12205:	50                   	push   %eax
   12206:	ff 75 10             	pushl  0x10(%ebp)
   12209:	ff 75 f8             	pushl  -0x8(%ebp)
   1220c:	ff 75 08             	pushl  0x8(%ebp)
   1220f:	e8 6d fe ff ff       	call   12081 <bitmap_set_bit>
   12214:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12217:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1221a:	eb 13                	jmp    1222f <bitmap_alloc_nbits+0xb5>
    while (search_idx < bitmap->bit_count) {
   1221c:	8b 45 08             	mov    0x8(%ebp),%eax
   1221f:	8b 00                	mov    (%eax),%eax
   12221:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12224:	0f 8c 6d ff ff ff    	jl     12197 <bitmap_alloc_nbits+0x1d>
        }

    }

    return -1;
   1222a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   1222f:	c9                   	leave  
   12230:	c3                   	ret    

00012231 <hlt>:
static inline void hlt (void) {
   12231:	55                   	push   %ebp
   12232:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12234:	f4                   	hlt    
}
   12235:	90                   	nop
   12236:	5d                   	pop    %ebp
   12237:	c3                   	ret    

00012238 <kernel_strcpy>:
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

// 字符串复制
void kernel_strcpy(char * dest, const char * src) {
   12238:	f3 0f 1e fb          	endbr32 
   1223c:	55                   	push   %ebp
   1223d:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   1223f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12243:	74 3b                	je     12280 <kernel_strcpy+0x48>
   12245:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12249:	74 35                	je     12280 <kernel_strcpy+0x48>
        return;
    }

    while (*dest && *src) {
   1224b:	eb 17                	jmp    12264 <kernel_strcpy+0x2c>
        *dest++ = *src++;
   1224d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12250:	8d 42 01             	lea    0x1(%edx),%eax
   12253:	89 45 0c             	mov    %eax,0xc(%ebp)
   12256:	8b 45 08             	mov    0x8(%ebp),%eax
   12259:	8d 48 01             	lea    0x1(%eax),%ecx
   1225c:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1225f:	0f b6 12             	movzbl (%edx),%edx
   12262:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12264:	8b 45 08             	mov    0x8(%ebp),%eax
   12267:	0f b6 00             	movzbl (%eax),%eax
   1226a:	84 c0                	test   %al,%al
   1226c:	74 0a                	je     12278 <kernel_strcpy+0x40>
   1226e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12271:	0f b6 00             	movzbl (%eax),%eax
   12274:	84 c0                	test   %al,%al
   12276:	75 d5                	jne    1224d <kernel_strcpy+0x15>
    }

    *dest = '\0';  // 结束字符
   12278:	8b 45 08             	mov    0x8(%ebp),%eax
   1227b:	c6 00 00             	movb   $0x0,(%eax)
   1227e:	eb 01                	jmp    12281 <kernel_strcpy+0x49>
        return;
   12280:	90                   	nop
}
   12281:	5d                   	pop    %ebp
   12282:	c3                   	ret    

00012283 <kernel_strncpy>:

// 字符串复制
void kernel_strncpy(char * dest, const char * src, int size) {
   12283:	f3 0f 1e fb          	endbr32 
   12287:	55                   	push   %ebp
   12288:	89 e5                	mov    %esp,%ebp
   1228a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1228d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12291:	74 61                	je     122f4 <kernel_strncpy+0x71>
   12293:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12297:	74 5b                	je     122f4 <kernel_strncpy+0x71>
   12299:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1229d:	74 55                	je     122f4 <kernel_strncpy+0x71>
        return;
    }

    char * d = dest;
   1229f:	8b 45 08             	mov    0x8(%ebp),%eax
   122a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   122a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   122a8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while((size-- > 0) && (*s)) {
   122ab:	eb 17                	jmp    122c4 <kernel_strncpy+0x41>
        *d++ = *s++;
   122ad:	8b 55 f8             	mov    -0x8(%ebp),%edx
   122b0:	8d 42 01             	lea    0x1(%edx),%eax
   122b3:	89 45 f8             	mov    %eax,-0x8(%ebp)
   122b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122b9:	8d 48 01             	lea    0x1(%eax),%ecx
   122bc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   122bf:	0f b6 12             	movzbl (%edx),%edx
   122c2:	88 10                	mov    %dl,(%eax)
    while((size-- > 0) && (*s)) {
   122c4:	8b 45 10             	mov    0x10(%ebp),%eax
   122c7:	8d 50 ff             	lea    -0x1(%eax),%edx
   122ca:	89 55 10             	mov    %edx,0x10(%ebp)
   122cd:	85 c0                	test   %eax,%eax
   122cf:	7e 0a                	jle    122db <kernel_strncpy+0x58>
   122d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   122d4:	0f b6 00             	movzbl (%eax),%eax
   122d7:	84 c0                	test   %al,%al
   122d9:	75 d2                	jne    122ad <kernel_strncpy+0x2a>
    }

    if (size == 0) {
   122db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   122df:	75 0b                	jne    122ec <kernel_strncpy+0x69>
        *(d - 1) = '\0';
   122e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122e4:	83 e8 01             	sub    $0x1,%eax
   122e7:	c6 00 00             	movb   $0x0,(%eax)
   122ea:	eb 09                	jmp    122f5 <kernel_strncpy+0x72>
    } else {
        *d = '\0';
   122ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122ef:	c6 00 00             	movb   $0x0,(%eax)
   122f2:	eb 01                	jmp    122f5 <kernel_strncpy+0x72>
        return;
   122f4:	90                   	nop
    }

}
   122f5:	c9                   	leave  
   122f6:	c3                   	ret    

000122f7 <kernel_strncmp>:

// 字符串比较
int kernel_strncmp(const char * s1, const char * s2, int size) {
   122f7:	f3 0f 1e fb          	endbr32 
   122fb:	55                   	push   %ebp
   122fc:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   122fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12302:	74 06                	je     1230a <kernel_strncmp+0x13>
   12304:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12308:	75 0f                	jne    12319 <kernel_strncmp+0x22>
        return -1;
   1230a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1230f:	eb 62                	jmp    12373 <kernel_strncmp+0x7c>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   12311:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   12315:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   12319:	8b 45 08             	mov    0x8(%ebp),%eax
   1231c:	0f b6 00             	movzbl (%eax),%eax
   1231f:	84 c0                	test   %al,%al
   12321:	74 20                	je     12343 <kernel_strncmp+0x4c>
   12323:	8b 45 0c             	mov    0xc(%ebp),%eax
   12326:	0f b6 00             	movzbl (%eax),%eax
   12329:	84 c0                	test   %al,%al
   1232b:	74 16                	je     12343 <kernel_strncmp+0x4c>
   1232d:	8b 45 08             	mov    0x8(%ebp),%eax
   12330:	0f b6 10             	movzbl (%eax),%edx
   12333:	8b 45 0c             	mov    0xc(%ebp),%eax
   12336:	0f b6 00             	movzbl (%eax),%eax
   12339:	38 c2                	cmp    %al,%dl
   1233b:	75 06                	jne    12343 <kernel_strncmp+0x4c>
   1233d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12341:	75 ce                	jne    12311 <kernel_strncmp+0x1a>
    }

    // s1 = "abc"
    // s2 = "abcdef"  这样认为相同，比到长度最小的看想不相同，这里是这样实现的。

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   12343:	8b 45 08             	mov    0x8(%ebp),%eax
   12346:	0f b6 00             	movzbl (%eax),%eax
   12349:	84 c0                	test   %al,%al
   1234b:	74 21                	je     1236e <kernel_strncmp+0x77>
   1234d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12350:	0f b6 00             	movzbl (%eax),%eax
   12353:	84 c0                	test   %al,%al
   12355:	74 17                	je     1236e <kernel_strncmp+0x77>
   12357:	8b 45 08             	mov    0x8(%ebp),%eax
   1235a:	0f b6 10             	movzbl (%eax),%edx
   1235d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12360:	0f b6 00             	movzbl (%eax),%eax
   12363:	38 c2                	cmp    %al,%dl
   12365:	74 07                	je     1236e <kernel_strncmp+0x77>
   12367:	b8 01 00 00 00       	mov    $0x1,%eax
   1236c:	eb 05                	jmp    12373 <kernel_strncmp+0x7c>
   1236e:	b8 00 00 00 00       	mov    $0x0,%eax

}
   12373:	5d                   	pop    %ebp
   12374:	c3                   	ret    

00012375 <kernel_strlen>:

// 求字符串长度
int kernel_strlen(const char * str) {
   12375:	f3 0f 1e fb          	endbr32 
   12379:	55                   	push   %ebp
   1237a:	89 e5                	mov    %esp,%ebp
   1237c:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   1237f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12383:	75 07                	jne    1238c <kernel_strlen+0x17>
        return 0;
   12385:	b8 00 00 00 00       	mov    $0x0,%eax
   1238a:	eb 26                	jmp    123b2 <kernel_strlen+0x3d>
    }

    const char * c = str;
   1238c:	8b 45 08             	mov    0x8(%ebp),%eax
   1238f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   12392:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while(*c++) {
   12399:	eb 04                	jmp    1239f <kernel_strlen+0x2a>
        len++;
   1239b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(*c++) {
   1239f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   123a2:	8d 50 01             	lea    0x1(%eax),%edx
   123a5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   123a8:	0f b6 00             	movzbl (%eax),%eax
   123ab:	84 c0                	test   %al,%al
   123ad:	75 ec                	jne    1239b <kernel_strlen+0x26>
    }

    return len;
   123af:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   123b2:	c9                   	leave  
   123b3:	c3                   	ret    

000123b4 <kernel_memcpy>:


void kernel_memcpy(void * dest, void * src, int size) {
   123b4:	f3 0f 1e fb          	endbr32 
   123b8:	55                   	push   %ebp
   123b9:	89 e5                	mov    %esp,%ebp
   123bb:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   123be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123c2:	74 40                	je     12404 <kernel_memcpy+0x50>
   123c4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   123c8:	74 3a                	je     12404 <kernel_memcpy+0x50>
   123ca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   123ce:	74 34                	je     12404 <kernel_memcpy+0x50>
        return;
    }

    uint8_t * s = (uint8_t *)src;
   123d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   123d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   123d6:	8b 45 08             	mov    0x8(%ebp),%eax
   123d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   123dc:	eb 17                	jmp    123f5 <kernel_memcpy+0x41>
        *d++ = *s++;
   123de:	8b 55 fc             	mov    -0x4(%ebp),%edx
   123e1:	8d 42 01             	lea    0x1(%edx),%eax
   123e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
   123e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   123ea:	8d 48 01             	lea    0x1(%eax),%ecx
   123ed:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   123f0:	0f b6 12             	movzbl (%edx),%edx
   123f3:	88 10                	mov    %dl,(%eax)
    while(size--) {
   123f5:	8b 45 10             	mov    0x10(%ebp),%eax
   123f8:	8d 50 ff             	lea    -0x1(%eax),%edx
   123fb:	89 55 10             	mov    %edx,0x10(%ebp)
   123fe:	85 c0                	test   %eax,%eax
   12400:	75 dc                	jne    123de <kernel_memcpy+0x2a>
   12402:	eb 01                	jmp    12405 <kernel_memcpy+0x51>
        return;
   12404:	90                   	nop
    }
}
   12405:	c9                   	leave  
   12406:	c3                   	ret    

00012407 <kernel_memset>:

void kernel_memset(void * dest, uint8_t v, int size) {
   12407:	f3 0f 1e fb          	endbr32 
   1240b:	55                   	push   %ebp
   1240c:	89 e5                	mov    %esp,%ebp
   1240e:	83 ec 14             	sub    $0x14,%esp
   12411:	8b 45 0c             	mov    0xc(%ebp),%eax
   12414:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   12417:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1241b:	74 2c                	je     12449 <kernel_memset+0x42>
   1241d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12421:	74 26                	je     12449 <kernel_memset+0x42>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   12423:	8b 45 08             	mov    0x8(%ebp),%eax
   12426:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size --) {
   12429:	eb 0f                	jmp    1243a <kernel_memset+0x33>
        *d++ = v;
   1242b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1242e:	8d 50 01             	lea    0x1(%eax),%edx
   12431:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12434:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12438:	88 10                	mov    %dl,(%eax)
    while(size --) {
   1243a:	8b 45 10             	mov    0x10(%ebp),%eax
   1243d:	8d 50 ff             	lea    -0x1(%eax),%edx
   12440:	89 55 10             	mov    %edx,0x10(%ebp)
   12443:	85 c0                	test   %eax,%eax
   12445:	75 e4                	jne    1242b <kernel_memset+0x24>
   12447:	eb 01                	jmp    1244a <kernel_memset+0x43>
        return;
   12449:	90                   	nop
    }

}
   1244a:	c9                   	leave  
   1244b:	c3                   	ret    

0001244c <kernel_memcmp>:
int kernel_memcmp(void * d1, void * d2, int size) {
   1244c:	f3 0f 1e fb          	endbr32 
   12450:	55                   	push   %ebp
   12451:	89 e5                	mov    %esp,%ebp
   12453:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size) {
   12456:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1245a:	74 0c                	je     12468 <kernel_memcmp+0x1c>
   1245c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12460:	74 06                	je     12468 <kernel_memcmp+0x1c>
   12462:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12466:	75 07                	jne    1246f <kernel_memcmp+0x23>
        return 1;
   12468:	b8 01 00 00 00       	mov    $0x1,%eax
   1246d:	eb 43                	jmp    124b2 <kernel_memcmp+0x66>
    }

    uint8_t * p_d1 = (uint8_t *)d1;
   1246f:	8b 45 08             	mov    0x8(%ebp),%eax
   12472:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * p_d2 = (uint8_t *)d2;
   12475:	8b 45 0c             	mov    0xc(%ebp),%eax
   12478:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   1247b:	eb 23                	jmp    124a0 <kernel_memcmp+0x54>
        if (*p_d1++ != *p_d2++) {
   1247d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12480:	8d 50 01             	lea    0x1(%eax),%edx
   12483:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12486:	0f b6 08             	movzbl (%eax),%ecx
   12489:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1248c:	8d 50 01             	lea    0x1(%eax),%edx
   1248f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12492:	0f b6 00             	movzbl (%eax),%eax
   12495:	38 c1                	cmp    %al,%cl
   12497:	74 07                	je     124a0 <kernel_memcmp+0x54>
            return 1;
   12499:	b8 01 00 00 00       	mov    $0x1,%eax
   1249e:	eb 12                	jmp    124b2 <kernel_memcmp+0x66>
    while(size--) {
   124a0:	8b 45 10             	mov    0x10(%ebp),%eax
   124a3:	8d 50 ff             	lea    -0x1(%eax),%edx
   124a6:	89 55 10             	mov    %edx,0x10(%ebp)
   124a9:	85 c0                	test   %eax,%eax
   124ab:	75 d0                	jne    1247d <kernel_memcmp+0x31>
        }
    }

    return 0;
   124ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
   124b2:	c9                   	leave  
   124b3:	c3                   	ret    

000124b4 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   124b4:	f3 0f 1e fb          	endbr32 
   124b8:	55                   	push   %ebp
   124b9:	89 e5                	mov    %esp,%ebp
   124bb:	83 ec 10             	sub    $0x10,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   124be:	8b 45 08             	mov    0x8(%ebp),%eax
   124c1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   124c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   124c7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   124ca:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   124ce:	74 1d                	je     124ed <kernel_itoa+0x39>
   124d0:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   124d4:	74 17                	je     124ed <kernel_itoa+0x39>
   124d6:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   124da:	74 11                	je     124ed <kernel_itoa+0x39>
   124dc:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   124e0:	74 0b                	je     124ed <kernel_itoa+0x39>
        *p = '\0';
   124e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124e5:	c6 00 00             	movb   $0x0,(%eax)
        return;
   124e8:	e9 a2 00 00 00       	jmp    1258f <kernel_itoa+0xdb>
    }

    if ((num < 0) && (base == 10)) {
   124ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124f1:	79 12                	jns    12505 <kernel_itoa+0x51>
   124f3:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   124f7:	75 0c                	jne    12505 <kernel_itoa+0x51>
        *p++ = '-';
   124f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124fc:	8d 50 01             	lea    0x1(%eax),%edx
   124ff:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12502:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    // 一位一位的转换
    do {
        char ch = num2ch[num % base + 15];
   12505:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   1250b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1250e:	99                   	cltd   
   1250f:	f7 7d 10             	idivl  0x10(%ebp)
   12512:	89 d0                	mov    %edx,%eax
   12514:	83 c0 0f             	add    $0xf,%eax
   12517:	01 c8                	add    %ecx,%eax
   12519:	0f b6 00             	movzbl (%eax),%eax
   1251c:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   1251f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12522:	8d 50 01             	lea    0x1(%eax),%edx
   12525:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12528:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   1252c:	88 10                	mov    %dl,(%eax)
        num /= base;
   1252e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12531:	99                   	cltd   
   12532:	f7 7d 10             	idivl  0x10(%ebp)
   12535:	89 45 0c             	mov    %eax,0xc(%ebp)
    }while(num);
   12538:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1253c:	75 c7                	jne    12505 <kernel_itoa+0x51>

    *p-- = '\0';
   1253e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12541:	8d 50 ff             	lea    -0x1(%eax),%edx
   12544:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12547:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (old_num > 0) ? buf : buf + 1;
   1254a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1254e:	7f 08                	jg     12558 <kernel_itoa+0xa4>
   12550:	8b 45 08             	mov    0x8(%ebp),%eax
   12553:	83 c0 01             	add    $0x1,%eax
   12556:	eb 03                	jmp    1255b <kernel_itoa+0xa7>
   12558:	8b 45 08             	mov    0x8(%ebp),%eax
   1255b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p) {
   1255e:	eb 27                	jmp    12587 <kernel_itoa+0xd3>
        char ch = *start;
   12560:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12563:	0f b6 00             	movzbl (%eax),%eax
   12566:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   12569:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1256c:	0f b6 10             	movzbl (%eax),%edx
   1256f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12572:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   12574:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12577:	8d 50 ff             	lea    -0x1(%eax),%edx
   1257a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1257d:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   12581:	88 10                	mov    %dl,(%eax)
        start++;
   12583:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p) {
   12587:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1258a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   1258d:	72 d1                	jb     12560 <kernel_itoa+0xac>
    }
}
   1258f:	c9                   	leave  
   12590:	c3                   	ret    

00012591 <kernel_sprintf>:

/**
 *  格式化字符串到缓存中
 */
void kernel_sprintf(char * buffer, const char * fmt, ...) {
   12591:	f3 0f 1e fb          	endbr32 
   12595:	55                   	push   %ebp
   12596:	89 e5                	mov    %esp,%ebp
   12598:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args, fmt);
   1259b:	8d 45 10             	lea    0x10(%ebp),%eax
   1259e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buffer, fmt, args);
   125a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   125a4:	83 ec 04             	sub    $0x4,%esp
   125a7:	50                   	push   %eax
   125a8:	ff 75 0c             	pushl  0xc(%ebp)
   125ab:	ff 75 08             	pushl  0x8(%ebp)
   125ae:	e8 06 00 00 00       	call   125b9 <kernel_vsprintf>
   125b3:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   125b6:	90                   	nop
   125b7:	c9                   	leave  
   125b8:	c3                   	ret    

000125b9 <kernel_vsprintf>:


/**
 * 格式化字符串
 */
void kernel_vsprintf(char * buffer, const char * fmt, va_list args) {
   125b9:	f3 0f 1e fb          	endbr32 
   125bd:	55                   	push   %ebp
   125be:	89 e5                	mov    %esp,%ebp
   125c0:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   125c3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char * curr = buffer;
   125ca:	8b 45 08             	mov    0x8(%ebp),%eax
   125cd:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   125d0:	e9 41 01 00 00       	jmp    12716 <kernel_vsprintf+0x15d>
        switch (state) {
   125d5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   125d9:	74 0b                	je     125e6 <kernel_vsprintf+0x2d>
   125db:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   125df:	74 55                	je     12636 <kernel_vsprintf+0x7d>
   125e1:	e9 30 01 00 00       	jmp    12716 <kernel_vsprintf+0x15d>
            // 普通字符
            case NORMAL:
                if (ch == '%') {
   125e6:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   125ea:	75 0c                	jne    125f8 <kernel_vsprintf+0x3f>
                    state = READ_FMT;
   125ec:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   125f3:	e9 1e 01 00 00       	jmp    12716 <kernel_vsprintf+0x15d>
                } else if ((int)ch == 10) {
   125f8:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   125fc:	75 24                	jne    12622 <kernel_vsprintf+0x69>
                    // 换行\n
                    *curr++ = '\r';
   125fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12601:	8d 50 01             	lea    0x1(%eax),%edx
   12604:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12607:	c6 00 0d             	movb   $0xd,(%eax)
                    *curr++ = '\n';
   1260a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1260d:	8d 50 01             	lea    0x1(%eax),%edx
   12610:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12613:	c6 00 0a             	movb   $0xa,(%eax)
                    state = NORMAL;
   12616:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1261d:	e9 f4 00 00 00       	jmp    12716 <kernel_vsprintf+0x15d>
                }
                else {
                    *curr++ = ch;
   12622:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12625:	8d 50 01             	lea    0x1(%eax),%edx
   12628:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1262b:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1262f:	88 10                	mov    %dl,(%eax)
                }
                break;
   12631:	e9 e0 00 00 00       	jmp    12716 <kernel_vsprintf+0x15d>
            // 格式化控制字符，只支持部分
            case READ_FMT:
                if (ch == 'd') {
   12636:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1263a:	75 31                	jne    1266d <kernel_vsprintf+0xb4>
                    int num = va_arg(args, int);
   1263c:	8b 45 10             	mov    0x10(%ebp),%eax
   1263f:	8d 50 04             	lea    0x4(%eax),%edx
   12642:	89 55 10             	mov    %edx,0x10(%ebp)
   12645:	8b 00                	mov    (%eax),%eax
   12647:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr, num, 10);
   1264a:	6a 0a                	push   $0xa
   1264c:	ff 75 e4             	pushl  -0x1c(%ebp)
   1264f:	ff 75 f8             	pushl  -0x8(%ebp)
   12652:	e8 5d fe ff ff       	call   124b4 <kernel_itoa>
   12657:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   1265a:	ff 75 f8             	pushl  -0x8(%ebp)
   1265d:	e8 13 fd ff ff       	call   12375 <kernel_strlen>
   12662:	83 c4 04             	add    $0x4,%esp
   12665:	01 45 f8             	add    %eax,-0x8(%ebp)
   12668:	e9 a1 00 00 00       	jmp    1270e <kernel_vsprintf+0x155>

                } else if (ch == 'x') {
   1266d:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12671:	75 2e                	jne    126a1 <kernel_vsprintf+0xe8>
                    int num = va_arg(args, int);
   12673:	8b 45 10             	mov    0x10(%ebp),%eax
   12676:	8d 50 04             	lea    0x4(%eax),%edx
   12679:	89 55 10             	mov    %edx,0x10(%ebp)
   1267c:	8b 00                	mov    (%eax),%eax
   1267e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr, num, 16);
   12681:	6a 10                	push   $0x10
   12683:	ff 75 e8             	pushl  -0x18(%ebp)
   12686:	ff 75 f8             	pushl  -0x8(%ebp)
   12689:	e8 26 fe ff ff       	call   124b4 <kernel_itoa>
   1268e:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   12691:	ff 75 f8             	pushl  -0x8(%ebp)
   12694:	e8 dc fc ff ff       	call   12375 <kernel_strlen>
   12699:	83 c4 04             	add    $0x4,%esp
   1269c:	01 45 f8             	add    %eax,-0x8(%ebp)
   1269f:	eb 6d                	jmp    1270e <kernel_vsprintf+0x155>

                } else if (ch == 'c') {
   126a1:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   126a5:	75 1f                	jne    126c6 <kernel_vsprintf+0x10d>
                    char c = va_arg(args, int);
   126a7:	8b 45 10             	mov    0x10(%ebp),%eax
   126aa:	8d 50 04             	lea    0x4(%eax),%edx
   126ad:	89 55 10             	mov    %edx,0x10(%ebp)
   126b0:	8b 00                	mov    (%eax),%eax
   126b2:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   126b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126b8:	8d 50 01             	lea    0x1(%eax),%edx
   126bb:	89 55 f8             	mov    %edx,-0x8(%ebp)
   126be:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   126c2:	88 10                	mov    %dl,(%eax)
   126c4:	eb 48                	jmp    1270e <kernel_vsprintf+0x155>
                    
                } else if (ch == 's') {
   126c6:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   126ca:	75 42                	jne    1270e <kernel_vsprintf+0x155>
                    const char * str = va_arg(args, char *);
   126cc:	8b 45 10             	mov    0x10(%ebp),%eax
   126cf:	8d 50 04             	lea    0x4(%eax),%edx
   126d2:	89 55 10             	mov    %edx,0x10(%ebp)
   126d5:	8b 00                	mov    (%eax),%eax
   126d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   126da:	ff 75 f4             	pushl  -0xc(%ebp)
   126dd:	e8 93 fc ff ff       	call   12375 <kernel_strlen>
   126e2:	83 c4 04             	add    $0x4,%esp
   126e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while (len--) {
   126e8:	eb 17                	jmp    12701 <kernel_vsprintf+0x148>
                        *curr++ = *str++;
   126ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
   126ed:	8d 42 01             	lea    0x1(%edx),%eax
   126f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
   126f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126f6:	8d 48 01             	lea    0x1(%eax),%ecx
   126f9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   126fc:	0f b6 12             	movzbl (%edx),%edx
   126ff:	88 10                	mov    %dl,(%eax)
                    while (len--) {
   12701:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12704:	8d 50 ff             	lea    -0x1(%eax),%edx
   12707:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1270a:	85 c0                	test   %eax,%eax
   1270c:	75 dc                	jne    126ea <kernel_vsprintf+0x131>
                    }
                }

                state = NORMAL;
   1270e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   12715:	90                   	nop
    while ((ch = *fmt++)) {
   12716:	8b 45 0c             	mov    0xc(%ebp),%eax
   12719:	8d 50 01             	lea    0x1(%eax),%edx
   1271c:	89 55 0c             	mov    %edx,0xc(%ebp)
   1271f:	0f b6 00             	movzbl (%eax),%eax
   12722:	88 45 ef             	mov    %al,-0x11(%ebp)
   12725:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12729:	0f 85 a6 fe ff ff    	jne    125d5 <kernel_vsprintf+0x1c>
        }
    }
}
   1272f:	90                   	nop
   12730:	90                   	nop
   12731:	c9                   	leave  
   12732:	c3                   	ret    

00012733 <pannic>:



 void pannic(const char * file, int line, const char * func, const char * cond) {
   12733:	f3 0f 1e fb          	endbr32 
   12737:	55                   	push   %ebp
   12738:	89 e5                	mov    %esp,%ebp
   1273a:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   1273d:	83 ec 08             	sub    $0x8,%esp
   12740:	ff 75 14             	pushl  0x14(%ebp)
   12743:	68 1c 30 01 00       	push   $0x1301c
   12748:	e8 0b 03 00 00       	call   12a58 <log_printf>
   1274d:	83 c4 10             	add    $0x10,%esp
    log_printf("file:%s\nline:%d\nfunc:%s", file, line, func);
   12750:	ff 75 10             	pushl  0x10(%ebp)
   12753:	ff 75 0c             	pushl  0xc(%ebp)
   12756:	ff 75 08             	pushl  0x8(%ebp)
   12759:	68 2e 30 01 00       	push   $0x1302e
   1275e:	e8 f5 02 00 00       	call   12a58 <log_printf>
   12763:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12766:	e8 c6 fa ff ff       	call   12231 <hlt>
   1276b:	eb f9                	jmp    12766 <pannic+0x33>

0001276d <list_is_empty>:
static inline int list_is_empty (list_t * list) {
   1276d:	55                   	push   %ebp
   1276e:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12770:	8b 45 08             	mov    0x8(%ebp),%eax
   12773:	8b 40 08             	mov    0x8(%eax),%eax
   12776:	85 c0                	test   %eax,%eax
   12778:	0f 94 c0             	sete   %al
   1277b:	0f b6 c0             	movzbl %al,%eax
}
   1277e:	5d                   	pop    %ebp
   1277f:	c3                   	ret    

00012780 <list_init>:
#include "tools/list.h"



void list_init (list_t * list) {
   12780:	f3 0f 1e fb          	endbr32 
   12784:	55                   	push   %ebp
   12785:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t  *)0;
   12787:	8b 45 08             	mov    0x8(%ebp),%eax
   1278a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12791:	8b 45 08             	mov    0x8(%ebp),%eax
   12794:	8b 50 04             	mov    0x4(%eax),%edx
   12797:	8b 45 08             	mov    0x8(%ebp),%eax
   1279a:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   1279c:	8b 45 08             	mov    0x8(%ebp),%eax
   1279f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   127a6:	90                   	nop
   127a7:	5d                   	pop    %ebp
   127a8:	c3                   	ret    

000127a9 <list_insert_first>:

void list_insert_first (list_t * list, list_node_t * node) {
   127a9:	f3 0f 1e fb          	endbr32 
   127ad:	55                   	push   %ebp
   127ae:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   127b0:	8b 45 08             	mov    0x8(%ebp),%eax
   127b3:	8b 10                	mov    (%eax),%edx
   127b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   127b8:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   127bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   127be:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   127c4:	ff 75 08             	pushl  0x8(%ebp)
   127c7:	e8 a1 ff ff ff       	call   1276d <list_is_empty>
   127cc:	83 c4 04             	add    $0x4,%esp
   127cf:	85 c0                	test   %eax,%eax
   127d1:	74 15                	je     127e8 <list_insert_first+0x3f>
        list->last = list->first = node;
   127d3:	8b 45 08             	mov    0x8(%ebp),%eax
   127d6:	8b 55 0c             	mov    0xc(%ebp),%edx
   127d9:	89 10                	mov    %edx,(%eax)
   127db:	8b 45 08             	mov    0x8(%ebp),%eax
   127de:	8b 10                	mov    (%eax),%edx
   127e0:	8b 45 08             	mov    0x8(%ebp),%eax
   127e3:	89 50 04             	mov    %edx,0x4(%eax)
   127e6:	eb 12                	jmp    127fa <list_insert_first+0x51>
    }   else {
        list->first->pre = node;
   127e8:	8b 45 08             	mov    0x8(%ebp),%eax
   127eb:	8b 00                	mov    (%eax),%eax
   127ed:	8b 55 0c             	mov    0xc(%ebp),%edx
   127f0:	89 10                	mov    %edx,(%eax)
        list->first = node;
   127f2:	8b 45 08             	mov    0x8(%ebp),%eax
   127f5:	8b 55 0c             	mov    0xc(%ebp),%edx
   127f8:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   127fa:	8b 45 08             	mov    0x8(%ebp),%eax
   127fd:	8b 40 08             	mov    0x8(%eax),%eax
   12800:	8d 50 01             	lea    0x1(%eax),%edx
   12803:	8b 45 08             	mov    0x8(%ebp),%eax
   12806:	89 50 08             	mov    %edx,0x8(%eax)

}
   12809:	90                   	nop
   1280a:	c9                   	leave  
   1280b:	c3                   	ret    

0001280c <list_insert_last>:

void list_insert_last (list_t * list, list_node_t * node) {
   1280c:	f3 0f 1e fb          	endbr32 
   12810:	55                   	push   %ebp
   12811:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12813:	8b 45 08             	mov    0x8(%ebp),%eax
   12816:	8b 50 04             	mov    0x4(%eax),%edx
   12819:	8b 45 0c             	mov    0xc(%ebp),%eax
   1281c:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   1281e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12821:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   12828:	ff 75 08             	pushl  0x8(%ebp)
   1282b:	e8 3d ff ff ff       	call   1276d <list_is_empty>
   12830:	83 c4 04             	add    $0x4,%esp
   12833:	85 c0                	test   %eax,%eax
   12835:	74 15                	je     1284c <list_insert_last+0x40>
        list->last = list->first = node;
   12837:	8b 45 08             	mov    0x8(%ebp),%eax
   1283a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1283d:	89 10                	mov    %edx,(%eax)
   1283f:	8b 45 08             	mov    0x8(%ebp),%eax
   12842:	8b 10                	mov    (%eax),%edx
   12844:	8b 45 08             	mov    0x8(%ebp),%eax
   12847:	89 50 04             	mov    %edx,0x4(%eax)
   1284a:	eb 15                	jmp    12861 <list_insert_last+0x55>
    } else {
        list->last->next = node;
   1284c:	8b 45 08             	mov    0x8(%ebp),%eax
   1284f:	8b 40 04             	mov    0x4(%eax),%eax
   12852:	8b 55 0c             	mov    0xc(%ebp),%edx
   12855:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12858:	8b 45 08             	mov    0x8(%ebp),%eax
   1285b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1285e:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12861:	8b 45 08             	mov    0x8(%ebp),%eax
   12864:	8b 40 08             	mov    0x8(%eax),%eax
   12867:	8d 50 01             	lea    0x1(%eax),%edx
   1286a:	8b 45 08             	mov    0x8(%ebp),%eax
   1286d:	89 50 08             	mov    %edx,0x8(%eax)

}
   12870:	90                   	nop
   12871:	c9                   	leave  
   12872:	c3                   	ret    

00012873 <list_remove_first>:


list_node_t * list_remove_first (list_t * list) {
   12873:	f3 0f 1e fb          	endbr32 
   12877:	55                   	push   %ebp
   12878:	89 e5                	mov    %esp,%ebp
   1287a:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   1287d:	ff 75 08             	pushl  0x8(%ebp)
   12880:	e8 e8 fe ff ff       	call   1276d <list_is_empty>
   12885:	83 c4 04             	add    $0x4,%esp
   12888:	85 c0                	test   %eax,%eax
   1288a:	74 07                	je     12893 <list_remove_first+0x20>
        return (list_node_t *)0;
   1288c:	b8 00 00 00 00       	mov    $0x0,%eax
   12891:	eb 5b                	jmp    128ee <list_remove_first+0x7b>
    } 

    list_node_t * remove_node = list->first;
   12893:	8b 45 08             	mov    0x8(%ebp),%eax
   12896:	8b 00                	mov    (%eax),%eax
   12898:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   1289b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1289e:	8b 50 04             	mov    0x4(%eax),%edx
   128a1:	8b 45 08             	mov    0x8(%ebp),%eax
   128a4:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {  // 假如只有一个节点
   128a6:	8b 45 08             	mov    0x8(%ebp),%eax
   128a9:	8b 00                	mov    (%eax),%eax
   128ab:	85 c0                	test   %eax,%eax
   128ad:	75 0c                	jne    128bb <list_remove_first+0x48>
        list->last = (list_node_t *)0;
   128af:	8b 45 08             	mov    0x8(%ebp),%eax
   128b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   128b9:	eb 0c                	jmp    128c7 <list_remove_first+0x54>
    } else {
        remove_node->next->pre = (list_node_t *)0;   // 有超过一个节点
   128bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128be:	8b 40 04             	mov    0x4(%eax),%eax
   128c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    remove_node->pre = remove_node->next = (list_node_t * )0;
   128c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128ca:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   128d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128d4:	8b 50 04             	mov    0x4(%eax),%edx
   128d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128da:	89 10                	mov    %edx,(%eax)

    list->count--;
   128dc:	8b 45 08             	mov    0x8(%ebp),%eax
   128df:	8b 40 08             	mov    0x8(%eax),%eax
   128e2:	8d 50 ff             	lea    -0x1(%eax),%edx
   128e5:	8b 45 08             	mov    0x8(%ebp),%eax
   128e8:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   128eb:	8b 45 fc             	mov    -0x4(%ebp),%eax

}
   128ee:	c9                   	leave  
   128ef:	c3                   	ret    

000128f0 <list_remove>:

list_node_t * list_remove (list_t * list, list_node_t * node) {
   128f0:	f3 0f 1e fb          	endbr32 
   128f4:	55                   	push   %ebp
   128f5:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {  // 如果删除的点是头节点，直接置空
   128f7:	8b 45 08             	mov    0x8(%ebp),%eax
   128fa:	8b 00                	mov    (%eax),%eax
   128fc:	39 45 0c             	cmp    %eax,0xc(%ebp)
   128ff:	75 0b                	jne    1290c <list_remove+0x1c>
        list->first = node->next;
   12901:	8b 45 0c             	mov    0xc(%ebp),%eax
   12904:	8b 50 04             	mov    0x4(%eax),%edx
   12907:	8b 45 08             	mov    0x8(%ebp),%eax
   1290a:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {    // 删除的点是尾节点
   1290c:	8b 45 08             	mov    0x8(%ebp),%eax
   1290f:	8b 40 04             	mov    0x4(%eax),%eax
   12912:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12915:	75 0b                	jne    12922 <list_remove+0x32>
        list->last = node->pre;
   12917:	8b 45 0c             	mov    0xc(%ebp),%eax
   1291a:	8b 10                	mov    (%eax),%edx
   1291c:	8b 45 08             	mov    0x8(%ebp),%eax
   1291f:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12922:	8b 45 0c             	mov    0xc(%ebp),%eax
   12925:	8b 00                	mov    (%eax),%eax
   12927:	85 c0                	test   %eax,%eax
   12929:	74 0e                	je     12939 <list_remove+0x49>
        node->pre->next = node->next;
   1292b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1292e:	8b 00                	mov    (%eax),%eax
   12930:	8b 55 0c             	mov    0xc(%ebp),%edx
   12933:	8b 52 04             	mov    0x4(%edx),%edx
   12936:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12939:	8b 45 0c             	mov    0xc(%ebp),%eax
   1293c:	8b 40 04             	mov    0x4(%eax),%eax
   1293f:	85 c0                	test   %eax,%eax
   12941:	74 0d                	je     12950 <list_remove+0x60>
        node->next->pre = node->pre;
   12943:	8b 45 0c             	mov    0xc(%ebp),%eax
   12946:	8b 40 04             	mov    0x4(%eax),%eax
   12949:	8b 55 0c             	mov    0xc(%ebp),%edx
   1294c:	8b 12                	mov    (%edx),%edx
   1294e:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t *)0;
   12950:	8b 45 0c             	mov    0xc(%ebp),%eax
   12953:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1295a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1295d:	8b 50 04             	mov    0x4(%eax),%edx
   12960:	8b 45 0c             	mov    0xc(%ebp),%eax
   12963:	89 10                	mov    %edx,(%eax)
    list->count--;
   12965:	8b 45 08             	mov    0x8(%ebp),%eax
   12968:	8b 40 08             	mov    0x8(%eax),%eax
   1296b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1296e:	8b 45 08             	mov    0x8(%ebp),%eax
   12971:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   12974:	8b 45 0c             	mov    0xc(%ebp),%eax


   12977:	5d                   	pop    %ebp
   12978:	c3                   	ret    

00012979 <inb>:
static inline uint8_t inb (uint16_t port) {
   12979:	55                   	push   %ebp
   1297a:	89 e5                	mov    %esp,%ebp
   1297c:	83 ec 14             	sub    $0x14,%esp
   1297f:	8b 45 08             	mov    0x8(%ebp),%eax
   12982:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   12986:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1298a:	89 c2                	mov    %eax,%edx
   1298c:	ec                   	in     (%dx),%al
   1298d:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12990:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12994:	c9                   	leave  
   12995:	c3                   	ret    

00012996 <outb>:
static inline void outb (uint16_t port, uint8_t data) {
   12996:	55                   	push   %ebp
   12997:	89 e5                	mov    %esp,%ebp
   12999:	83 ec 08             	sub    $0x8,%esp
   1299c:	8b 45 08             	mov    0x8(%ebp),%eax
   1299f:	8b 55 0c             	mov    0xc(%ebp),%edx
   129a2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   129a6:	89 d0                	mov    %edx,%eax
   129a8:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   129ab:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   129af:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   129b3:	ee                   	out    %al,(%dx)
}
   129b4:	90                   	nop
   129b5:	c9                   	leave  
   129b6:	c3                   	ret    

000129b7 <log_init>:

static mutex_t mutex;

#define COM1_PORT 0x3F8

void log_init(void) {
   129b7:	f3 0f 1e fb          	endbr32 
   129bb:	55                   	push   %ebp
   129bc:	89 e5                	mov    %esp,%ebp
   129be:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   129c1:	83 ec 0c             	sub    $0xc,%esp
   129c4:	68 c8 8d 01 00       	push   $0x18dc8
   129c9:	e8 24 f3 ff ff       	call   11cf2 <mutex_init>
   129ce:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   129d1:	83 ec 08             	sub    $0x8,%esp
   129d4:	6a 00                	push   $0x0
   129d6:	68 f9 03 00 00       	push   $0x3f9
   129db:	e8 b6 ff ff ff       	call   12996 <outb>
   129e0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   129e3:	83 ec 08             	sub    $0x8,%esp
   129e6:	68 80 00 00 00       	push   $0x80
   129eb:	68 fb 03 00 00       	push   $0x3fb
   129f0:	e8 a1 ff ff ff       	call   12996 <outb>
   129f5:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   129f8:	83 ec 08             	sub    $0x8,%esp
   129fb:	6a 03                	push   $0x3
   129fd:	68 f8 03 00 00       	push   $0x3f8
   12a02:	e8 8f ff ff ff       	call   12996 <outb>
   12a07:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12a0a:	83 ec 08             	sub    $0x8,%esp
   12a0d:	6a 00                	push   $0x0
   12a0f:	68 f9 03 00 00       	push   $0x3f9
   12a14:	e8 7d ff ff ff       	call   12996 <outb>
   12a19:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12a1c:	83 ec 08             	sub    $0x8,%esp
   12a1f:	6a 03                	push   $0x3
   12a21:	68 fb 03 00 00       	push   $0x3fb
   12a26:	e8 6b ff ff ff       	call   12996 <outb>
   12a2b:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0x0c7);
   12a2e:	83 ec 08             	sub    $0x8,%esp
   12a31:	68 c7 00 00 00       	push   $0xc7
   12a36:	68 fa 03 00 00       	push   $0x3fa
   12a3b:	e8 56 ff ff ff       	call   12996 <outb>
   12a40:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0F);
   12a43:	83 ec 08             	sub    $0x8,%esp
   12a46:	6a 0f                	push   $0xf
   12a48:	68 fc 03 00 00       	push   $0x3fc
   12a4d:	e8 44 ff ff ff       	call   12996 <outb>
   12a52:	83 c4 10             	add    $0x10,%esp

}
   12a55:	90                   	nop
   12a56:	c9                   	leave  
   12a57:	c3                   	ret    

00012a58 <log_printf>:


void log_printf(const char * fmt, ...) {
   12a58:	f3 0f 1e fb          	endbr32 
   12a5c:	55                   	push   %ebp
   12a5d:	89 e5                	mov    %esp,%ebp
   12a5f:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;

    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12a65:	83 ec 04             	sub    $0x4,%esp
   12a68:	68 80 00 00 00       	push   $0x80
   12a6d:	6a 00                	push   $0x0
   12a6f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12a75:	50                   	push   %eax
   12a76:	e8 8c f9 ff ff       	call   12407 <kernel_memset>
   12a7b:	83 c4 10             	add    $0x10,%esp

    va_start(args, fmt);
   12a7e:	8d 45 0c             	lea    0xc(%ebp),%eax
   12a81:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   12a87:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12a8d:	83 ec 04             	sub    $0x4,%esp
   12a90:	50                   	push   %eax
   12a91:	ff 75 08             	pushl  0x8(%ebp)
   12a94:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12a9a:	50                   	push   %eax
   12a9b:	e8 19 fb ff ff       	call   125b9 <kernel_vsprintf>
   12aa0:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   12aa3:	83 ec 0c             	sub    $0xc,%esp
   12aa6:	68 c8 8d 01 00       	push   $0x18dc8
   12aab:	e8 74 f2 ff ff       	call   11d24 <mutex_lock>
   12ab0:	83 c4 10             	add    $0x10,%esp

    const char * p = str_buf;    
   12ab3:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12ab9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   12abc:	eb 3b                	jmp    12af9 <log_printf+0xa1>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);   // 检查当前串口是否在忙
   12abe:	90                   	nop
   12abf:	83 ec 0c             	sub    $0xc,%esp
   12ac2:	68 fd 03 00 00       	push   $0x3fd
   12ac7:	e8 ad fe ff ff       	call   12979 <inb>
   12acc:	83 c4 10             	add    $0x10,%esp
   12acf:	0f b6 c0             	movzbl %al,%eax
   12ad2:	83 e0 40             	and    $0x40,%eax
   12ad5:	85 c0                	test   %eax,%eax
   12ad7:	74 e6                	je     12abf <log_printf+0x67>
        outb(COM1_PORT, *p++);
   12ad9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12adc:	8d 50 01             	lea    0x1(%eax),%edx
   12adf:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12ae2:	0f b6 00             	movzbl (%eax),%eax
   12ae5:	0f b6 c0             	movzbl %al,%eax
   12ae8:	83 ec 08             	sub    $0x8,%esp
   12aeb:	50                   	push   %eax
   12aec:	68 f8 03 00 00       	push   $0x3f8
   12af1:	e8 a0 fe ff ff       	call   12996 <outb>
   12af6:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12afc:	0f b6 00             	movzbl (%eax),%eax
   12aff:	84 c0                	test   %al,%al
   12b01:	75 bb                	jne    12abe <log_printf+0x66>
    }

    outb(COM1_PORT, '\r');
   12b03:	83 ec 08             	sub    $0x8,%esp
   12b06:	6a 0d                	push   $0xd
   12b08:	68 f8 03 00 00       	push   $0x3f8
   12b0d:	e8 84 fe ff ff       	call   12996 <outb>
   12b12:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12b15:	83 ec 08             	sub    $0x8,%esp
   12b18:	6a 0a                	push   $0xa
   12b1a:	68 f8 03 00 00       	push   $0x3f8
   12b1f:	e8 72 fe ff ff       	call   12996 <outb>
   12b24:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   12b27:	83 ec 0c             	sub    $0xc,%esp
   12b2a:	68 c8 8d 01 00       	push   $0x18dc8
   12b2f:	e8 85 f2 ff ff       	call   11db9 <mutex_unlock>
   12b34:	83 c4 10             	add    $0x10,%esp
}
   12b37:	90                   	nop
   12b38:	c9                   	leave  
   12b39:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.text
	.global first_task_entry
	.extern first_task_main
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
	jmp first_task_main
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
#include "core/task.h"
#include "tools/log.h"

int first_task_main (void) {
80000010:	f3 0f 1e fb          	endbr32 
80000014:	55                   	push   %ebp
80000015:	89 e5                	mov    %esp,%ebp
80000017:	83 ec 08             	sub    $0x8,%esp
    for(;;) {
        log_printf("first task");
8000001a:	83 ec 0c             	sub    $0xc,%esp
8000001d:	68 68 30 01 00       	push   $0x13068
80000022:	e8 31 2a 01 80       	call   12a58 <log_printf>
80000027:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
8000002a:	83 ec 0c             	sub    $0xc,%esp
8000002d:	68 e8 03 00 00       	push   $0x3e8
80000032:	e8 f8 0f 01 80       	call   1102f <sys_sleep>
80000037:	83 c4 10             	add    $0x10,%esp
        log_printf("first task");
8000003a:	eb de                	jmp    8000001a <first_task_main+0xa>
